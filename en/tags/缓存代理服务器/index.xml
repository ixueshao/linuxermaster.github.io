<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>缓存代理服务器 on 云原生生态圈</title>
    <link>https://linuxermaster.github.io/en/tags/%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
    <description>Recent content in 缓存代理服务器 on 云原生生态圈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>marionxue@qq.com (Marionxue)</managingEditor>
    <webMaster>marionxue@qq.com (Marionxue)</webMaster>
    <copyright>[云原生生态圈](https://www.devopsman.cn) &amp;copy;2016-{year}, All Rights Reserved [转载注明出处: devopsman.cn](https://www.devopsman.cn)</copyright>
    <lastBuildDate>Sun, 12 Jul 2020 23:00:06 +0900</lastBuildDate>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    
        <atom:link href="https://linuxermaster.github.io/en/tags/%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Nginx专辑-03 Nginx之缓存代理模块的使用</title>
        <link>https://linuxermaster.github.io/en/posts/20200713-nginx%E4%B8%93%E8%BE%91-03-nginx%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
        <pubDate>Sun, 12 Jul 2020 23:00:06 +0900</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        <atom:modified>Sun, 12 Jul 2020 23:00:06 +0900</atom:modified>
        <guid>https://linuxermaster.github.io/en/posts/20200713-nginx%E4%B8%93%E8%BE%91-03-nginx%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
        <description>缓存服务器场景 配置一个缓存服务器，带来的优缺点，可以根据不同的场景适当选择： 当上游upstream端的服务器的响应内容发生了变化的时候，缓存服务器响应的内容在失</description>
        <content:encoded>&lt;h2 id=&#34;缓存服务器场景&#34;&gt;缓存服务器场景&lt;/h2&gt;
&lt;p&gt;配置一个缓存服务器，带来的优缺点，可以根据不同的场景适当选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当上游&lt;code&gt;upstream&lt;/code&gt;端的服务器的响应内容发生了变化的时候，缓存服务器响应的内容在失效时间之前是不会变化的，因此要确认是否适用当前的场景&lt;/li&gt;
&lt;li&gt;配置缓存代理服务器，可以提高网站的访问性能&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置实践&#34;&gt;配置实践&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;http&lt;/code&gt;段配置缓存的相关参数，如缓存的存储位置、缓存级别、缓存空间、缓存存储最大多少，缓存有效时常&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# http&lt;/span&gt;
proxy_cache_path /tmp/nginxcache &lt;span class=&#34;nv&#34;&gt;levels&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1:2 &lt;span class=&#34;nv&#34;&gt;keys_zone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my_cache:10m &lt;span class=&#34;nv&#34;&gt;max_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10g &lt;span class=&#34;nv&#34;&gt;inactive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;60m &lt;span class=&#34;nv&#34;&gt;use_temp_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;off&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;配置缓存服务器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;upstream local {
	server 127.0.0.1:8089;
}
server {
	server_name proxy.devopsman.cn;
	listen 80;
	location / {
		proxy_set_header Host $host;
		proxy_set_header X-Real_IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;;
		proxy_cache my_cache;
		proxy_cache_key $host$uri$is_args$args;
		proxy_cache_valid 200 304 302 1d;
		proxy_pass http://local;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后重载nginx之后，nginx就会自动的生成对应缓存目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nginx -s reload
root@master:/tmp# ls -alh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;grep nginx
drwx------  &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; www  root 4.0K Jul &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; 06:07 nginxcache
root@master:/tmp# tree ./nginxcache/
./nginxcache/
├── &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
│   └── 7d
├── &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
│   └── &lt;span class=&#34;m&#34;&gt;54&lt;/span&gt;
├── &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
│   ├── &lt;span class=&#34;m&#34;&gt;38&lt;/span&gt;
│   └── &lt;span class=&#34;m&#34;&gt;92&lt;/span&gt;
├── &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
│   └── &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt;
├── a
│   └── &lt;span class=&#34;m&#34;&gt;39&lt;/span&gt;
├── b
│   └── 2b
└── f
    └── c4

&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; directories, &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; files
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当我们对&lt;code&gt;proxy.devopsman.cn&lt;/code&gt;发起新的资源请求，资源就会被缓存在该目录下。当我们把&lt;code&gt;127.0.0.1:8089&lt;/code&gt;服务给停掉之后，访问之前访问过的资源依旧可以正常的获取，因为影响的数据是从缓存中直接返回的。&lt;/p&gt;
</content:encoded>
        <dc:creator>云原生生态圈</dc:creator>
        <media:content url="https://linuxermaster.github.ioimages/posts/GZip_tutorial.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Nginx</category>
            
          
            
              <category>缓存代理服务器</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>