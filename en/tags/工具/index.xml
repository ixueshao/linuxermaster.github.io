<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>工具 on 云原生生态圈</title>
    <link>https://linuxermaster.github.io/en/tags/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on 云原生生态圈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>marionxue@qq.com (Marionxue)</managingEditor>
    <webMaster>marionxue@qq.com (Marionxue)</webMaster>
    <copyright>[云原生生态圈](https://www.devopsman.cn) &amp;copy;2016-{year}, All Rights Reserved [转载注明出处: devopsman.cn](https://www.devopsman.cn)</copyright>
    <lastBuildDate>Wed, 10 Jun 2020 12:00:06 +0900</lastBuildDate>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    
        <atom:link href="https://linuxermaster.github.io/en/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Docker容器命令行可视化工具-Lazydocker</title>
        <link>https://linuxermaster.github.io/en/posts/20200615-lazydocker-%E4%B8%93%E4%B8%BA%E6%87%92%E4%BA%BA%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Wed, 10 Jun 2020 12:00:06 +0900</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        <atom:modified>Wed, 10 Jun 2020 12:00:06 +0900</atom:modified>
        <guid>https://linuxermaster.github.io/en/posts/20200615-lazydocker-%E4%B8%93%E4%B8%BA%E6%87%92%E4%BA%BA%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%B7%A5%E5%85%B7/</guid>
        <description>Lazydocker的使用背景 平时的工作管理中会使用到各种各样的命令行工具，有些人是比较厌烦的去学习各种命令以及选项，比如Docker的各种命令和选项其实都让人</description>
        <content:encoded>&lt;h4 id=&#34;lazydockerhttpsgithubcomjesseduffieldlazydocker的使用背景&#34;&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker&#34;&gt;Lazydocker&lt;/a&gt;的使用背景&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/59972109-8e9c8480-95cc-11e9-8350-38f7f86ba76d.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;平时的工作管理中会使用到各种各样的命令行工具，有些人是比较厌烦的去学习各种命令以及选项，比如&lt;code&gt;Docker&lt;/code&gt;的各种命令和选项其实都让人很头大，于是就有人做出来一款名为&lt;code&gt;Lazydocker&lt;/code&gt;的专为&lt;code&gt;懒人&lt;/code&gt;设计的&lt;code&gt;Docker&lt;/code&gt;和&lt;code&gt;docker-compose&lt;/code&gt;终端管理工具，该工具使用&lt;code&gt;Go&lt;/code&gt;语言开发基于&lt;code&gt;gocui&lt;/code&gt;实现。&lt;/p&gt;
&lt;p&gt;如果你发现自己的项目出了问题，或者是服务down掉了，那么&lt;code&gt;Lazydocker&lt;/code&gt;就可以立刻给你提供帮助。&lt;code&gt;Lazydocker&lt;/code&gt;可以帮助我们&lt;code&gt;DEBUG&lt;/code&gt;自己的项目或者服务，并且在出现问题时立刻重启所有组件，然后给我们提供详细的日志流。其中，日志流还会进行细项分类，并允许我们了解特定服务中发生的所有事情。是&lt;a href=&#34;https://github.com/jesseduffield/lazydocker&#34; title=&#34;Github仓库&#34;&gt;github&lt;/a&gt;上一个比较🔥的开源工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200614233443621.png&#34; alt=&#34;image-20200614233443621&#34; /&gt;&lt;/p&gt;
&lt;p&gt;除此之外，想要记住所有的Docker命令其实是很麻烦的，而且跨多个终端窗口跟踪容器也几乎是无法做到的。但是在&lt;code&gt;Lazydocker&lt;/code&gt;的帮助下，我们就可以在一个终端窗口中查看到所有你所需要的信息，而且常用的命令仅需按下一个键即可实现。毫无疑问，&lt;code&gt;Lazydocker&lt;/code&gt;绝对是懒人们的福音!我们先来看一下效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/demo3.gif&#34; alt=&#34;Gif&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;lazydocker的功能&#34;&gt;Lazydocker的功能&lt;/h4&gt;
&lt;p&gt;现在让我们先了解一下&lt;code&gt;Lazydocker&lt;/code&gt;的功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;清晰的查看所有的&lt;code&gt;Docker&lt;/code&gt;和&lt;code&gt;Docker-compose&lt;/code&gt;容器环境的状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实时查看容器/服务日志；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看容器指标的ascii图，这样您不仅可以感觉到而且看起来像开发人员&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义这些图形以测量您想要的几乎任何指标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入容器/服务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启/移除/重建容器或服务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看给定镜像的历史层信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改占用磁盘空间的容器、镜像或卷；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;lazydocker安装配置&#34;&gt;Lazydocker安装配置&lt;/h4&gt;
&lt;p&gt;你可以直接在&lt;code&gt;Github&lt;/code&gt;上下载&lt;a href=&#34;https://github.com/jesseduffield/lazydocker/releases&#34; title=&#34;下载地址&#34;&gt;二进制文件&lt;/a&gt;，也可以通过容器运行该命令，此处我直接使用二进制命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget https://github.com/jesseduffield/lazydocker/releases/download/v0.9/lazydocker_0.9_Darwin_x86_64.tar.gz
tar xf lazydocker_0.9_Darwin_x86_64.tar.gz
cp lazydocker /usr/local/bin/ &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x /usr/local/bin/lazydocker
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;因为该命令太长了，所以建议配置一个命令别名，方便我们使用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;alias lzd=&amp;#39;lazydocker&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此时，直接执行&lt;code&gt;lzd&lt;/code&gt;即可在终端上显示容器的各种指标状态图&lt;/p&gt;
&lt;h4 id=&#34;lazydocker的配置&#34;&gt;Lazydocker的配置&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Lazydocker&lt;/code&gt;支持用户自定义配置，对于不同的操作系统其配置文件存在不同的位置上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSX: &lt;code&gt;~/Library/Application Support/jesseduffield/lazydocker/config.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux: &lt;code&gt;~/.config/jesseduffield/lazydocker/config.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows: &lt;code&gt;C:\\Users\\&amp;lt;User&amp;gt;\\AppData\\Roaming\\jesseduffield\\lazydocker\\config.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过你可以在打开&lt;code&gt;Lazydocker&lt;/code&gt;之后，鼠标移到左上方，使用快捷键&lt;code&gt;o&lt;/code&gt;即可打开配置文件进入编辑状态，此时直接编辑即可，想要知道每个配置文件选项的含义，可以参考&lt;a href=&#34;https://godoc.org/github.com/jesseduffield/lazydocker/pkg/config&#34; title=&#34;开发配置含义&#34;&gt;开发配置参数&lt;/a&gt;查看，下面是一个配置的案例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/demo3-20200615001139282.gif&#34; alt=&#34;demo3.gif&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gui:
  scrollHeight: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
  theme:
    activeBorderColor:
    - green
    - bold
    inactiveBorderColor:
    - white
    optionsTextColor:
    - blue
  returnImmediately: &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
  wrapMainPanel: &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
reporting: undetermined
commandTemplates:
  dockerCompose: docker-compose
  restartService: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} restart {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  stopService: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} stop {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  serviceLogs: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} logs --since=60m --follow {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  viewServiceLogs: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} logs --follow {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  rebuildService: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} up -d --build {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  recreateService: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} up -d --force-recreate {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  viewContainerLogs: docker logs --timestamps --follow --since&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;60m &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; .Container.ID
    &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
  containerLogs: docker logs --timestamps --follow --since&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;60m &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; .Container.ID &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
  allLogs: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} logs --tail=300 --follow&amp;#39;&lt;/span&gt;
  viewAlLogs: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} logs&amp;#39;&lt;/span&gt;
  dockerComposeConfig: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} config&amp;#39;&lt;/span&gt;
  checkDockerComposeConfig: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} config --quiet&amp;#39;&lt;/span&gt;
  serviceTop: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} top {{ .Service.Name }}&amp;#39;&lt;/span&gt;
customCommands:
  containers:
  - name: bash
    attach: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
    command: docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; .Container.ID &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt; /bin/sh
    serviceNames: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;
oS:
  openCommand: open &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt;filename&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
  openLinkCommand: open &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt;link&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
update:
  dockerRefreshInterval: 100ms
stats:
  graphs:
  - caption: CPU &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    statPath: DerivedStats.CPUPercentage
    color: blue
  - caption: Memory &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    statPath: DerivedStats.MemoryPercentage
    color: green
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;lazydocker的快捷键&#34;&gt;Lazydocker的快捷键&lt;/h4&gt;
&lt;p&gt;在&lt;code&gt;lazydocker&lt;/code&gt;的交互式界面中，还提供了多种快捷键，大家可以通过快捷键快速的在多种功能之间切换。&lt;/p&gt;
&lt;h5 id=&#34;project&#34;&gt;Project&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;e&lt;/kbd&gt;: edit lazydocker config
  &lt;kbd&gt;o&lt;/kbd&gt;: open lazydocker config
  &lt;kbd&gt;[&lt;/kbd&gt;: previous tab
  &lt;kbd&gt;]&lt;/kbd&gt;: next tab
  &lt;kbd&gt;m&lt;/kbd&gt;: view logs
  &lt;kbd&gt;enter&lt;/kbd&gt;: focus main panel
&lt;/pre&gt;
&lt;h5 id=&#34;containers&#34;&gt;Containers&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;[&lt;/kbd&gt;: previous tab
  &lt;kbd&gt;]&lt;/kbd&gt;: next tab
  &lt;kbd&gt;d&lt;/kbd&gt;: remove
  &lt;kbd&gt;e&lt;/kbd&gt;: Hide/Show stopped containers
  &lt;kbd&gt;s&lt;/kbd&gt;: stop
  &lt;kbd&gt;r&lt;/kbd&gt;: restart
  &lt;kbd&gt;a&lt;/kbd&gt;: attach
  &lt;kbd&gt;m&lt;/kbd&gt;: view logs
  &lt;kbd&gt;c&lt;/kbd&gt;: run predefined custom command
  &lt;kbd&gt;b&lt;/kbd&gt;: view bulk commands
  &lt;kbd&gt;enter&lt;/kbd&gt;: focus main panel
&lt;/pre&gt;
&lt;h5 id=&#34;services&#34;&gt;Services&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;d&lt;/kbd&gt;: remove containers
  &lt;kbd&gt;s&lt;/kbd&gt;: stop
  &lt;kbd&gt;r&lt;/kbd&gt;: restart
  &lt;kbd&gt;a&lt;/kbd&gt;: attach
  &lt;kbd&gt;m&lt;/kbd&gt;: view logs
  &lt;kbd&gt;[&lt;/kbd&gt;: previous tab
  &lt;kbd&gt;]&lt;/kbd&gt;: next tab
  &lt;kbd&gt;R&lt;/kbd&gt;: view restart options
  &lt;kbd&gt;c&lt;/kbd&gt;: run predefined custom command
  &lt;kbd&gt;b&lt;/kbd&gt;: view bulk commands
  &lt;kbd&gt;enter&lt;/kbd&gt;: focus main panel
&lt;/pre&gt;
&lt;h5 id=&#34;images&#34;&gt;Images&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;[&lt;/kbd&gt;: previous tab
  &lt;kbd&gt;]&lt;/kbd&gt;: next tab
  &lt;kbd&gt;c&lt;/kbd&gt;: run predefined custom command
  &lt;kbd&gt;d&lt;/kbd&gt;: remove image
  &lt;kbd&gt;b&lt;/kbd&gt;: view bulk commands
  &lt;kbd&gt;enter&lt;/kbd&gt;: focus main panel
&lt;/pre&gt;
&lt;h5 id=&#34;volumes&#34;&gt;Volumes&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;[&lt;/kbd&gt;: previous tab
  &lt;kbd&gt;]&lt;/kbd&gt;: next tab
  &lt;kbd&gt;c&lt;/kbd&gt;: run predefined custom command
  &lt;kbd&gt;d&lt;/kbd&gt;: remove volume
  &lt;kbd&gt;b&lt;/kbd&gt;: view bulk commands
  &lt;kbd&gt;enter&lt;/kbd&gt;: focus main panel
&lt;/pre&gt;
&lt;h5 id=&#34;main&#34;&gt;Main&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;esc&lt;/kbd&gt;: return
&lt;/pre&gt;
&lt;h4 id=&#34;更多精彩专辑&#34;&gt;更多精彩专辑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI2MTQzNjQ5Ng==&amp;amp;action=getalbum&amp;amp;album_id=1369187505597235200&amp;amp;subscene=0&amp;amp;scenenote=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI2MTQzNjQ5Ng%3D%3D%26mid%3D2247484958%26idx%3D1%26sn%3D11f8e92c043bd9c3b8e90e065f115db2%26chksm%3Dea5b2321dd2caa377348a8fbab891c8ec36b1293cca97e859419ac452dde49ed8d2d3a1eca2d%26scene%3D0%26xtrack%3D1%26key%3D0f1187fb9cce3ad0f417b07d2cde6d6d7ecc728843b564a2884c93e6fdd5488ea9896347ee71bd92791bce84307e9858e828625d17e0aef3fcabbb7e777d0e9994e9364f9eaf266cad935e9146faaae6%26ascene%3D1%26uin%3DMjc5ODA5OTc2NA%253D%253D%26devicetype%3DiMac%2BMacBookPro15%252C1%2BOSX%2BOSX%2B10.15.5%2Bbuild(19F101)%26version%3D12040112%26nettype%3DWIFI%26lang%3Dzh_CN%26fontScale%3D100%26exportkey%3DAeB4wIawnx%252BKYpH9VsF12aQ%253D%26pass_ticket%3D3pf2gDXXsByxalM6lrUpxq1Wr%252BHc8vU07vVNbNzYexRtUYujsv7o3xFwckkFiR%252B6%26winzoom%3D1.000000&amp;amp;uin=&amp;amp;key=&amp;amp;devicetype=iMac+MacBookPro15%2C1+OSX+OSX+10.15.5+build(19F101)&amp;amp;version=12040112&amp;amp;lang=zh_CN&amp;amp;nettype=WIFI&amp;amp;ascene=1&amp;amp;fontScale=100&amp;amp;winzoom=1.000000&#34;&gt;运维架构专辑&lt;/a&gt;: 包含一些运维技术的使用&lt;code&gt;经验分享&lt;/code&gt;、&lt;code&gt;技术架构案例&lt;/code&gt;、&lt;code&gt;学习交流&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI2MTQzNjQ5Ng==&amp;amp;action=getalbum&amp;amp;album_id=1336873749727068161&amp;amp;subscene=0&amp;amp;scenenote=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI2MTQzNjQ5Ng%3D%3D%26mid%3D2247484922%26idx%3D1%26sn%3Dea6b573671df0dfe22fd39b0461afb09%26chksm%3Dea5b20c5dd2ca9d33e28b6f943360d1828cb77b5316abbda18eb35783cf498d4c292b3dbfb01%26scene%3D0%26xtrack%3D1%26key%3Dedcf9a611ec4e1b716fffa506181563e03e7d2454d1b981a39fc0e7050a31a198551033b5580e28e75603d29eea7fd2bc75c0bdad27dcb7e8554f01f4fecae3f89e5bd06c174e07257a5b64cb932d5f4%26ascene%3D1%26uin%3DMjc5ODA5OTc2NA%253D%253D%26devicetype%3DiMac%2BMacBookPro15%252C1%2BOSX%2BOSX%2B10.15.5%2Bbuild(19F101)%26version%3D12040112%26nettype%3DWIFI%26lang%3Dzh_CN%26fontScale%3D100%26exportkey%3DAdxiFAXoCLD49JSs84qW9GE%253D%26pass_ticket%3D3pf2gDXXsByxalM6lrUpxq1Wr%252BHc8vU07vVNbNzYexRtUYujsv7o3xFwckkFiR%252B6%26winzoom%3D1.000000&amp;amp;uin=&amp;amp;key=&amp;amp;devicetype=iMac+MacBookPro15%2C1+OSX+OSX+10.15.5+build(19F101)&amp;amp;version=12040112&amp;amp;lang=zh_CN&amp;amp;nettype=WIFI&amp;amp;ascene=1&amp;amp;fontScale=100&amp;amp;winzoom=1.000000&#34;&gt;kubernetes实践案例&lt;/a&gt;:都是&lt;code&gt;kubernetes&lt;/code&gt;相关的实践案例，毫无套路，大家都说好!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI2MTQzNjQ5Ng==&amp;amp;action=getalbum&amp;amp;album_id=1336890052449845249&amp;amp;subscene=27&amp;amp;scenenote=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI2MTQzNjQ5Ng%3D%3D%26mid%3D2247484720%26idx%3D1%26sn%3D959a5374e432db8f7a664ff064294a04%26chksm%3Dea5b200fdd2ca919d0ad98952f3daa3344c32becea6c708af00ad9cb1eee7cc0c042d824b270%26scene%3D27%26key%3Dedcf9a611ec4e1b7b9852f0731726bc0e69dd6c5339949af11ce0e66ef2a699c66396aa8683a31c0ae0a78aecd47c3e0947dfb812cf50dd45a30a7c224ea09b94f6dc97d30f6913ce7c3fe5e9204e594%26ascene%3D1%26uin%3DMjc5ODA5OTc2NA%253D%253D%26devicetype%3DiMac%2BMacBookPro15%252C1%2BOSX%2BOSX%2B10.15.5%2Bbuild(19F101)%26version%3D12040112%26nettype%3DWIFI%26lang%3Dzh_CN%26fontScale%3D100%26exportkey%3DAWAx4LL9ZK784Gv2BuoOEdw%253D%26pass_ticket%3D3pf2gDXXsByxalM6lrUpxq1Wr%252BHc8vU07vVNbNzYexRtUYujsv7o3xFwckkFiR%252B6%26winzoom%3D1.000000&amp;amp;uin=&amp;amp;key=&amp;amp;devicetype=iMac+MacBookPro15%2C1+OSX+OSX+10.15.5+build(19F101)&amp;amp;version=12040112&amp;amp;lang=zh_CN&amp;amp;nettype=WIFI&amp;amp;ascene=1&amp;amp;fontScale=100&amp;amp;winzoom=1.000000&#34;&gt;DevOps实践案例&lt;/a&gt;: 专辑内包括&lt;code&gt;Jenkins&lt;/code&gt;和&lt;code&gt;Gitlab&lt;/code&gt;各自&lt;code&gt;持续集成&lt;/code&gt;、&lt;code&gt;持续发布&lt;/code&gt;的实践案例，以及各种&lt;code&gt;模板库的最佳实践&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>云原生生态圈</dc:creator>
        <media:content url="https://linuxermaster.github.ioimages/posts/harbor-syncdata.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>docker</category>
            
          
            
              <category>工具</category>
            
          
            
              <category>可视化</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>P站风格Logo生成器</title>
        <link>https://linuxermaster.github.io/en/posts/20200607-p%E7%AB%99%E9%A3%8E%E6%A0%BClogo%E7%94%9F%E6%88%90%E5%99%A8/</link>
        <pubDate>Sun, 07 Jun 2020 12:00:06 +0900</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        <atom:modified>Sun, 07 Jun 2020 12:00:06 +0900</atom:modified>
        <guid>https://linuxermaster.github.io/en/posts/20200607-p%E7%AB%99%E9%A3%8E%E6%A0%BClogo%E7%94%9F%E6%88%90%E5%99%A8/</guid>
        <description>​ 最近发现很多的微信文章上出现了一种logo设计，跟P站的logo设计风格一样让人印象深刻，黑底白字，配上一小撮橙色，给人极强的冲击力。后来查了一下在Githu</description>
        <content:encoded>&lt;p&gt;&lt;img src=&#34;images.assets/image-20200607164436481.png&#34; alt=&#34;image-20200607164436481&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​      最近发现很多的微信文章上出现了一种logo设计，跟P站的logo设计风格一样让人印象深刻，黑底白字，配上一小撮橙色，给人极强的冲击力。后来查了一下在Github上发现有一个有意思的程序员弄的一个在线创意Logo生成器，利用&lt;code&gt;Logoly Pro&lt;/code&gt;可以生成类似&lt;code&gt;YouTobe&lt;/code&gt;、&lt;code&gt;P站&lt;/code&gt;等Logo风格的标志。分享给大家，于是就有了今天这篇文章。&lt;/p&gt;
&lt;h3 id=&#34;logoly的由来&#34;&gt;logoly的由来&lt;/h3&gt;
&lt;p&gt;这个风格的制作是由&lt;code&gt;tencent&lt;/code&gt;的一位大牛开发制作的，叫做&lt;code&gt;白宦成&lt;/code&gt;,这里是他对于这个网页版工具的自述：&lt;/p&gt;
&lt;p&gt;我自己平时经常要做一些 Side Project ，在做 Side Project 的时候，就涉及到了要做 Logo ，但是作为一个没有设计感的程序员，在做 Logo 时总是会做出一些很丑的 Logo ，于是痛定思痛，想想有没有什么有用的工具可以帮助我生成好看的 Logo。对于我来说，也不需要太过复杂，能够满足我自己的要求就行。&lt;/p&gt;
&lt;p&gt;P站Logo风格图片素材制作的官方网站：&lt;a href=&#34;https://logoly.pro/&#34; title=&#34;logoly网站&#34;&gt;https://logoly.pro/&lt;/a&gt; 代码仓库里面是这样描述的，”一个简单的在线徽标生成器，适合想要轻松设计徽标的人们&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200607171024698.png&#34; alt=&#34;image-20200607171024698&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;logoly的功能和特色&#34;&gt;logoly的功能和特色&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;生成P站风格的logo&lt;/li&gt;
&lt;li&gt;支持导出&lt;code&gt;png&lt;/code&gt;格式的图片&lt;/li&gt;
&lt;li&gt;支持修改&lt;code&gt;前缀/后缀/背景&lt;/code&gt;的颜色&lt;/li&gt;
&lt;li&gt;支持设置字体的大小&lt;/li&gt;
&lt;li&gt;支持自定义字体&lt;code&gt;TODO&lt;/code&gt;，可能是为了防止侵权，避免使用一些未开源的字体&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;logoly的使用方法&#34;&gt;logoly的使用方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打开logoly网站: &lt;a href=&#34;https://logoly.pro/s&#34;&gt;https://logoly.pro/s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在文本框内输入需要的文本&lt;/li&gt;
&lt;li&gt;修改你需要的颜色和字体的大小&lt;/li&gt;
&lt;li&gt;点击导出即可下载&lt;code&gt;png&lt;/code&gt;格式的图片&lt;/li&gt;
&lt;li&gt;还是不太懂得，可以看一下哔哩哔哩&lt;code&gt;B站&lt;/code&gt;上别人发的文章，或者就放弃使用吧！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200607164549053.png&#34; alt=&#34;image-20200607164549053&#34; /&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>云原生生态圈</dc:creator>
        <media:content url="https://linuxermaster.github.ioimages/posts/harbor-syncdata.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>logo</category>
            
          
            
              <category>logoly</category>
            
          
            
              <category>工具</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>技术人员最常用的命令行工具</title>
        <link>https://linuxermaster.github.io/en/posts/20200531-%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Sat, 30 May 2020 12:00:06 +0900</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        <atom:modified>Sat, 30 May 2020 12:00:06 +0900</atom:modified>
        <guid>https://linuxermaster.github.io/en/posts/20200531-%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
        <description></description>
        <content:encoded>&lt;h4 id=&#34;autojump&#34;&gt;autojump&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/autojump.svg&#34; alt=&#34;Github stars&#34; /&gt;&lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/wting/autojump?label=watch&amp;logoColor=red&amp;style=social&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;autojump&lt;/code&gt; 是一款非常方便的命令行下的目录跳转工具，它能帮你快速从目录访问的历史记录中统计出各个目录的访问频次和权重，这样，就能方便的让你在各个目录中迅速跳转了。只要你记得之前某个访问过的目录的大概名字，配合 autojump，就能快速的跳转过去，再也不用打一长串的 &lt;code&gt;cd&lt;/code&gt; 命令了。使用方式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/autojump.gif&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;安装&#34;&gt;安装&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install autojump
&lt;span class=&#34;c1&#34;&gt;# 大多数mac系统都会安装zsh,因此当安装配置好autojump之后，需要将以下代码写入到~/.zshrc&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; -s &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;brew --prefix&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/etc/autojump.sh &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; . &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;brew --prefix&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/etc/autojump.sh
&lt;span class=&#34;c1&#34;&gt;# 最后在source一遍&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;tig&#34;&gt;tig&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/jonas/tig?style=social&#34;&gt;&lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/jonas/tig?style=social&#34;&gt;&lt;/p&gt;
&lt;p&gt;Git 已经成为我们平时经常用到的版本控制管理工具。通常，我们用 &lt;code&gt;git log&lt;/code&gt; 命令来查看 git 提交的历史记录。如果你已经厌倦了 &lt;code&gt;git log&lt;/code&gt; 那种千篇一律的界面，那么 &lt;code&gt;tig&lt;/code&gt; 绝对是一个不可错过的命令行下查看 git 历史提交记录的工具&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/tig.gif&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tig&lt;/code&gt; 的界面看起来比起 &lt;code&gt;git log&lt;/code&gt; 要酷炫不少，而且使用起来也挺方便。此外，&lt;code&gt;tig&lt;/code&gt; 的默认按键绑定还跟 Vim 比较类似，真是 Vimer 的福音。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install tig
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;git-summary&#34;&gt;git summary&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/tj/git-extras?style=social&#34;&gt;&lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/tj/git-extras?style=social&#34;&gt;&lt;/p&gt;
&lt;p&gt;平时我们在多人合作开发一个项目的时候，想要大致了解一下每个人对这个项目提交的 commit 数量和大致的贡献度，那么 &lt;code&gt;git summary&lt;/code&gt; 这个命令绝对能满足你的要求&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/summary.gif&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git summary&lt;/code&gt; 通过对项目中每一个 commit 的统计，能大致计算出每个 contributor 的提交次数和贡献百分比。让你对这个项目的贡献度能一目了然。&lt;/p&gt;
&lt;p&gt;默认 git 是不会带有这个命令的，需要在 Mac OS 下额外安装一个扩展包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install git-extras
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;the_silver_searcher&#34;&gt;the_silver_searcher&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/ggreer/the_silver_searcher?style=social&#34;&gt;&lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/ggreer/the_silver_searcher?style=social&#34;&gt;&lt;/p&gt;
&lt;p&gt;UNIX/Linux 系统有不少好用的工具，用于文本搜索的 &lt;code&gt;grep&lt;/code&gt; 或许是其中最常用的工具之一。尽管平时称心如意，在面对数百万行的代码库时，&lt;code&gt;grep&lt;/code&gt; 的用户体验实在堪忧。还好，我们有 the silver searcher （即 &lt;code&gt;ag&lt;/code&gt;）这样迅捷的替代品&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200531233956746.png&#34; alt=&#34;image-20200531233956746&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在文本中搜索指定的字符串,显示包含字符串的行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ag &lt;span class=&#34;s2&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; ./tagret.file
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示含有指定字符串的文件名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ag -l &lt;span class=&#34;s1&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; .
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tmux&#34;&gt;tmux&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/tmux/tmux?style=social&#34;&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/tmux/tmux?style=social&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们在远程执行命令的时候，经常性的会因为网络异常&lt;code&gt;打嗝&lt;/code&gt;造成回话断开，命令执行失败，此时你就需要一个 Tmux，它是一个终端复用器（terminal multiplexer)。这样即使你远程连接服务器的笔记本断网了，也不会终端你在服务器上执行的命令；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/tao-tmux-screenshot.png&#34; alt=&#34;_images/tao-tmux-screenshot.png&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用&lt;/li&gt;
&lt;li&gt;它可以让新窗口&amp;quot;接入&amp;quot;已经存在的会话&lt;/li&gt;
&lt;li&gt;它允许每个会话有多个连接窗口，因此可以多人实时共享会话。&lt;/li&gt;
&lt;li&gt;它还支持窗口任意的垂直和水平拆分。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;jq&#34;&gt;jq&lt;/h4&gt;
&lt;p&gt;json 文件处理以及格式化显示，支持高亮，可以替换 python -m json.tool&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200531235315498.png&#34; alt=&#34;image-20200531235315498&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;httpstat&#34;&gt;httpstat&lt;/h4&gt;
&lt;p&gt;HTTP 响应的可视化命令行工具,请求含有&lt;code&gt;http/https&lt;/code&gt;前缀的 url,支持所有&lt;code&gt;curl&lt;/code&gt;支持的除了&lt;code&gt;-w&lt;/code&gt;,&lt;code&gt;-D&lt;/code&gt;,&lt;code&gt;-o&lt;/code&gt;,&lt;code&gt;-S&lt;/code&gt;,&lt;code&gt;-s&lt;/code&gt;之外的所有选项。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/screenshot.png&#34; alt=&#34;screenshot&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;thefuck&#34;&gt;thefuck&lt;/h4&gt;
&lt;p&gt;命令行打错了以后，打一个&lt;code&gt;fuck&lt;/code&gt;就会自动纠正。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/example.gif&#34; alt=&#34;gif with examples&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;shellcheckhttpsgithubcomkoalamanshellcheck&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;shellcheck&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ShellCheck，用于 Shell 脚本的静态分析工具，在网页上检查你的脚本：https://www.shellcheck.net/ ,shellcheck 具体会检查一些什么问题呢，以下给出一个不完整的问题检查列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引号问题&lt;/li&gt;
&lt;li&gt;条件判断 ShellCheck 可以识别大多数不正确的条件判断语句&lt;/li&gt;
&lt;li&gt;常见的对命令的错误使用&lt;/li&gt;
&lt;li&gt;ShellCheck 识别很多初学者的语法错误&lt;/li&gt;
&lt;li&gt;ShellCheck 可以提出一些风格改进建议&lt;/li&gt;
&lt;li&gt;ShellCheck 可以识别一些数据和拼写错误&lt;/li&gt;
&lt;li&gt;ShellCheck 可以做出一些增强脚本鲁棒性的建议&lt;/li&gt;
&lt;li&gt;ShellCheck 警告你使用了 shebang 不支持的特性.&lt;/li&gt;
&lt;li&gt;ShellCheck 可以识别到一些其他问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200601190404241.png&#34; alt=&#34;image-20200601190404241&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;glances&#34;&gt;glances&lt;/h3&gt;
&lt;p&gt;top/htop`的替代方案，官网地址:https://nicolargo.github.io/glances/&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/screenshot-wide.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;</content:encoded>
        <dc:creator>云原生生态圈</dc:creator>
        <media:content url="https://linuxermaster.github.ioimages/posts/harbor-syncdata.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Termianl</category>
            
          
            
              <category>工具</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>