<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Nginx on 云原生生态圈</title>
    <link>https://linuxermaster.github.io/en/tags/nginx/</link>
    <description>Recent content in Nginx on 云原生生态圈</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>marionxue@qq.com (Marionxue)</managingEditor>
    <webMaster>marionxue@qq.com (Marionxue)</webMaster>
    <copyright>[云原生生态圈](https://www.devopsman.cn) &amp;copy;2016-{year}, All Rights Reserved [转载注明出处: devopsman.cn](https://www.devopsman.cn)</copyright>
    <lastBuildDate>Sun, 12 Jul 2020 23:00:06 +0900</lastBuildDate>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    
        <atom:link href="https://linuxermaster.github.io/en/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Nginx专辑-02 Nginx静态服务器规范化配置</title>
        <link>https://linuxermaster.github.io/en/posts/20200712-nginx%E4%B8%93%E8%BE%91-02-nginx%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%84%E8%8C%83%E5%8C%96%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Sun, 12 Jul 2020 23:00:06 +0900</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        <atom:modified>Sun, 12 Jul 2020 23:00:06 +0900</atom:modified>
        <guid>https://linuxermaster.github.io/en/posts/20200712-nginx%E4%B8%93%E8%BE%91-02-nginx%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%84%E8%8C%83%E5%8C%96%E9%85%8D%E7%BD%AE/</guid>
        <description>背景研究 分享一个通过 nginx 搭建一个静态资源的 web 服务器，实践中将会涉及到三个部分的内容： 静态文件服务器的配置 Nginx模块之gzip 自定义访问日志的格式: Embedded Variables 静态文件</description>
        <content:encoded>&lt;h2 id=&#34;背景研究&#34;&gt;背景研究&lt;/h2&gt;
&lt;p&gt;分享一个通过 &lt;a href=&#34;https://nginx.org&#34; title=&#34;Nginx网站&#34;&gt;nginx&lt;/a&gt; 搭建一个静态资源的 web 服务器，实践中将会涉及到三个部分的内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;静态文件服务器的配置&lt;/li&gt;
&lt;li&gt;Nginx模块之&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_gzip_module.html&#34; title=&#34;Nginx-module-gzip&#34;&gt;gzip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自定义访问日志的格式: &lt;code&gt;Embedded Variables&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;静态文件服务器&#34;&gt;静态文件服务器&lt;/h2&gt;
&lt;p&gt;简单的就通过一个自定义的&lt;code&gt;index.html&lt;/code&gt;文件当做一个静态页面Demo，下面准备一下静态文件资源存储的位置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir /webserver/nginx18/ops/
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;云原生生态圈&amp;#34;&lt;/span&gt; &amp;gt; /webserver/nginx18/ops/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;增加nginx配置文件，在&lt;code&gt;/webserver/nginx18/conf/nginx.conf&lt;/code&gt;里增加一个 server 配置段，然后通过 alias 映射到虚拟目录。注意访问时 location 中的&lt;code&gt;/&lt;/code&gt;对应的是 ops 后面的&lt;code&gt;/&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;server {
     listen      80;
     server_name web.devopsman.cn;
     location / {
        alias ops/;
     }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试访问:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bashj&#34; data-lang=&#34;bashj&#34;&gt;☸️  k8sdev🔥 default  ~  🐳 👉 curl web.devopsman.cn
静态网站demo
☸️  k8sdev🔥 default  ~  🐳 👉 curl -I web.devopsman.cn
HTTP/1.1 200 OK
Server: nginx/1.18.0
Date: Sat, 11 Jul 2020 14:11:46 GMT
Content-Type: text/html
Content-Length: 17
Last-Modified: Sat, 11 Jul 2020 14:11:13 GMT
Connection: keep-alive
ETag: &amp;quot;5f09c881-11&amp;quot;
Accept-Ranges: bytes
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;开启静态网站压缩&#34;&gt;开启静态网站压缩&lt;/h2&gt;
&lt;p&gt;nginx可以通过一种浏览器支持且压缩不受数据损失的gzip模块将样式文件、文本文件、图片等压缩之后在用户的请求之间传输，但是对于&lt;code&gt;jpg、jpeg、png&lt;/code&gt;这类本身存在压缩性质上的图片来说，压缩效果不是很明显，主要体现在文本文件的压缩上，因此对于服务的提供者来说，减少了不小的流量带宽的使用，同时也提高访问速度。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  gzip  on&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  gzip_min_length 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 表示小于1k不压缩&lt;/span&gt;
  gzip_comp_level 2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 设置压缩的级别&lt;/span&gt;
  gzip_types text_plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 启用压缩类型的文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;gzip_comp_level&lt;/code&gt;的压缩比设置区间为&lt;code&gt;0-9&lt;/code&gt;,设置的压缩比越高，文件越小，但是对服务器CPU的消耗也就越多，一般出于这种选择压缩比为&lt;code&gt;6&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:/webserver/nginx18/conf# curl -I http://web.devopsman.cn/test.html
HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
Server: nginx/1.18.0
Date: Sun, &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 13:45:22 GMT
Content-Type: text/html
Content-Length: &lt;span class=&#34;m&#34;&gt;20480&lt;/span&gt;
Last-Modified: Sun, &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 13:34:14 GMT
Connection: keep-alive
ETag: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5f0b1156-5000&amp;#34;&lt;/span&gt;
Accept-Ranges: bytes

root@master:/webserver/nginx18/conf# curl -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Accept-Encoding: gzip&amp;#34;&lt;/span&gt; -I http://web.devopsman.cn/test.html
HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
Server: nginx/1.18.0
Date: Sun, &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 13:45:26 GMT
Content-Type: text/html
Last-Modified: Sun, &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 13:34:14 GMT
Connection: keep-alive
ETag: W/&lt;span class=&#34;s2&#34;&gt;&amp;#34;5f0b1156-5000&amp;#34;&lt;/span&gt;
Content-Encoding: gzip
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过以上测试的方式，既可以访问&lt;code&gt;gzip_types&lt;/code&gt;中设定的类型的资源的时候，除了图片之外，应该能成功的找到&lt;code&gt;Content-Encoding: gzip&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;配置访问日志格式&#34;&gt;配置访问日志格式&lt;/h2&gt;
&lt;p&gt;nginx 的日志格式，是通过 nginx 支持的环境变量将所需要的日志信息给组装在一起，在 nginx 里，除了内置的环境变量之外，还包括第三方模块的环境变量信息，比如，nginx 核心模块的支持的环境变量可以在&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_core_module.html#variables&#34; title=&#34;Nignx-core Embedded Variables&#34;&gt;Embedded Variables&lt;/a&gt;找到，第三方支持哪些环境变量可以在对应的模块文档中找到，比如&lt;code&gt;realip&lt;/code&gt;模块支持的环境变量&lt;a href=&#34;http://nginx.org/en/docs/stream/ngx_stream_realip_module.html#variables&#34; title=&#34;nginx-realip Embedded variables&#34;&gt;Embedded Variables&lt;/a&gt;，下面是是一个定义的案例，定义一个&lt;code&gt;main&lt;/code&gt;类型的日志格式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;log_format main &#39;{&#39;
  &#39;&amp;quot;@timestamp&amp;quot;:&amp;quot;$time_iso8601&amp;quot;,&#39;
  &#39;&amp;quot;connection&amp;quot;:&amp;quot;$connection&amp;quot;,&#39;
  &#39;&amp;quot;connection_requests&amp;quot;:&amp;quot;$connection_requests&amp;quot;,&#39;
  &#39;&amp;quot;request&amp;quot;:&amp;quot;$request&amp;quot;,&#39;
  &#39;&amp;quot;request_time&amp;quot;:&amp;quot;$request_time&amp;quot;,&#39;
  &#39;&amp;quot;request_length&amp;quot;:&amp;quot;$request_length&amp;quot;,&#39;
  &#39;&amp;quot;request_uri&amp;quot;:&amp;quot;$request_uri&amp;quot;,&#39;
  &#39;&amp;quot;request_method&amp;quot;:&amp;quot;$request_method&amp;quot;,&#39;
  &#39;&amp;quot;server_name&amp;quot;:&amp;quot;$server_name&amp;quot;,&#39;
  &#39;&amp;quot;status&amp;quot;:&amp;quot;$status&amp;quot;,&#39;
  &#39;&amp;quot;remote_user&amp;quot;:&amp;quot;$remote_user&amp;quot;,&#39;
  &#39;&amp;quot;remote_addr&amp;quot;:&amp;quot;$remote_addr&amp;quot;,&#39;
  &#39;&amp;quot;time_local&amp;quot;:&amp;quot;$time_local&amp;quot;,&#39;
  &#39;&amp;quot;body_bytes_sent&amp;quot;:&amp;quot;$body_bytes_sent&amp;quot;,&#39;
  &#39;&amp;quot;bytes_sent&amp;quot;:&amp;quot;$bytes_sent&amp;quot;,&#39;
  &#39;&amp;quot;msec&amp;quot;:&amp;quot;$msec&amp;quot;,&#39;
  &#39;&amp;quot;upstream_status&amp;quot;:&amp;quot;$upstream_status&amp;quot;,&#39;
  &#39;&amp;quot;upstream_addr&amp;quot;:&amp;quot;$upstream_addr&amp;quot;,&#39;
  &#39;&amp;quot;upstream_response_time&amp;quot;:&amp;quot;$upstream_response_time&amp;quot;,&#39;
  &#39;&amp;quot;http_sessionKey&amp;quot;:&amp;quot;$http_sessionKey&amp;quot;,&#39;
  &#39;&amp;quot;cookie_sk&amp;quot;:&amp;quot;$cookie_sk&amp;quot;,&#39;
  &#39;&amp;quot;http_referer&amp;quot;:&amp;quot;$http_referer&amp;quot;,&#39;
  &#39;&amp;quot;http_user_agent&amp;quot;:&amp;quot;$http_user_agent&amp;quot;,&#39;
  &#39;&amp;quot;http_x_forwarded_for&amp;quot;:&amp;quot;$http_x_forwarded_for&amp;quot;&#39;
  &#39;}&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在定义好日志格式之后，通过&lt;code&gt;access_log&lt;/code&gt;指令配置日志的存储路径，在配置完日志之后，&lt;code&gt;reload&lt;/code&gt;一下就可自动创建日志文件，以上的环境变量含义都可以在官网上找到准确的释义:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;access_log  logs/web.devopsman.cn.access.log  main&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此时，发送一个 http 的请求，就会按照日志的格式记录日志写入到日志文件中:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:/webserver/nginx18/logs# tail -f web.devopsman.cn.access.log
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;@timestamp&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;2020-07-11T10:26:55-04:00&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;connection&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;17&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;connection_requests&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;HEAD / HTTP/1.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;request_time&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.000&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;request_length&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;81&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;request_uri&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;request_method&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;HEAD&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;server_name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;web.devopsman.cn&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;remote_user&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;remote_addr&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.99.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;time_local&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;11/Jul/2020:10:26:55 -0400&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;body_bytes_sent&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;bytes_sent&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;236&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;msec&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;1594477615.080&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;upstream_status&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;upstream_addr&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;upstream_response_time&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;http_sessionKey&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;cookie_sk&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;http_referer&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;http_user_agent&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;curl/7.64.1&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;http_x_forwarded_for&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
        <dc:creator>云原生生态圈</dc:creator>
        <media:content url="https://linuxermaster.github.ioimages/posts/GZip_tutorial.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Nginx</category>
            
          
            
              <category>gzip</category>
            
          
            
              <category>日志规范</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Nginx专辑-03 Nginx之缓存代理模块的使用</title>
        <link>https://linuxermaster.github.io/en/posts/20200713-nginx%E4%B8%93%E8%BE%91-03-nginx%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
        <pubDate>Sun, 12 Jul 2020 23:00:06 +0900</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        <atom:modified>Sun, 12 Jul 2020 23:00:06 +0900</atom:modified>
        <guid>https://linuxermaster.github.io/en/posts/20200713-nginx%E4%B8%93%E8%BE%91-03-nginx%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
        <description>缓存服务器场景 配置一个缓存服务器，带来的优缺点，可以根据不同的场景适当选择： 当上游upstream端的服务器的响应内容发生了变化的时候，缓存服务器响应的内容在失</description>
        <content:encoded>&lt;h2 id=&#34;缓存服务器场景&#34;&gt;缓存服务器场景&lt;/h2&gt;
&lt;p&gt;配置一个缓存服务器，带来的优缺点，可以根据不同的场景适当选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当上游&lt;code&gt;upstream&lt;/code&gt;端的服务器的响应内容发生了变化的时候，缓存服务器响应的内容在失效时间之前是不会变化的，因此要确认是否适用当前的场景&lt;/li&gt;
&lt;li&gt;配置缓存代理服务器，可以提高网站的访问性能&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置实践&#34;&gt;配置实践&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;http&lt;/code&gt;段配置缓存的相关参数，如缓存的存储位置、缓存级别、缓存空间、缓存存储最大多少，缓存有效时常&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# http&lt;/span&gt;
proxy_cache_path /tmp/nginxcache &lt;span class=&#34;nv&#34;&gt;levels&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1:2 &lt;span class=&#34;nv&#34;&gt;keys_zone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;my_cache:10m &lt;span class=&#34;nv&#34;&gt;max_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10g &lt;span class=&#34;nv&#34;&gt;inactive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;60m &lt;span class=&#34;nv&#34;&gt;use_temp_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;off&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;配置缓存服务器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;upstream local {
	server 127.0.0.1:8089;
}
server {
	server_name proxy.devopsman.cn;
	listen 80;
	location / {
		proxy_set_header Host $host;
		proxy_set_header X-Real_IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;;
		proxy_cache my_cache;
		proxy_cache_key $host$uri$is_args$args;
		proxy_cache_valid 200 304 302 1d;
		proxy_pass http://local;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后重载nginx之后，nginx就会自动的生成对应缓存目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nginx -s reload
root@master:/tmp# ls -alh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;grep nginx
drwx------  &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; www  root 4.0K Jul &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; 06:07 nginxcache
root@master:/tmp# tree ./nginxcache/
./nginxcache/
├── &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
│   └── 7d
├── &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
│   └── &lt;span class=&#34;m&#34;&gt;54&lt;/span&gt;
├── &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
│   ├── &lt;span class=&#34;m&#34;&gt;38&lt;/span&gt;
│   └── &lt;span class=&#34;m&#34;&gt;92&lt;/span&gt;
├── &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
│   └── &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt;
├── a
│   └── &lt;span class=&#34;m&#34;&gt;39&lt;/span&gt;
├── b
│   └── 2b
└── f
    └── c4

&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; directories, &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; files
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当我们对&lt;code&gt;proxy.devopsman.cn&lt;/code&gt;发起新的资源请求，资源就会被缓存在该目录下。当我们把&lt;code&gt;127.0.0.1:8089&lt;/code&gt;服务给停掉之后，访问之前访问过的资源依旧可以正常的获取，因为影响的数据是从缓存中直接返回的。&lt;/p&gt;
</content:encoded>
        <dc:creator>云原生生态圈</dc:creator>
        <media:content url="https://linuxermaster.github.ioimages/posts/GZip_tutorial.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Nginx</category>
            
          
            
              <category>缓存代理服务器</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Nginx专辑- 01 Nginx1.18编译安装</title>
        <link>https://linuxermaster.github.io/en/posts/20200711-nginx%E4%B8%93%E8%BE%91-01-nginx1.18%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</link>
        <pubDate>Sat, 11 Jul 2020 23:00:06 +0900</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        <atom:modified>Sat, 11 Jul 2020 23:00:06 +0900</atom:modified>
        <guid>https://linuxermaster.github.io/en/posts/20200711-nginx%E4%B8%93%E8%BE%91-01-nginx1.18%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</guid>
        <description>Nginx 编译安装的前期准备 Nginx 的编译安装一般用于需要加入一些扩展的第三方模块或者自研发的扩展功能包，所以在编译之前需要提前下载准备好这些扩展的包文件，比如我们编译的时候</description>
        <content:encoded>&lt;h2 id=&#34;nginx-编译安装的前期准备&#34;&gt;Nginx 编译安装的前期准备&lt;/h2&gt;
&lt;p&gt;Nginx 的编译安装一般用于需要加入一些扩展的第三方模块或者自研发的扩展功能包，所以在编译之前需要提前下载准备好这些扩展的包文件，比如我们编译的时候增加需要使用&lt;code&gt;jemalloc&lt;/code&gt;优化 nginx 内存，使用&lt;code&gt;openssl&lt;/code&gt;实现 nginx 的 https 数据加密，使用&lt;code&gt;zlib&lt;/code&gt;库扩展 nginx 压缩的功能等，下面我们下载一些我们需要的基础依赖库的包文件:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /usr/local/src
wget http://nginx.org/download/nginx-1.14.2.tar.gz
wget http://nginx.org/download/nginx-1.10.3.tar.gz
wget https://www.zlib.net/fossils/zlib-1.2.8.tar.gz
wget https://openssl.org/source/openssl-1.0.2d.tar.gz
wget https://github.com/simplresty/ngx_devel_kit/archive/v0.3.0.tar.gz -O ngx_devel_kit.tar.gz
wget https://github.com/jemalloc/jemalloc/releases/download/4.5.0/jemalloc-4.5.0.tar.bz2
wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0.3.0.tar.gz -O nginx_upstream_check_module.tar.gz
wget https://github.com/openresty/lua-nginx-module/archive/v0.10.10.tar.gz -O lua-nginx-module.tar.gz
tar xf jemalloc-4.5.0.tar.bz2
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; jemalloc-4.5.0 &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
apt-get install -y  lua5.1-0-dev
sudo apt-get install libpcre3 libpcre3-dev &lt;span class=&#34;c1&#34;&gt;# support pcre&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;jemalloc&lt;/code&gt;的安装也可以直接使用&lt;code&gt;apt&lt;/code&gt;安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install -y libjemalloc-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果在编译的过程中出现一些下面类似的错误，可以通过安装开发者工具包解决这个问题:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;checking &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; xsltproc... &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
checking &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; gcc... no
checking &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; cc... no
checking &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; cl.exe... no

&lt;span class=&#34;c1&#34;&gt;# ubuntu上安装开发者工具包&lt;/span&gt;
sudo apt install build-essential -y
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;编译安装-nginx1180&#34;&gt;编译安装 Nginx1.18.0&lt;/h2&gt;
&lt;p&gt;首先我们准备一个 nginx 的运行用户&lt;code&gt;www&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;groupadd www &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; useradd www -g www
&lt;span class=&#34;c1&#34;&gt;# 开始编译nginx&lt;/span&gt;
./configure --prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/webserver/nginx18 --user&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;www --group&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;www --with-pcre --with-zlib&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/root/workspace/packages/nginx/zlib-1.2.8 --with-openssl&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/root/workspace/packages/nginx/openssl-1.0.2d --with-http_gzip_static_module --with-http_realip_module --with-http_stub_status_module --add-module&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/root/workspace/packages/nginx/ngx_devel_kit-0.3.0 --with-ld-opt&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-ljemalloc --with-stream --with-http_ssl_module --add-module&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/root/workspace/packages/nginx/nginx_upstream_check_module-0.3.0 &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;编译完成后，在启动 nginx&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/webserver/nginx18/sbin/nginx
&lt;span class=&#34;c1&#34;&gt;# 然后我们将nginx的work进程设置为2个，修改用户为www&lt;/span&gt;
root@master:/webserver/nginx18/sbin# ps -fe &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;grep nginx
root      &lt;span class=&#34;m&#34;&gt;50131&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 08:43 ?        00:00:00 nginx: master process ./nginx
www       &lt;span class=&#34;m&#34;&gt;58005&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;50131&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 08:54 ?        00:00:00 nginx: worker process
www       &lt;span class=&#34;m&#34;&gt;58006&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;50131&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 08:54 ?        00:00:00 nginx: worker process

root@master:/webserver/nginx18/sbin# cp nginx /usr/local/bin/nginx
root@master:/webserver/nginx18/sbin# nginx -t
root@master:/webserver/nginx18/sbin# nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后我们配置一个&lt;code&gt;web.devopsman.cn&lt;/code&gt;的域名到&lt;code&gt;192.168.99.128&lt;/code&gt;上，看一下服务运行和 DNS 解析后的效果:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~/workspace/packages/nginx/nginx-1.18.0/contrib# curl -I web.devopsman.cn
HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
Server: nginx/1.18.0
Date: Sat, &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 13:03:29 GMT
Content-Type: text/html
Content-Length: &lt;span class=&#34;m&#34;&gt;612&lt;/span&gt;
Last-Modified: Sat, &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 12:38:29 GMT
Connection: keep-alive
ETag: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5f09b2c5-264&amp;#34;&lt;/span&gt;
Accept-Ranges: bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;高亮-nginx-的配置&#34;&gt;高亮 Nginx 的配置&lt;/h2&gt;
&lt;p&gt;nginx 的源码包里面有配置 vim 编辑的 nginx 配置文件时内容格式高亮显示的配置文件，直接将其拷贝到&lt;code&gt;.vim&lt;/code&gt;目录下即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~# &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /root/workspace/packages/nginx/nginx-1.18.0/contrib/
root@master:~/workspace/packages/nginx/nginx-1.18.0/contrib# ls -al
total &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt;
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; www www &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 08:02 .
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; www www &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 08:21 ..
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; www www &lt;span class=&#34;m&#34;&gt;1272&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;21&lt;/span&gt; 10:09 geo2nginx.pl
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; www www  &lt;span class=&#34;m&#34;&gt;543&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;21&lt;/span&gt; 10:09 README
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; www www &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Jul &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 08:02 unicode2nginx
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; www www &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;21&lt;/span&gt; 10:09 vim
root@master:~/workspace/packages/nginx/nginx-1.18.0/contrib# cp -r vim/* ~/.vim/
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;拷贝进去之后，我们发现编辑 nginx 的配置文件变得高亮了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200711210137505.png&#34; alt=&#34;image-20200711210137505&#34; /&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>云原生生态圈</dc:creator>
        <media:content url="https://linuxermaster.github.ioimages/posts/harbor-syncdata.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Nginx</category>
            
          
            
              <category>编译</category>
            
          
            
              <category>web server</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>