<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>CloudNativeEcosystem</title>
    <link>https://linuxermaster.github.io/en/</link>
    <description>Recent content on CloudNativeEcosystem</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>marionxue@qq.com (Marionxue)</managingEditor>
    <webMaster>marionxue@qq.com (Marionxue)</webMaster>
    <copyright>[云原生生态圈](https://www.devopsman.cn) &amp;copy;2016-{year}, All Rights Reserved [自由转载-非商用-非衍生-保持署名](https://www.devopsman.cn)</copyright>
    <lastBuildDate>Tue, 07 Jul 2020 12:00:06 +0900</lastBuildDate>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    
        <atom:link href="https://linuxermaster.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Harbor2.0 安装部署实践(HTTPS)</title>
        <link>https://linuxermaster.github.io/en/posts/20200707-harbor2.0%E5%B8%A6https%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Tue, 07 Jul 2020 12:00:06 +0900</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        <atom:modified>Tue, 07 Jul 2020 12:00:06 +0900</atom:modified>
        <guid>https://linuxermaster.github.io/en/posts/20200707-harbor2.0%E5%B8%A6https%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5/</guid>
        <description>Harbor是一个开源的管理 Docker 镜像以及 helm 图表的项目，该项目包括了权限管理、LDAP 认证集成、日志事件审计、管理界面 portal、多 Harbor 实例之间数据同步的公布功能，</description>
        <content:encoded>&lt;p&gt;&lt;a href=&#34;https://goharbor.io/&#34; title=&#34;Harbor&#34;&gt;Harbor&lt;/a&gt;是一个开源的管理 Docker 镜像以及 helm 图表的项目，该项目包括了权限管理、LDAP 认证集成、日志事件审计、管理界面 portal、多 Harbor 实例之间数据同步的公布功能，同时今年 Harbor 也从 CNCF 中毕业了，提供了更合规、性能更好、操作体验更佳的 2.0 版本，帮助您在跨 kubernetes 和 Docker 等云原生计算平台持续高效的管理制品。&lt;/p&gt;
&lt;h4 id=&#34;harbor-环境需求&#34;&gt;Harbor 环境需求&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Software&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Version&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker engine&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;17.06.0-ce 及以上&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;安装参考: &lt;a href=&#34;https://docs.docker.com/engine/installation/&#34; title=&#34;Docker Engine documentation&#34;&gt;Docker Docs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker Compose&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.18.0 版本及以上即可&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;安装参考: &lt;a href=&#34;https://docs.docker.com/compose/install/&#34; title=&#34;Docker Compose documentation&#34;&gt;Docker-Compose Docs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Openssl&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;为避免安全漏洞，建议升级到最新&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;可以选择自签证书: &lt;a href=&#34;https://goharbor.io/docs/2.0.0/install-config/configure-https/&#34; title=&#34;Configure HTTPS Access to Harbor&#34;&gt;Config HTTPS&lt;/a&gt;也可以申请个人免费版证书&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;harbor-离线安装&#34;&gt;Harbor 离线安装&lt;/h4&gt;
&lt;p&gt;考虑到网络和测试的需求，我们通过迅雷在 GITHUB 上下载离线安装的 harbor 安装包，其中包含了 Harbor 所需要的基础镜像，离线安装时通过离线安装包内的脚本将导出的镜像文件通过&lt;code&gt;docker load -i&lt;/code&gt;导入到服务器内，然后通过编排软件&lt;code&gt;docker-compose&lt;/code&gt;运行，相当方便。使用到的基础镜像如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;goharbor/chartmuseum-photon          v2.0.0              4db8d6aa63e9        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         127MB
goharbor/redis-photon                v2.0.0              c89ea2e53cc0        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         72.2MB
goharbor/trivy-adapter-photon        v2.0.0              6122c52b7e48        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         103MB
goharbor/clair-adapter-photon        v2.0.0              dd2210cb7f53        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         62MB
goharbor/clair-photon        &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;        v2.0.0              f7c7fcc52278        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         171MB
goharbor/notary-server-photon        v2.0.0              983ac10ed8be        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         143MB
goharbor/notary-signer-photon        v2.0.0              bee1b6d75e0d        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         140MB
goharbor/harbor-registryctl          v2.0.0              c53c32d58d04        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         102MB
goharbor/registry-photon             v2.0.0              afdc1b7ada36        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         84.5MB
goharbor/nginx-photon                v2.0.0              17892f03e56c        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         43.6MB
goharbor/harbor-log                  v2.0.0              5f8ff08e795c        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         82MB
goharbor/harbor-jobservice           v2.0.0              c68a2495bf55        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         116MB
goharbor/harbor-core                 v2.0.0              3aa3af64baf8        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         138MB
goharbor/harbor-portal               v2.0.0              e0b1d3c894c4        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         52.4MB
goharbor/harbor-db                   v2.0.0              5c76f0296cec        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         154MB
goharbor/prepare                     v2.0.0              7266d49995ed        &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; weeks ago         158MB
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在安装之前，我们需要修改一下 Harbor 的配置文件，比如修改 harbor 使用的域名、HTTPS 证书的位置等,下面我们简单的说明:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;☸️  k8sdev🔥 default  ~/Downloads  🐳 👉 scp harbor-offline-installer-v2.0.0.tgz root@192.168.99.128:/root/
&lt;span class=&#34;c1&#34;&gt;# 在192.168.99.128上进行Harbor的安装配置&lt;/span&gt;
root@master:~# tar xf harbor-offline-installer-v2.0.0.tgz
root@master:~/harbor# mv harbor.yml.tmpl harbor.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们重新命名配置文件 harbor.yml 后，编辑该文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hostname: harbor.devopsman.cn &lt;span class=&#34;c1&#34;&gt;# 配置自己的harbor访问域名&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果你需要配置 HTTPS 来访问 harbor,那么需要申请证书或者自己生成的自签证书，这里我们直接在 DNSPOD 上申请一个免费的一年可用的证书&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200707133220228.png&#34; alt=&#34;image-20200707133220228&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实际上 https 的证书是配置给 harbor 的反向代理 nginx 的，我们一般访问 harbor 其实是访问 nginx 然后将请求转发给 harbor，在我们安装完成 harbor 之后，可以运行以下命令查看到 Nginx 相关的反向代理的配置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~/harbor# docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it nginx cat /etc/nginx/nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接下来，我们需要配置一下 HTTPS 可信证书，首先在 DNSPOD 上下载申请审批成功后的证书&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200707133835126.png&#34; alt=&#34;image-20200707133835126&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后解压，将解压后的 Nginx 目录下的两个文件重命名放在/data/cert/目录下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~/harbor/Nginx# ls -alh
total 32K
drwxr-xr-x   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; root root 4.0K Jul  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; .
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt; root root  20K Jul  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; 01:37 ..
-rw-r--r--   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root 3.7K Jul  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 1_harbor.devopsman.cn_bundle.crt
-rw-r--r--   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root 1.7K Jul  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; 2_harbor.devopsman.cn.key
&lt;span class=&#34;c1&#34;&gt;# 重命名之后放在/data/cert目录下，如果没有这个目录，需要提前创建&lt;/span&gt;
mkdir -pv /data/cert
root@master:~/harbor/Nginx# cp 1_harbor.devopsman.cn_bundle.crt /data/cert/harbor.devopsman.cn.crt
root@master:~/harbor/Nginx# cp 2_harbor.devopsman.cn.key /data/cert/harbor.devopsman.cn.key
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后在 harbor.yml 下配置证书的位置即可:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# https related config&lt;/span&gt;
https:
  &lt;span class=&#34;c1&#34;&gt;# https port for harbor, default is 443&lt;/span&gt;
  port: &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# The path of cert and key files for nginx&lt;/span&gt;
  certificate: /data/cert/harbor.devopsman.cn.crt
  private_key: /data/cert/harbor.devopsman.cn.key
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;配置完证书，使用 prepare 进行配置 nginx 的 https 证书&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /root/harbor &lt;span class=&#34;c1&#34;&gt;# harbor离线版解压后的文件目录&lt;/span&gt;
root@master:~/harbor# ./prepare
prepare base dir is &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; to /root/harbor
...
Generated configuration file: /compose_location/docker-compose.yml
Clean up the input dir
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;无果没有报错，然后我们就可以直接使用 docker-compose 运行 harbor 的容器了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~/harbor# docker-compose up -d
Creating network &lt;span class=&#34;s2&#34;&gt;&amp;#34;harbor_harbor&amp;#34;&lt;/span&gt; with the default driver
Creating harbor-log ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Creating harbor-portal ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Creating registry      ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Creating registryctl   ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Creating harbor-db     ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Creating redis         ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Creating harbor-core   ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Creating nginx             ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
Creating harbor-jobservice ... &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;安装检测&#34;&gt;安装检测&lt;/h2&gt;
&lt;p&gt;然后我们可以直接通过 docker login 测试一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~/harbor# docker login harbor.devopsman.cn
Username: admin
Password:                  &lt;span class=&#34;c1&#34;&gt;# 默认的密码在harbor.yml文件中，可以自行修改&lt;/span&gt;
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过浏览器查看是否能登录以及证书的有效期&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200707140232427.png&#34; alt=&#34;image-20200707140232427&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时我们可以通过推送一个测试的镜像，检查是够正常，我们先在浏览器中访问 harbor.devopsman.cn，然后找到推送命令，查看推送的格式，下面我们测试一下看看结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200707134847120.png&#34; alt=&#34;image-20200707134847120&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们选择一个 k8s 集群服务基础组件&lt;code&gt;kube-proxy&lt;/code&gt;的镜像，重新打个镜像的 tag，然后推送到我们的&lt;code&gt;devopsman&lt;/code&gt;仓库内:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~/harbor# docker tag k8s.gcr.io/kube-proxy:v1.18.0 harbor.devopsman.cn/devopsman/kube-proxy:v1.18.0
root@master:~/harbor# docker push harbor.devopsman.cn/devopsman/kube-proxy:v1.18.0
The push refers to repository &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;harbor.devopsman.cn/devopsman/kube-proxy&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
46b37415a80a: Pushed
0d8d54147a3a: Pushed
597151d24476: Pushed
ad9fb2411669: Pushed
2dc2f2423ad1: Pushed
682fbb19de80: Pushed
fc4976bd934b: Pushed
v1.18.0: digest: sha256:b832454a96a848ad5c51ad8a499ef2173b627ded2c225e3a6be5aad9446cb211 size: &lt;span class=&#34;m&#34;&gt;1786&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过查看，确实成功的完成了镜像的上传:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200707135312426.png&#34; alt=&#34;image-20200707135312426&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样就完成了 harbor 环境的基础搭建，接下来就好好的体验 Harbor 带来的新功能吧，通过图上看到 harbor2.0 目前支持&lt;code&gt;Dark&lt;/code&gt;主题，helm 推送等，开始动手吧，体验 Harbor 的新功能和特性，本章节就完成了 harbor 的基础探索。&lt;/p&gt;
</content:encoded>
        <dc:creator>云原生生态圈</dc:creator>
        <media:content url="https://linuxermaster.github.ioimages/posts/harbor-syncdata.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Harbor</category>
            
          
            
              <category>镜像仓库</category>
            
          
            
              <category>HTTPS</category>
            
          
            
              <category>高可用</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Harbor2.0 安装部署实践(HTTPS)</title>
        <link>https://linuxermaster.github.io/en/posts/20200708-harbor2.0-%E5%A4%9A%E5%AE%9E%E4%BE%8B%E4%B9%8B%E9%97%B4%E9%95%9C%E5%83%8F%E5%A4%8D%E5%88%B6/</link>
        <pubDate>Tue, 07 Jul 2020 12:00:06 +0900</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        <atom:modified>Tue, 07 Jul 2020 12:00:06 +0900</atom:modified>
        <guid>https://linuxermaster.github.io/en/posts/20200708-harbor2.0-%E5%A4%9A%E5%AE%9E%E4%BE%8B%E4%B9%8B%E9%97%B4%E9%95%9C%E5%83%8F%E5%A4%8D%E5%88%B6/</guid>
        <description>Replication Adapters harbor 提供了 harbor 与非 harbor 服务之间的镜像复制功能，通过复制镜像功能可以将 DockerHub 上的私有镜像给批量的同步到本地，也可以通过在多 Harbor 实例之间进行同步，达到镜像多副本，数据高可用</description>
        <content:encoded>&lt;h2 id=&#34;replication-adapters&#34;&gt;Replication Adapters&lt;/h2&gt;
&lt;p&gt;harbor 提供了 harbor 与非 harbor 服务之间的镜像复制功能，通过复制镜像功能可以将 DockerHub 上的私有镜像给批量的同步到本地，也可以通过在多 Harbor 实例之间进行同步，达到镜像多副本，数据高可用的作用。如下图所示，Harbor 支持与 harbor、query.io、Docker-hub 等知名的镜像仓库之间同步，还支持 helm-hub 等 helm 图表之间的同步：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200707214455744.png&#34; alt=&#34;image-20200707214455744&#34; style=&#34;zoom: 50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下面我们通过 harbor 与 harbor 实例之间同步，看一下 Harbor 的镜像复制功能&lt;/p&gt;
&lt;h2 id=&#34;harbor-to-harbor&#34;&gt;Harbor To Harbor&lt;/h2&gt;
&lt;p&gt;基于上节&lt;a href=&#34;https://mp.weixin.qq.com/s/ZVsx8sCpCtCE1Qj39NzH7w&#34;&gt;Harbor 开源镜像仓库企业级实践&lt;/a&gt;，安装了域名为&lt;code&gt;harbor.devopsman.cn&lt;/code&gt;的 harbor 实例，根据同样的方式安装一个新的实例，并且配置它的域名为&lt;code&gt;harbor.kubemaster.top&lt;/code&gt;，我们把上一节中推送到 harbor.devopsman.cn 的镜像 devopsman/kube-proxy:v1.18.0 镜像同步到 harbor.kubemaster.top，在准备好这些环境之后，我们开始配置镜像之间的同步。&lt;/p&gt;
&lt;p&gt;首先在 harbor.kubemaster.top 中新增一个仓库目标，如下图所示，配置好目前镜像仓库的地址、用户名和密码之后，点击测试保存&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200707220812143.png&#34; alt=&#34;image-20200707220812143&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后 ，在系统管理下面的复制管理处，新增加一个复制策略，如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200707221007564.png&#34; alt=&#34;image-20200707221007564&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在源镜像仓库处选择我们之前在仓库管理处配置好的 harbor 实例，然后配置源资源过滤信息，其中的匹配信息如下，其中(Y)表示合法，(N)表示不合法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Pattern&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;String(Match or not)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;library/*&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;library/hello-world&lt;/code&gt;(Y) &lt;code&gt;library/my/hello-world&lt;/code&gt;(N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;library/**&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;library/hello-world&lt;/code&gt;(Y) &lt;code&gt;library/my/hello-world&lt;/code&gt;(Y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;{library,goharbor}/**&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;library/hello-world&lt;/code&gt;(Y) &lt;code&gt;goharbor/harbor-core&lt;/code&gt;(Y) &lt;code&gt;google/hello-world&lt;/code&gt;(N)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;1.?&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;1.0&lt;/code&gt;(Y) &lt;code&gt;1.01&lt;/code&gt;(N)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;然后填写自定义的过滤器规则之后，保存。然后在复制管理功能处，找到并选择刚才新建的复制规则，点击复制：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200707221536601.png&#34; alt=&#34;image-20200707221536601&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样就手动的触发了复制，其状态为&lt;code&gt;InProgress&lt;/code&gt;，我们点击对应的任务 ID，就能看到更多的复制信息，比如成功状态信息，同步的日志信息等&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200707221736851.png&#34; alt=&#34;image-20200707221736851&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样目标私有镜像仓库中的镜像就被同步了过来，同时 harbor 也支持定时任务同步，其根据 cron 的语法规则实现私有镜像仓库之间的镜像的自动同步。&lt;/p&gt;
&lt;h2 id=&#34;harbor-高可用&#34;&gt;Harbor 高可用&lt;/h2&gt;
&lt;p&gt;如果想要保证 harbor 实例数据的高可用，可以通过复制管理的功能在多个 harbor 之间互相配置同步策略，可以基于&lt;code&gt;push mode&lt;/code&gt;实现任意一个实例上面推送了镜像，都会被自动的同步到其他的实例上去，结合 cron 的定时任务基本上就自实现了 harbor 的数据高可用，避免因单实例造成数据无法挽回。&lt;/p&gt;
&lt;h4 id=&#34;精彩文章回顾&#34;&gt;精彩文章回顾&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ZVsx8sCpCtCE1Qj39NzH7w&#34;&gt;Harbor 开源镜像仓库企业级实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/_eiiCG-jjIuc0JZKWLXd0A&#34;&gt;阿里云出品·Kubernetes 深入浅出实践 v1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Barv9VtraIAWrUkHZFVwpg&#34;&gt;微软出品·Kubernetes 最新学习指南 v3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/VSvsLAb-QEZ7_syDPItyLA&#34;&gt;火焰图：全局视野的 Linux 性能剖析 &lt;code&gt;1k+&lt;/code&gt;在读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/R5JI3vE995_vfxtYkbQYrA&#34;&gt;最流行的五款 Kubernetes 交互式可视化工具 &lt;code&gt;900+&lt;/code&gt;在读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/3JIPe9pIbxdN7tGmLtX5ng&#34;&gt;轻松爬取拉勾网岗位招聘信息 &lt;code&gt;600+&lt;/code&gt;在读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/eycZx7JtLGXy0mkZ1_V2nQ&#34;&gt;Yearning - 最 Popular 的 MYSQL 审计平台 &lt;code&gt;700+&lt;/code&gt;在读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/TZzsHM1YbUHot6BGRqSzlg&#34;&gt;Prometheus 监控系列-部署篇 &lt;code&gt;500+&lt;/code&gt;在读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>云原生生态圈</dc:creator>
        <media:content url="https://linuxermaster.github.ioimages/posts/harbor-syncdata.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Harbor</category>
            
          
            
              <category>镜像仓库</category>
            
          
            
              <category>HTTPS</category>
            
          
            
              <category>高可用</category>
            
          
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200530-ab%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0kubernetes-pod%E6%B0%B4%E5%B9%B3%E8%87%AA%E5%8A%A8%E4%BC%B8%E7%BC%A9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200530-ab%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0kubernetes-pod%E6%B0%B4%E5%B9%B3%E8%87%AA%E5%8A%A8%E4%BC%B8%E7%BC%A9/</guid>
        <description>Horizontal Pod Autoscaler 可以根据CPU利用率自动伸缩 replication controller、deployment 和 replica set 中的Pod数量（除了 CPU 利用率）也可以 基于其他应程序提供的度量指标custom</description>
        <content:encoded>&lt;p&gt;&lt;img src=&#34;images.assets/kuberneteshpa.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Horizontal Pod Autoscaler&lt;/code&gt; 可以根据CPU利用率自动伸缩 &lt;code&gt;replication controller&lt;/code&gt;、&lt;code&gt;deployment&lt;/code&gt; 和 &lt;code&gt;replica set&lt;/code&gt; 中的&lt;code&gt;Pod&lt;/code&gt;数量（除了 CPU 利用率）也可以 基于其他应程序提供的度量指标&lt;code&gt;custom metrics&lt;/code&gt;。 pod 自动缩放不适用于无法缩放的对象，比如 &lt;code&gt;DaemonSets&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pod 水平自动伸缩特性由 &lt;code&gt;Kubernetes API&lt;/code&gt; 资源和控制器实现。资源决定了控制器的行为。 控制器会周期性的获取平均 CPU 利用率，并与目标值相比较后来调整 &lt;code&gt;replication controller&lt;/code&gt; 或 &lt;code&gt;deployment&lt;/code&gt; 中的副本数量。&lt;/p&gt;
&lt;p&gt;通过实际的Demo开体验一下&lt;code&gt;HPA&lt;/code&gt;基于资源实现的水平自动伸缩,为了演示 &lt;code&gt;Horizontal Pod Autoscaler&lt;/code&gt;，我们将使用&lt;code&gt;tomcat&lt;/code&gt;镜像作为测试对象，以下为配置tomcat的&lt;code&gt;deployment&lt;/code&gt;的配置清单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;apps/v1&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Deployment&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dp-tomcat&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;learning&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;revisionHistoryLimit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dp-tomcat&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;app&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;In&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;dp-tomcat&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dp-tomcat&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nodeSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;kubernetes.io/hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dev-k8s&lt;span class=&#34;m&#34;&gt;-05.&lt;/span&gt;xsl.link&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;dp-tomcat&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;tomcat&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9.0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;limits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1024Mi&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;500m&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;web&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面的yaml说明一下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行了一个副本数为3的deployment&lt;/li&gt;
&lt;li&gt;暴露出一个名为nginxsvc的service&lt;/li&gt;
&lt;li&gt;指定了&lt;code&gt;revisionHistoryLimit&lt;/code&gt;表示保留历史版本的个数&lt;/li&gt;
&lt;li&gt;因为要通过资源负载模拟HPA功能的场景，必须依赖template中对pod做资源限制&lt;/li&gt;
&lt;li&gt;集群环境需要安装metrics-server,方便观察集群资源负载&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  00-template.resources.yaml git:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ✗ &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;☸ kubernetes-admin@kubernetes:default&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; k get pods -n learning        
NAME                               READY   STATUS    RESTARTS   AGE
abcontainer-58c67cfb87-g4j8q       1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          25d
dp-tomcat-5b4465b6bf-82llc         1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          125m
dp-tomcat-5b4465b6bf-zsttg         1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          126m
nginx-deployment-8558b4659-6dkmr   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          17s
nginx-deployment-8558b4659-v8fzf   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          17s
nginx-deployment-8558b4659-w5tlq   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          8m56s
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在，&lt;code&gt;dp-tomcat&lt;/code&gt;服务已经运行，我们将通过 定义一个HPA资源对象来创建 Horizontal Pod Autoscaler。 以下配置清单将创建一个&lt;code&gt;Horizontal Pod Autoscaler&lt;/code&gt;用于控制我们上一步骤中创建的deployment，使 Pod 的副本数量在维持在1到10之间。 大致来说，HPA 将通过增加或者减少 Pod 副本的数量（通过 Deployment ）以保持所有 Pod 的平均CPU利用率在50%以内&lt;/p&gt;
&lt;p&gt;定义一个HPA资源对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: dp-tomcat
  namespace: learning
spec:
  minReplicas: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
  maxReplicas: &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
  scaleTargetRef:
    kind: Deployment
    name: dp-tomcat
    apiVersion: apps/v1
  targetCPUUtilizationPercentage: &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接下来，我们通过部署一个含有&lt;code&gt;ab&lt;/code&gt;命令的&lt;code&gt;httpd&lt;/code&gt;镜像来模拟负载&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: abcontainer
  namespace: abcontainer
spec:
  selector:
    matchLabels:
      app: abcontainer
  template:
    metadata:
      labels:
        app: abcontainer
    spec:
      containers:
      - name: abcontainer
        image: httpd
        ports:
        - containerPort: &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在部署完成httpd之后，进入到abcontainer通过ab增加负载&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;k &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; abcontainer-58c67cfb87-g4j8q -n learning -it -- bash
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;ab&lt;/code&gt;命令进行压力测试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ab -c &lt;span class=&#34;m&#34;&gt;5000&lt;/span&gt; -n &lt;span class=&#34;m&#34;&gt;2000000&lt;/span&gt; http://tomcat-svc:8080/
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看HPA资源变化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;NAME        REFERENCE              TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
dp-tomcat   Deployment/dp-tomcat   0%/10%    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;          16m
NAME        REFERENCE              TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
dp-tomcat   Deployment/dp-tomcat   98%/10%   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;          18m
&lt;span class=&#34;c1&#34;&gt;# 中断ab测试&lt;/span&gt;
NAME        REFERENCE              TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
dp-tomcat   Deployment/dp-tomcat   36%/10%   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;         19m
&lt;span class=&#34;c1&#34;&gt;# pods的变化&lt;/span&gt;
NAME                           READY   STATUS              RESTARTS   AGE
abcontainer-58c67cfb87-g4j8q   1/1     Running             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          25d
dp-tomcat-96b7b9f6f-54v84      0/1     Pending             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
dp-tomcat-96b7b9f6f-55hsf      0/1     ContainerCreating   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
dp-tomcat-96b7b9f6f-btbzr      0/1     ContainerCreating   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
dp-tomcat-96b7b9f6f-dpppj      0/1     ContainerCreating   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13s
dp-tomcat-96b7b9f6f-k4jqq      1/1     Running             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          12m
dp-tomcat-96b7b9f6f-mxd4f      1/1     Running             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          28s
dp-tomcat-96b7b9f6f-tjpj6      1/1     Running             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          28s
dp-tomcat-96b7b9f6f-zztqm      1/1     Running             &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          28s
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;默认情况下,当&lt;code&gt;ab模拟完成之后&lt;/code&gt;，当流量开始下降，5分钟后pod的数量会慢慢恢复到replicas的值。&lt;/p&gt;
&lt;h4 id=&#34;更多精彩文章&#34;&gt;更多精彩文章&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Barv9VtraIAWrUkHZFVwpg&#34;&gt;微软·kubernetes学习指南 v3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/F8sK8LcFvkvNHqHgcBzyaQ&#34;&gt;Jenkins在kubernetes上的落地实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/sUOsRgVnqN-QBOMC-pkDQA&#34;&gt;OpenTracing和Jaeger在kubernetes的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/hlOBpQ6mfkiUBmRQzdUjvg&#34;&gt;kubernetes核心监控框架Metrics-server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200531-%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200531-%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
        <description>autojump autojump 是一款非常方便的命令行下的目录跳转工具，它能帮你快速从目录访问的历史记录中统计出各个目录的访问频次和权重，这样，就能方便的让你在各个目录中迅速跳转了。只要你</description>
        <content:encoded>&lt;h4 id=&#34;autojump&#34;&gt;autojump&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/autojump.svg&#34; alt=&#34;Github stars&#34; /&gt;&lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/wting/autojump?label=watch&amp;logoColor=red&amp;style=social&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;autojump&lt;/code&gt; 是一款非常方便的命令行下的目录跳转工具，它能帮你快速从目录访问的历史记录中统计出各个目录的访问频次和权重，这样，就能方便的让你在各个目录中迅速跳转了。只要你记得之前某个访问过的目录的大概名字，配合 autojump，就能快速的跳转过去，再也不用打一长串的 &lt;code&gt;cd&lt;/code&gt; 命令了。使用方式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/autojump.gif&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;安装&#34;&gt;安装&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install autojump
&lt;span class=&#34;c1&#34;&gt;# 大多数mac系统都会安装zsh,因此当安装配置好autojump之后，需要将以下代码写入到~/.zshrc&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; -s &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;brew --prefix&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/etc/autojump.sh &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; . &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;brew --prefix&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/etc/autojump.sh
&lt;span class=&#34;c1&#34;&gt;# 最后在source一遍&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;tig&#34;&gt;tig&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/jonas/tig?style=social&#34;&gt;&lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/jonas/tig?style=social&#34;&gt;&lt;/p&gt;
&lt;p&gt;Git 已经成为我们平时经常用到的版本控制管理工具。通常，我们用 &lt;code&gt;git log&lt;/code&gt; 命令来查看 git 提交的历史记录。如果你已经厌倦了 &lt;code&gt;git log&lt;/code&gt; 那种千篇一律的界面，那么 &lt;code&gt;tig&lt;/code&gt; 绝对是一个不可错过的命令行下查看 git 历史提交记录的工具&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/tig.gif&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tig&lt;/code&gt; 的界面看起来比起 &lt;code&gt;git log&lt;/code&gt; 要酷炫不少，而且使用起来也挺方便。此外，&lt;code&gt;tig&lt;/code&gt; 的默认按键绑定还跟 Vim 比较类似，真是 Vimer 的福音。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install tig
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;git-summary&#34;&gt;git summary&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/tj/git-extras?style=social&#34;&gt;&lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/tj/git-extras?style=social&#34;&gt;&lt;/p&gt;
&lt;p&gt;平时我们在多人合作开发一个项目的时候，想要大致了解一下每个人对这个项目提交的 commit 数量和大致的贡献度，那么 &lt;code&gt;git summary&lt;/code&gt; 这个命令绝对能满足你的要求&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/summary.gif&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git summary&lt;/code&gt; 通过对项目中每一个 commit 的统计，能大致计算出每个 contributor 的提交次数和贡献百分比。让你对这个项目的贡献度能一目了然。&lt;/p&gt;
&lt;p&gt;默认 git 是不会带有这个命令的，需要在 Mac OS 下额外安装一个扩展包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install git-extras
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;the_silver_searcher&#34;&gt;the_silver_searcher&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/ggreer/the_silver_searcher?style=social&#34;&gt;&lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/ggreer/the_silver_searcher?style=social&#34;&gt;&lt;/p&gt;
&lt;p&gt;UNIX/Linux 系统有不少好用的工具，用于文本搜索的 &lt;code&gt;grep&lt;/code&gt; 或许是其中最常用的工具之一。尽管平时称心如意，在面对数百万行的代码库时，&lt;code&gt;grep&lt;/code&gt; 的用户体验实在堪忧。还好，我们有 the silver searcher （即 &lt;code&gt;ag&lt;/code&gt;）这样迅捷的替代品&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200531233956746.png&#34; alt=&#34;image-20200531233956746&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在文本中搜索指定的字符串,显示包含字符串的行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ag &lt;span class=&#34;s2&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; ./tagret.file
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示含有指定字符串的文件名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ag -l &lt;span class=&#34;s1&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; .
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tmux&#34;&gt;tmux&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/tmux/tmux?style=social&#34;&gt;&lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/tmux/tmux?style=social&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们在远程执行命令的时候，经常性的会因为网络异常&lt;code&gt;打嗝&lt;/code&gt;造成回话断开，命令执行失败，此时你就需要一个 Tmux，它是一个终端复用器（terminal multiplexer)。这样即使你远程连接服务器的笔记本断网了，也不会终端你在服务器上执行的命令；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/tao-tmux-screenshot.png&#34; alt=&#34;_images/tao-tmux-screenshot.png&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用&lt;/li&gt;
&lt;li&gt;它可以让新窗口&amp;quot;接入&amp;quot;已经存在的会话&lt;/li&gt;
&lt;li&gt;它允许每个会话有多个连接窗口，因此可以多人实时共享会话。&lt;/li&gt;
&lt;li&gt;它还支持窗口任意的垂直和水平拆分。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;jq&#34;&gt;jq&lt;/h4&gt;
&lt;p&gt;json 文件处理以及格式化显示，支持高亮，可以替换 python -m json.tool&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200531235315498.png&#34; alt=&#34;image-20200531235315498&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;httpstat&#34;&gt;httpstat&lt;/h4&gt;
&lt;p&gt;HTTP 响应的可视化命令行工具,请求含有&lt;code&gt;http/https&lt;/code&gt;前缀的 url,支持所有&lt;code&gt;curl&lt;/code&gt;支持的除了&lt;code&gt;-w&lt;/code&gt;,&lt;code&gt;-D&lt;/code&gt;,&lt;code&gt;-o&lt;/code&gt;,&lt;code&gt;-S&lt;/code&gt;,&lt;code&gt;-s&lt;/code&gt;之外的所有选项。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/screenshot.png&#34; alt=&#34;screenshot&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;thefuck&#34;&gt;thefuck&lt;/h4&gt;
&lt;p&gt;命令行打错了以后，打一个&lt;code&gt;fuck&lt;/code&gt;就会自动纠正。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/example.gif&#34; alt=&#34;gif with examples&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;shellcheckhttpsgithubcomkoalamanshellcheck&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;shellcheck&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ShellCheck，用于Shell脚本的静态分析工具，在网页上检查你的脚本：https://www.shellcheck.net/ ,shellcheck具体会检查一些什么问题呢，以下给出一个不完整的问题检查列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引号问题&lt;/li&gt;
&lt;li&gt;条件判断 ShellCheck 可以识别大多数不正确的条件判断语句&lt;/li&gt;
&lt;li&gt;常见的对命令的错误使用&lt;/li&gt;
&lt;li&gt;ShellCheck 识别很多初学者的语法错误&lt;/li&gt;
&lt;li&gt;ShellCheck 可以提出一些风格改进建议&lt;/li&gt;
&lt;li&gt;ShellCheck 可以识别一些数据和拼写错误&lt;/li&gt;
&lt;li&gt;ShellCheck可以做出一些增强脚本鲁棒性的建议&lt;/li&gt;
&lt;li&gt;ShellCheck 警告你使用了 shebang 不支持的特性.&lt;/li&gt;
&lt;li&gt;ShellCheck 可以识别到一些其他问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200601190404241.png&#34; alt=&#34;image-20200601190404241&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;glances&#34;&gt;glances&lt;/h3&gt;
&lt;p&gt;top/htop`的替代方案，官网地址:https://nicolargo.github.io/glances/&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/screenshot-wide.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200604-mkdocs%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%9F%A5%E8%AF%86%E5%BA%93/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200604-mkdocs%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E7%9F%A5%E8%AF%86%E5%BA%93/</guid>
        <description>了解过Traefik,nginx-ingress的同学都知道他们的官方文档都是基于mkdocs和material主题制作而成，你觉得这种文档库怎么样？有没有心动</description>
        <content:encoded>&lt;p&gt;了解过&lt;code&gt;Traefik&lt;/code&gt;,&lt;code&gt;nginx-ingress&lt;/code&gt;的同学都知道他们的官方文档都是基于&lt;code&gt;mkdocs&lt;/code&gt;和&lt;code&gt;material&lt;/code&gt;主题制作而成，你觉得这种文档库怎么样？有没有心动把自己的文档也整成那样的？，下面我们直接动手干起来吧。&lt;/p&gt;
&lt;p&gt;配置pip国内的下载源&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;☸️  devcluster🔥 kube-ops  ~  🐳 👉 cat ./.pip/pip.conf
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;global&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
index-url &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; https://pypi.tuna.tsinghua.edu.cn/simple
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安装&lt;code&gt;mkdocs&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;☸️  devcluster🔥 kube-ops  ~  🐳 👉 pip3 install mkdocs
Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
Requirement already satisfied: mkdocs in /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1.1.2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
...
WARNING: You are using pip version 19.2.3, however version 20.1.1 is available.
You should consider upgrading via the &lt;span class=&#34;s1&#34;&gt;&amp;#39;pip install --upgrade pip&amp;#39;&lt;/span&gt; command.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;创建并运行一个新的文档库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;☸️  devcluster🔥 kube-ops  ~  🐳 👉 mkdocs new cloudnativecosystem
☸️  devcluster🔥 kube-ops  ~  🐳 👉 &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; cloudnativecosystem
☸️  devcluster🔥 kube-ops  ~/cloudnativecosystem  🐳 👉 ls
docs       mkdocs.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;创建一个新的GIT仓库&lt;code&gt;https://github.com/linuxermaster/cloudnativecosystem_mkdocs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;配置通过SSH无密访问代码仓库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh-keygen -t rsa -C &lt;span class=&#34;s2&#34;&gt;&amp;#34;email@qq.com&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后将公钥拷贝到GITHUB的&lt;code&gt;SSH-KEY&lt;/code&gt;中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200604231743718.png&#34; alt=&#34;image-20200604231743718&#34; /&gt;&lt;/p&gt;
&lt;p&gt;测试本地是否可以远程连接&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ssh -T git@github.com&lt;/span&gt;
Hi linuxermaster! You&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后需要在&lt;code&gt;cloudnativecosystem&lt;/code&gt;目录内初始化&lt;code&gt;.git&lt;/code&gt;仓库，然后添加远程仓库地址&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; cloudnativecosystem
git init
git remote add origin https://github.com/linuxermaster/cloudnativecosystem_mkdocs.git
mkdocs build --clean &lt;span class=&#34;c1&#34;&gt;# 创建编译后的静态页面以及样式文件&lt;/span&gt;
mkdocs gh-deploy --clean  &lt;span class=&#34;c1&#34;&gt;# push到gh-deploy分支下&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images.assets/image-20200604232252901.png&#34; alt=&#34;image-20200604232252901&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时，即可通过&lt;code&gt;https://linuxermaster.github.io/cloudnativecosystem_mkdocs/&lt;/code&gt;访问&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;httpstat https://linuxermaster.github.io/cloudnativecosystem_mkdocs/
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images.assets/image-20200604232353340.png&#34; alt=&#34;image-20200604232353340&#34; /&gt;&lt;/p&gt;
&lt;p&gt;现在开始优化mkdocs以及配置主题样式了，这部分工作都在&lt;code&gt;mkdocs.yml&lt;/code&gt;中完成&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;site_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;云原生生态圈&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nav&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;主页&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;index.md&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;关于&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;about.md&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;自动化&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;devops.md&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;material&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;repo_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;//github.com/linuxermaster/cloudnativecosystem_mkdocs.git&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;repo_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Opening on Github&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;site_description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;这是一个mkdocs的demo测试知识库网站&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;site_author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Marionxue&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;copyright&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1994 - 2020&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中theme指定的是你的主题，这个主题就是我们常见到的&lt;code&gt;traefik&lt;/code&gt;,&lt;code&gt;nginx-ingress&lt;/code&gt;等在使用的官方文档的主题，如果使用它，你可能还需要额外的安装一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip3 install mkdocs-material
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安装之后，执行&lt;code&gt;mkdocs gh-deploy --clean&lt;/code&gt;即可访问网站的主题:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200604232632281.png&#34; alt=&#34;image-20200604232632281&#34; /&gt;&lt;/p&gt;
&lt;p&gt;每次手动部署都是比较麻烦的，于是我们利用永久免费的travis来帮助解决这个问题:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;python&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Set the build language to Python&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3.6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Set the version of Python to use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Set the branch to build from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- pip&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;install&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mkdocs&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mkdocs-material&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pymdown-extensions&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pygments&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Install the required dependencies&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Skip script (Don&amp;#39;t use this if one already exists)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;before_deploy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- mkdocs&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;build&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--verbose&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--clean&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--strict&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Build a local version of the docs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Deploy documentation to Github in the gh_pages branch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;provider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;pages&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;skip_cleanup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;github_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;$GITHUB_API_KEY&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;local_dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;site&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;master&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后我们使用GITHUB的账号登录travis, 地址是:https://travis-ci.org，在登录进去之后，我们选择合适的启用CICD&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200604235112405.png&#34; alt=&#34;image-20200604235112405&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后点击setting进入仓库的配置界面，设置以下三个环境变量&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200604235222213.png&#34; alt=&#34;image-20200604235222213&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中,&lt;code&gt;GITHUB_API_KEY&lt;/code&gt;是从gitub上获取的Access Token,剩下的两个是用户名和密码。完成之后，我们就可以手动的触发以下构建:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200604235350325.png&#34; alt=&#34;image-20200604235350325&#34; /&gt;&lt;/p&gt;
&lt;p&gt;紧接着，我们为了方便我们知道构建是否完成，我们在README.md文件上添加了一个构建的状态展示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200604235534995.png&#34; alt=&#34;image-20200604235534995&#34; /&gt;&lt;/p&gt;
&lt;p&gt;复制RESULT信息到readme.md中，即可显示每次构建的状态信息:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200604235619006.png&#34; alt=&#34;image-20200604235619006&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看一下我们的构建历史&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200605000335750.png&#34; alt=&#34;image-20200605000335750&#34; /&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200605-consul%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%A7%92%E8%89%B2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200605-consul%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%A7%92%E8%89%B2/</guid>
        <description>在微服务体系的建设中，单体服务的拆分使微服务变得越来越多，服务之间的依赖关系也越来越复杂，需要解决配置集中管理、配置变更后的自动刷新或者重载甚至需要实现动态配置</description>
        <content:encoded>&lt;p&gt;在微服务体系的建设中，单体服务的拆分使微服务变得越来越多，服务之间的依赖关系也越来越复杂，需要解决配置集中管理、配置变更后的自动刷新或者重载甚至需要实现动态配置。动态配置是什么样的，我想接触过Traefik和Gitlab Runner的同学应该都会有感触，虽然实现的原理有些不一样，但是都达到一种无须认为过多干预即实现服务的重载生效。&lt;/p&gt;
&lt;p&gt;我们本文会通过&lt;code&gt;consul&lt;/code&gt;、&lt;code&gt;consul-template&lt;/code&gt;、&lt;code&gt;registrator&lt;/code&gt;和&lt;code&gt;Docker&lt;/code&gt;等模拟一个使用consul作为服务发现，动态渲染nginx的配置文件实现upstream服务健康状态检查后自动的注册与下线。&lt;/p&gt;
&lt;p&gt;首选介绍一下这个工具的作用：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;consul&lt;/code&gt;：是一款服务配置和发现工具，分布式的、高可用的以及极具扩展性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;consul-template&lt;/code&gt;:是一个从&lt;code&gt;consul&lt;/code&gt;中获取&lt;code&gt;k/v&lt;/code&gt;信息，然后将值&lt;code&gt;v&lt;/code&gt;填充到基于&lt;code&gt;go template&lt;/code&gt;语法的文件中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;registrator&lt;/code&gt;：是一个与&lt;code&gt;docker.sock&lt;/code&gt;通信，将&lt;code&gt;running&lt;/code&gt;着的&lt;code&gt;Docker container&lt;/code&gt;自动的注册到consul的一个服务注册工具&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200605222849414.png&#34; alt=&#34;image-20200605222849414&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下面通过一个实际的例子来探索&lt;code&gt;consul&lt;/code&gt;与&lt;code&gt;consul-template&lt;/code&gt;结合解决那些微服务模式下动态发现、自动刷新的问题。&lt;/p&gt;
&lt;p&gt;首先通过docker运行一个consul节点，用于记录registrator发现的容器信息:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d --name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;consul --restart&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;always &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;CONSUL_LOCAL_CONFIG={&amp;#34;skip_leave_on_interrupt&amp;#34;: true, &amp;#34;ui&amp;#34;: true,  &amp;#34;dns_config&amp;#34;: { &amp;#34;allow_stale&amp;#34;: false }}&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -p 8300:8300 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -p 8301:8301 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -p 8301:8301/udp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -p 8302:8302/udp &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -p 8302:8302 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -p 8400:8400 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -p 8500:8500 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -p 8600:8600 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -h node1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             consul agent -server -bind&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;192.168.99.129 -bootstrap-expect&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -node&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;node1 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -client 0.0.0.0 -ui
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200606-go%E8%AF%AD%E8%A8%80%E9%80%9A%E8%BF%87jenkins%E5%AE%9E%E7%8E%B0cicd/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200606-go%E8%AF%AD%E8%A8%80%E9%80%9A%E8%BF%87jenkins%E5%AE%9E%E7%8E%B0cicd/</guid>
        <description>分享一个使用Go编写的极简单的Demo案例，为什么要分享呢？涉及到几个小知识点 Go mod的使用 GO中如何导入包 通过Go简单的演示分层构建 演示如何编写一个自动化构建</description>
        <content:encoded>&lt;p&gt;分享一个使用&lt;code&gt;Go&lt;/code&gt;编写的极简单的Demo案例，为什么要分享呢？涉及到几个小知识点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Go mod&lt;/code&gt;的使用&lt;/li&gt;
&lt;li&gt;GO中如何导入包&lt;/li&gt;
&lt;li&gt;通过Go简单的演示分层构建&lt;/li&gt;
&lt;li&gt;演示如何编写一个自动化构建的脚本式Jenkinfile.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-go-mod如何使用&#34;&gt;1. &lt;code&gt;Go mod&lt;/code&gt;如何使用&lt;/h2&gt;
&lt;p&gt;我们准备一个apis模块，在该模块中实现一个打印字符串的函数&lt;code&gt;Says(str string)&lt;/code&gt;:所以&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;apis&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;EOF&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;apis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;apis&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Says&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello,%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后我们初始化一下&lt;code&gt;go mod&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go env -w &lt;span class=&#34;nv&#34;&gt;GO111MODULE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;
go mod init code.kubemaster.top/DevOpsTeam/apis
&lt;span class=&#34;c1&#34;&gt;# 此时查看一下mod文件的内容为:&lt;/span&gt;
cat go.mod
module code.kubemaster.top/DevOpsTeam/apis

go 1.14
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后工作区内生成一个&lt;code&gt;go.mod&lt;/code&gt;文件&lt;br /&gt;
&lt;img src=&#34;images.assets/5ebd5b54c2a9a83be59d705f-1857459.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
然后我们初始化提交到代码仓库中即可,代码仓库的地址为&lt;code&gt;https://code.kubemaster.top/DevOpsTeam/apis.git&lt;/code&gt;，&lt;/p&gt;
&lt;h2 id=&#34;2-如何导入包&#34;&gt;2. 如何导入包&lt;/h2&gt;
&lt;p&gt;接下来应该编写Demo了，Demo依赖&lt;code&gt;apis&lt;/code&gt;模块实现功能，Demo的文件名为&lt;code&gt;main.go&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;code.kubemaster.top/DevOpsTeam/apis&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;apis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Says&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;云原生·生态圈\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里有个注意的地方:&lt;br /&gt;
当程序调用的模块与模块的文件名不一致的时候，需要通过&lt;code&gt;别名&lt;/code&gt;引入，否则直接&lt;code&gt;import&lt;/code&gt;即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;实际上模块名为apis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;但是此处文件名是api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;所以需要通过别名解决&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m_api&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;code.kubemaster.top/DevOpsTeam/api&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当需要运行和构建&lt;code&gt;main.go&lt;/code&gt;的时候:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get -insecure code.kubemaster.top/DevOpsTeam/apis
go run main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;到这里基本上就明确&lt;code&gt;go mod&lt;/code&gt;的基础使用了,然后我们将其提交代码到代码仓库：&lt;code&gt;https://code.kubemaster.top/DevOpsTeam/goci.git&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;3-应该怎样构建go程序&#34;&gt;3. 应该怎样构建Go程序&lt;/h2&gt;
&lt;p&gt;使用Docker构建镜像，首先要准备一个&lt;code&gt;Dockerfile&lt;/code&gt;,仔细思考一下，Go编写的程序会直接编译成指定编译架构的二进制文件，所以我们可以通过分层构建的方式首先在Go的环境中进行构建，再把构建后的二进制文件拷贝到微小镜像内，以便减小镜像的体积,下面写了一个Dockerfile的案例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;FROM&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;golang&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.14&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;as&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;builder&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;WORKDIR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/go/src/code.kubemaster.top/DevOpsTeam/demos/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;ARG&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ARCH=&lt;span class=&#34;s2&#34;&gt;&amp;#34;amd64&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;ARG&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;OS=&lt;span class=&#34;s2&#34;&gt;&amp;#34;linux&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;COPY&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main.go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;RUN&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;get&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-insecure&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;code.kubemaster.top/DevOpsTeam/apis&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;\&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;CGO_ENABLED=&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GOOS=linux&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;build&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-a&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-installsuffix&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;cgo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-o&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;main&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;FROM&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;alpine&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;latest&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;WORKDIR&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/root/&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;COPY&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;--from=builder&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;/go/src/code.kubemaster.top/DevOpsTeam/demos/&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;CMD&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./main&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在镜像编译后，镜像的体积为&lt;code&gt;7.69M&lt;/code&gt;,在&lt;code&gt;Dockerfile&lt;/code&gt;准备好之后，我们把Dockerfile提交到&lt;code&gt;goci&lt;/code&gt;的代码仓库内。下面我们就可以配置一下Jenkinsfile，以便于我们持续构建了&lt;/p&gt;
&lt;h2 id=&#34;4-通过jenkinsfile实现持续构建&#34;&gt;4. 通过Jenkinsfile实现持续构建&lt;/h2&gt;
&lt;p&gt;这里简单的通过脚本式&lt;code&gt;pipeline&lt;/code&gt;实现服务的持续构建，很简单，但也是一个完整的基础框架:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;pipeline&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;agent&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;any&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;environment&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;registry&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;registry-vpc.cn-beijing.aliyuncs.com/kubemaster/gocodecitestdemo&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;registryCredential&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;854bfe2f-7923-48a5-9156-7be54cc38a88&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;stages&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;stage(&lt;span class=&#34;s1&#34;&gt;&amp;#39;Cloning Git&amp;#39;&lt;/span&gt;)&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;steps&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;git&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://code.kubemaster.top/DevOpsTeam/goci.git&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;stage(&lt;span class=&#34;s1&#34;&gt;&amp;#39;Building image&amp;#39;&lt;/span&gt;)&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;steps{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;script&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;dockerImage&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;=&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;docker.build&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;registry&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;+&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:$BUILD_NUMBER&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;stage(&lt;span class=&#34;s1&#34;&gt;&amp;#39;Testing Image&amp;#39;&lt;/span&gt;){&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;steps{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;sh&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;docker run --rm $registry:$BUILD_NUMBER&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;stage(&lt;span class=&#34;s1&#34;&gt;&amp;#39;Deploy Image&amp;#39;&lt;/span&gt;)&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;steps{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;script&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;docker.withRegistry(&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://registry-vpc.cn-beijing.aliyuncs.com&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;registryCredential&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;)&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;dockerImage.push()&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;stage(&lt;span class=&#34;s1&#34;&gt;&amp;#39;Remove Unused docker image&amp;#39;&lt;/span&gt;)&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;steps{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;sh&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;docker rmi $registry:$BUILD_NUMBER&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在完成&lt;code&gt;Jenkinsfile&lt;/code&gt;的准备工作后，依旧提交到&lt;code&gt;goci&lt;/code&gt;代码仓库内，然后我们在jenkins上配置即可:&lt;br /&gt;
首先准备&lt;code&gt;Jenkins job&lt;/code&gt;配置的&lt;code&gt;xml&lt;/code&gt;配置文件&lt;code&gt;goci.xml&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#39;1.1&amp;#39; encoding=&amp;#39;UTF-8&amp;#39;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;flow-definition&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;plugin=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;workflow-job@2.36&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;actions&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;plugin=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;pipeline-model-definition@1.5.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;plugin=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;pipeline-model-definition@1.5.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;jobProperties/&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;triggers/&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;parameters/&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;options/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/actions&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;keepDependencies&amp;gt;&lt;/span&gt;false&lt;span class=&#34;nt&#34;&gt;&amp;lt;/keepDependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;plugin=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gitlab-plugin@1.5.13&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;gitLabConnection&amp;gt;&amp;lt;/gitLabConnection&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;org.jenkinsci.plugins.gitlablogo.GitlabLogoProperty&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;plugin=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gitlab-logo@1.0.5&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;repositoryName&amp;gt;&amp;lt;/repositoryName&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/org.jenkinsci.plugins.gitlablogo.GitlabLogoProperty&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;com.synopsys.arc.jenkinsci.plugins.jobrestrictions.jobs.JobRestrictionProperty&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;plugin=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;job-restrictions@0.8&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;definition&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;plugin=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;workflow-cps@2.78&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;scm&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hudson.plugins.git.GitSCM&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;plugin=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;git@4.1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;configVersion&amp;gt;&lt;/span&gt;2&lt;span class=&#34;nt&#34;&gt;&amp;lt;/configVersion&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;userRemoteConfigs&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;hudson.plugins.git.UserRemoteConfig&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://code.kubemaster.top/DevOpsTeam/goci.git&lt;span class=&#34;nt&#34;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;credentialsId&amp;gt;&lt;/span&gt;73a21ee2-2cdb-4658-8f99-309a3b77f2d4&lt;span class=&#34;nt&#34;&gt;&amp;lt;/credentialsId&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/hudson.plugins.git.UserRemoteConfig&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/userRemoteConfigs&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;branches&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;hudson.plugins.git.BranchSpec&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;*/master&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/hudson.plugins.git.BranchSpec&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/branches&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;doGenerateSubmoduleConfigurations&amp;gt;&lt;/span&gt;false&lt;span class=&#34;nt&#34;&gt;&amp;lt;/doGenerateSubmoduleConfigurations&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;submoduleCfg&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;extensions/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/scm&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;scriptPath&amp;gt;&lt;/span&gt;Jenkinsfile&lt;span class=&#34;nt&#34;&gt;&amp;lt;/scriptPath&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;lightweight&amp;gt;&lt;/span&gt;true&lt;span class=&#34;nt&#34;&gt;&amp;lt;/lightweight&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/definition&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;triggers/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;disabled&amp;gt;&lt;/span&gt;false&lt;span class=&#34;nt&#34;&gt;&amp;lt;/disabled&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后，我们就可以创建构建job和执行触发构建了:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 获取jenkins-crumb&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;crumb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl -u &lt;span class=&#34;s2&#34;&gt;&amp;#34;admin:admin&amp;#34;&lt;/span&gt; -s &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://jenkins.kubemaster.top/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,&amp;#34;:&amp;#34;,//crumb)&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 创建job&lt;/span&gt;
curl -X POST &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://admin:admin@jenkins.kubemaster.top/createItem?name=goci&amp;#34;&lt;/span&gt; --data-binary &lt;span class=&#34;s2&#34;&gt;&amp;#34;@goci.xml&amp;#34;&lt;/span&gt; -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: text/xml&amp;#34;&lt;/span&gt; -H &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;jenkins_crumb&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 执行job&lt;/span&gt;
curl -X POST -u admin:admin -H &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;jenkins_crumb&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; http://jenkins.kubemaster.top/job/goci/build
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;看到这里，基本上就结束了，基本上在实践中完成了Demo的编写，容器化构建，持续构建相关环节，下面我们看一下构建的结果：&lt;br /&gt;
构建的视图:&lt;br /&gt;
&lt;img src=&#34;images.assets/bVbHdmT.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;完成的构建的日志:&lt;br /&gt;
&lt;img src=&#34;images.assets/bVbHdmU.png&#34; alt=&#34;img&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;images.assets/5e6cce51e83c3a1e3a41b83f.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200607-p%E7%AB%99%E9%A3%8E%E6%A0%BClogo%E7%94%9F%E6%88%90%E5%99%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200607-p%E7%AB%99%E9%A3%8E%E6%A0%BClogo%E7%94%9F%E6%88%90%E5%99%A8/</guid>
        <description>​ 最近发现很多的微信文章上出现了一种logo设计，跟P站的logo设计风格一样让人印象深刻，黑底白字，配上一小撮橙色，给人极强的冲击力。后来查了一下在Githu</description>
        <content:encoded>&lt;p&gt;&lt;img src=&#34;images.assets/image-20200607164436481.png&#34; alt=&#34;image-20200607164436481&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​      最近发现很多的微信文章上出现了一种logo设计，跟P站的logo设计风格一样让人印象深刻，黑底白字，配上一小撮橙色，给人极强的冲击力。后来查了一下在Github上发现有一个有意思的程序员弄的一个在线创意Logo生成器，利用&lt;code&gt;Logoly Pro&lt;/code&gt;可以生成类似&lt;code&gt;YouTobe&lt;/code&gt;、&lt;code&gt;P站&lt;/code&gt;等Logo风格的标志。分享给大家，于是就有了今天这篇文章。&lt;/p&gt;
&lt;h3 id=&#34;logoly的由来&#34;&gt;logoly的由来&lt;/h3&gt;
&lt;p&gt;这个风格的制作是由&lt;code&gt;tencent&lt;/code&gt;的一位大牛开发制作的，叫做&lt;code&gt;白宦成&lt;/code&gt;,这里是他对于这个网页版工具的自述：&lt;/p&gt;
&lt;p&gt;我自己平时经常要做一些 Side Project ，在做 Side Project 的时候，就涉及到了要做 Logo ，但是作为一个没有设计感的程序员，在做 Logo 时总是会做出一些很丑的 Logo ，于是痛定思痛，想想有没有什么有用的工具可以帮助我生成好看的 Logo。对于我来说，也不需要太过复杂，能够满足我自己的要求就行。&lt;/p&gt;
&lt;p&gt;P站Logo风格图片素材制作的官方网站：&lt;a href=&#34;https://logoly.pro/&#34; title=&#34;logoly网站&#34;&gt;https://logoly.pro/&lt;/a&gt; 代码仓库里面是这样描述的，”一个简单的在线徽标生成器，适合想要轻松设计徽标的人们&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200607171024698.png&#34; alt=&#34;image-20200607171024698&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;logoly的功能和特色&#34;&gt;logoly的功能和特色&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;生成P站风格的logo&lt;/li&gt;
&lt;li&gt;支持导出&lt;code&gt;png&lt;/code&gt;格式的图片&lt;/li&gt;
&lt;li&gt;支持修改&lt;code&gt;前缀/后缀/背景&lt;/code&gt;的颜色&lt;/li&gt;
&lt;li&gt;支持设置字体的大小&lt;/li&gt;
&lt;li&gt;支持自定义字体&lt;code&gt;TODO&lt;/code&gt;，可能是为了防止侵权，避免使用一些未开源的字体&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;logoly的使用方法&#34;&gt;logoly的使用方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打开logoly网站: &lt;a href=&#34;https://logoly.pro/s&#34;&gt;https://logoly.pro/s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在文本框内输入需要的文本&lt;/li&gt;
&lt;li&gt;修改你需要的颜色和字体的大小&lt;/li&gt;
&lt;li&gt;点击导出即可下载&lt;code&gt;png&lt;/code&gt;格式的图片&lt;/li&gt;
&lt;li&gt;还是不太懂得，可以看一下哔哩哔哩&lt;code&gt;B站&lt;/code&gt;上别人发的文章，或者就放弃使用吧！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200607164549053.png&#34; alt=&#34;image-20200607164549053&#34; /&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200608-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A8%E6%96%871/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200608-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A8%E6%96%871/</guid>
        <description>前言 学习如逆水行舟，不进则退；只有坚持不断的学习，才能保持进步。今天给小伙伴们推荐几个用心书写的公众号，感兴趣的可以关注一下。 开源Linux 公众号简介：欢迎来到</description>
        <content:encoded>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;学习如逆水行舟，不进则退；只有坚持不断的学习，才能保持进步。今天给小伙伴们推荐几个用心书写的公众号，感兴趣的可以关注一下。&lt;/p&gt;
&lt;h2 id=&#34;开源linux&#34;&gt;开源Linux&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdm.yp14.cn/img/%E5%BC%80%E6%BA%90Linux.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公众号简介：欢迎来到『开源Linux』，这里是 Linuxer 的聚集地。专注分享Linux/Unix相关内容，包括Linux运维、Linux系统开发、网络编程、以及虚拟化和云计算等技术干货。后台回复『学习』，送您一套学习Linux的系列书籍，期待与您相遇。&lt;/p&gt;
&lt;h2 id=&#34;yp小站&#34;&gt;YP小站&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdm.yp14.cn/img/YP%E5%B0%8F%E7%AB%99.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公众号简介：欢迎您关注【YP小站】，学习互联网最流行的技术，做个专业的技术人；分享美食、美景、人文生活、自动化运维、DevOps、Service Mesh、Kubernetes和Cloud Native等；欢迎您关注我，公众号后台点击加群，加入技术交流群，也期待您的投稿与合作~&lt;/p&gt;
&lt;h2 id=&#34;云原生生态圈&#34;&gt;云原生生态圈&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdm.yp14.cn/img/%E4%BA%91%E5%8E%9F%E7%94%9F%E7%94%9F%E6%80%81%E5%9C%88.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公众号简介: 欢迎您关注【云原生生态圈】，学习和了解当前最流行、最常用的集群服务解决方案。我们专注于分享，主要包括: Linux相关服务以及集群架构、DevOps实践、kubernetes、CloudNative、微服务、Python、Go等方面的知识。期待您的关注，在公众号菜单栏您可以加入《DevOps &amp;amp; CloudNative交流群》，同时也欢迎您的投稿与合作~&lt;/p&gt;
&lt;h2 id=&#34;运维开发故事&#34;&gt;运维开发故事&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdm.yp14.cn/img/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%95%85%E4%BA%8B.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公众号简介：用于输出干货的公众号，会写一些学习过程中的笔记以及遇到的坑，内容包括但不限于Linux运维，devops工具链，k8s容器化技术，监控，日志收集，网络安全，Python或GO开发，欢迎您的关注，一起学习，一起成长。&lt;/p&gt;
&lt;h2 id=&#34;linux点滴运维实践&#34;&gt;Linux点滴运维实践&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdm.yp14.cn/img/Linux%E7%82%B9%E6%BB%B4%E8%BF%90%E7%BB%B4%E5%AE%9E%E8%B7%B5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公众号简介：专注于Linux系统、网络、存储、安全、云计算、DevOps、大数据、集群、基础组件等等，本着极度求真的原则、追求卓越的目标、脚踏实地的态度来总结所学所用。&lt;/p&gt;
&lt;h2 id=&#34;sy技术小站&#34;&gt;SY技术小站&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://cdm.yp14.cn/img/SY%E6%8A%80%E6%9C%AF%E5%B0%8F%E7%AB%99.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公众号简介：欢迎您关注【SY技术小站】，小站专注于技术分享，包括：DevOps，k8s，Service Mesh，自动化运维，python等；欢迎大家关注公众号，关注后也可加群技术交流~&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200610-go-jwt-token/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200610-go-jwt-token/</guid>
        <description>1 2  openssl genrsa -out app.rsa 1024 openssl rsa -in app.rsa -pubout &amp;gt; ./app.rsa.pub   </description>
        <content:encoded>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;openssl genrsa -out app.rsa &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;
openssl rsa -in app.rsa -pubout &amp;gt; ./app.rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200610-%E6%9E%B6%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%AE%A4-%E4%BA%91%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200610-%E6%9E%B6%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%AE%A4-%E4%BA%91%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
        <description>安装 Apache HTTP 服务 Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器</description>
        <content:encoded>&lt;h2 id=&#34;安装-apache-http-服务&#34;&gt;安装 Apache HTTP 服务&lt;/h2&gt;
&lt;p&gt;Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行如下命令，安装Apache服务及其扩展包。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;yum -y install httpd httpd-manual mod_ssl mod_perl mod_auth_mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回类似如下图结果则表示安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/TB1l7DUHpY7gK0jSZKzXXaikpXa-1050-137.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;执行如下命令，启动Apache服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;systemctl start httpd.service
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;测试Apache服务是否安装并启动成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Apache默认监听80端口，所以只需在浏览器访问ECS分配的IP地址http://&amp;lt;ECS公网地址&amp;gt;，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/TB1HmVpaepyVu4jSZFhXXbBpVXa-1920-937.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装-mysql-数据库&#34;&gt;安装 MySQL 数据库&lt;/h2&gt;
&lt;p&gt;由于使用wordpress搭建云上博客，需要使用MySQL数据库存储数据，所以这一步我们安装一下MySQL。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行如下命令，下载并安装MySQL官方的&lt;code&gt;Yum Repository&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm
yum -y install mysql57-community-release-el7-10.noarch.rpm
yum -y install mysql-community-server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;images.assets/TB1BRnVHxz1gK0jSZSgXXavwpXa-958-431.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;执行如下命令，启动 MySQL 数据库。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;systemctl start mysqld.service
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;执行如下命令，查看MySQL运行状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;systemctl status mysqld.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;images.assets/TB1gszWHuT2gK0jSZFvXXXnFXXa-945-229.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;执行如下命令，查看MySQL初始密码。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;grep &amp;quot;password&amp;quot; /var/log/mysqld.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;images.assets/TB1FmNpaepyVu4jSZFhXXbBpVXa-834-36.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;执行如下命令，登录数据库。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;mysql -uroot -p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;images.assets/TB1Wz6UHvb2gK0jSZK9XXaEgFXa-675-226.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;执行如下命令，修改MySQL默认密码。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt; 新密码设置的时候如果设置的过于简单会报错，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;NewPassWord1.&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;执行如下命令，创建wordpress库。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;create database wordpress; 
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;执行如下命令，创建wordpress库。 执行如下命令，查看是否创建成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;show databases;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;输入&lt;code&gt;exit&lt;/code&gt;退出数据库。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/TB14Bj0HxD1gK0jSZFKXXcJrVXa-836-664.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装-php-语言环境&#34;&gt;安装 PHP 语言环境&lt;/h2&gt;
&lt;p&gt;WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。也可以把WordPress当作一个内容管理系统（CMS）来使用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行如下命令，安装PHP环境。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum -y install php php-mysql gd php-gd gd-devel php-xml php-common php-mbstring php-ldap php-pear php-xmlrpc php-imap
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;执行如下命令创建PHP测试页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;#34;&lt;/span&gt; &amp;gt; /var/www/html/phpinfo.php
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;执行如下命令，重启Apache服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl restart httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;打开浏览器，访问&lt;code&gt;http://&amp;lt;ECS公网地址&amp;gt;/phpinfo.php&lt;/code&gt;，显示如下页面表示PHP语言环境安装成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/TB1oCVpaepyVu4jSZFhXXbBpVXa-601-840-20200609121710332.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;wordpress安装和配置&#34;&gt;Wordpress安装和配置&lt;/h2&gt;
&lt;p&gt;本小节将在已搭建好的LAMP 环境中，安装部署 WordPress&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行如下命令，安装wordpress。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum -y install wordpress
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;显示如下信息表示安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/TB1b02VHEz1gK0jSZLeXXb9kVXa-1042-156.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;修改WordPress配置文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1）执行如下命令，修改wp-config.php指向路径为绝对路径。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 进入/usr/share/wordpress目录。&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /usr/share/wordpress
&lt;span class=&#34;c1&#34;&gt;# 修改路径。&lt;/span&gt;
ln -snf /etc/wordpress/wp-config.php wp-config.php
&lt;span class=&#34;c1&#34;&gt;# 查看修改后的目录结构。&lt;/span&gt;
ll
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2）执行如下命令，移动wordpress到Apache根目录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在Apache的根目录/var/www/html下，创建一个wp-blog文件夹。&lt;/span&gt;
mkdir /var/www/html/wp-blog
mv * /var/www/html/wp-blog/
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3）执行以下命令修改wp-config.php配置文件。&lt;/p&gt;
&lt;p&gt;在执行命令前，请先替换以下三个参数值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;database_name_here为之前步骤中创建的数据库名称，本示例为wordpress。&lt;/li&gt;
&lt;li&gt;username_here为数据库的用户名，本示例为root。&lt;/li&gt;
&lt;li&gt;password_here为数据库的登录密码，本示例为NewPassWord1.。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/database_name_here/wordpress/&amp;#39;&lt;/span&gt; /var/www/html/wp-blog/wp-config.php
sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/username_here/root/&amp;#39;&lt;/span&gt; /var/www/html/wp-blog/wp-config.php
sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/password_here/NewPassWord1./&amp;#39;&lt;/span&gt; /var/www/html/wp-blog/wp-config.php
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;4）执行以下命令，查看配置文件信息是否修改成功。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat -n /var/www/html/wp-blog/wp-config.php
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images.assets/TB1j02VHEz1gK0jSZLeXXb9kVXa-913-631.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;执行如下命令，重启Apache服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl restart httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images.assets/wordpress-installing-1-1140x570.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200611-github-actions%E4%B8%80/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200611-github-actions%E4%B8%80/</guid>
        <description>Github是什么，大家应该都是比较清楚的，但是这个Actions是什么呢？在了解其他的持续集成和发布的软件的同学都知道，在Jenkins上我们可以通过Jenk</description>
        <content:encoded>&lt;p&gt;Github是什么，大家应该都是比较清楚的，但是这个Actions是什么呢？在了解其他的持续集成和发布的软件的同学都知道，在&lt;code&gt;Jenkins&lt;/code&gt;上我们可以通过&lt;code&gt;Jenkins share library&lt;/code&gt;将一些通用的&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200611-jenkins%E5%85%B1%E4%BA%AB%E5%BA%93jenkins-share-library%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200611-jenkins%E5%85%B1%E4%BA%AB%E5%BA%93jenkins-share-library%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>使用场景 Jenkins Shared Libraries是一种在Jenkinsfile语法的基础上扩展Jenkins Pipeline的技术。通过编写Jenkins Shared Libraries可以</description>
        <content:encoded>&lt;h3 id=&#34;使用场景&#34;&gt;使用场景&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/pipeline/shared-libraries/&#34; title=&#34;Jenkins share library&#34;&gt;Jenkins Shared Libraries&lt;/a&gt;是一种在&lt;code&gt;Jenkinsfile语法&lt;/code&gt;的基础上扩展&lt;code&gt;Jenkins Pipeline&lt;/code&gt;的技术。通过编写&lt;code&gt;Jenkins Shared Libraries&lt;/code&gt;可以实现将自定义的&lt;code&gt;Steps&lt;/code&gt;当成模板，对流水线逻辑中重复或&lt;code&gt;可以通用&lt;/code&gt;的部分进行抽象和封装，在使用的时候将其&lt;code&gt;import&lt;/code&gt;进去即可。这样可以大大的减少了我们项目jenkinsfile的复杂度。在实际的工作使用中很常用，看看Jenkins共享库能帮我们解决的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务团队自动化的逐渐推进，使用&lt;code&gt;pipeline&lt;/code&gt;的&lt;code&gt;job&lt;/code&gt;越来越多，大多情况下每个项目都需要编写&lt;code&gt;从别人那里拷贝&lt;/code&gt;一份完整的Jenkinsfile，很麻烦，如果你的公司正在转变到&lt;code&gt;微服务&lt;/code&gt;,那么你肯定会感受到这种不变&lt;code&gt;(这是微服务的锅)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不熟悉jenkins pipeline语法的人，随意更改就会造成各种错误，给运维造成负担。&lt;/li&gt;
&lt;li&gt;每个项目下有一个Jenkinsfile就会造成修改Jenkinsfile也会触发一次不必要的服务构建。&lt;/li&gt;
&lt;li&gt;修改一些&lt;code&gt;全局工具&lt;/code&gt;的时候需要告知使用到该工具的所有人去修改&lt;code&gt;jenkinsfile&lt;/code&gt;脚本。&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在实践中每个服务团队/Devops团队都应该通过维护一个或多个Shared Libraries项目再结合第三方的Jenkins插件定制团队自己的Jenkins流水线。只要认真维护share libraries这一个远程仓库就能解决以上的所有问题。在使用过程中，我们将share library存在一个&lt;code&gt;git&lt;/code&gt;版本控制仓库里面，在需要的时候，将它引入到当前模快即可。&lt;/p&gt;
&lt;p&gt;在实际使用的时候，我们可以通过Github查看是否有别人写好的一些共享库，适合的我们可以直接给那过来，修改成适合自己的模板库。Jenkins的灵活取决于使用&lt;code&gt;groovy&lt;/code&gt;语法，而Jenkins的模板库实际上就是通过&lt;code&gt;groovy&lt;/code&gt;语言编写的一些基础的&lt;code&gt;类&lt;/code&gt;文件，存在固定格式的目录结构中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;root&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
+- src                     &lt;span class=&#34;c1&#34;&gt;# Groovy源文件&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   +- org
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;       +- foo
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;           +- Bar.groovy  &lt;span class=&#34;c1&#34;&gt;# org.foo.bar的类文件&lt;/span&gt;
+- vars
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   +- foo.groovy          &lt;span class=&#34;c1&#34;&gt;# foo是一个全局变量文件，是可以从Pipeline中全局访问的&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   +- foo.txt             &lt;span class=&#34;c1&#34;&gt;# 全局变量foo的说明帮助文件&lt;/span&gt;
+- resources               &lt;span class=&#34;c1&#34;&gt;# resource files (external libraries only)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   +- org
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;       +- foo
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;           +- bar.json    &lt;span class=&#34;c1&#34;&gt;# static helper data for org.foo.Bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在共享库的目录结构中需要注意的是&lt;code&gt;src&lt;/code&gt;和&lt;code&gt;vars&lt;/code&gt;目录，其中&lt;code&gt;src&lt;/code&gt;里面存放的是可以在pipeline中调用的&lt;code&gt;groovy&lt;/code&gt;类方法，在执行的时候默认会将其添加到java的&lt;code&gt;class_Path&lt;/code&gt;环境变量指定的路径下，&lt;code&gt;vars&lt;/code&gt;主要是一些脚本文件，在pipeline运行的时候被引用。想要灵活的使用Jenkins share library，可能你需要掌握groovy的基础语法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200613-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E7%9A%84%E7%BB%88%E7%AB%AF%E8%BF%99%E4%B9%88%E7%BE%8E%E4%B8%BD/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200613-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E7%9A%84%E7%BB%88%E7%AB%AF%E8%BF%99%E4%B9%88%E7%BE%8E%E4%B8%BD/</guid>
        <description>最近有很多朋友看了我的文章之后，问我你终端是怎么设置的，为什么如此炫酷，这这这&amp;hellip;让我怎么说，难道我的文章不干吗？还是特干看不下去了？好吧，今天趁着</description>
        <content:encoded>&lt;p&gt;最近有很多朋友看了我的文章之后，问我你终端是怎么设置的，为什么如此&lt;code&gt;炫酷&lt;/code&gt;，这这这&amp;hellip;让我怎么说，难道我的文章不干吗？还是特干看不下去了？好吧，今天趁着周末给大家分享一下，如何设置一个你认为很高大上的终端，对于常用终端的发烧友来说无疑是一篇值得收藏的好文章，哈哈&lt;/p&gt;
&lt;p&gt;想要配置这么高大上的终端？你需要安装一个叫做&lt;code&gt;Iterm&lt;/code&gt;的远程连接工具，官方说是&lt;a href=&#34;https://www.iterm2.com/&#34;&gt;macOS Terminal Replacement&lt;/a&gt;，对的，你的电脑必须是Macos系统才可以，接下来我们一步一步的教你如何配置一个令你心仪的iterm，首先我们需要掌握一下基础的东西，然后在自定义一些喜欢的东西。&lt;/p&gt;
&lt;h4 id=&#34;前期准备&#34;&gt;前期准备&lt;/h4&gt;
&lt;h5 id=&#34;安装iterm2&#34;&gt;安装Iterm2&lt;/h5&gt;
&lt;p&gt;在&lt;a href=&#34;https://www.iterm2.com/&#34; title=&#34;iterm2官网&#34;&gt;官网&lt;/a&gt;下载好iterm2的二进制文件，然后直接托放到Macos系统的&lt;code&gt;Application&lt;/code&gt;的文件夹内，然后你就可以在启动台``launch&lt;code&gt;里面找到&lt;/code&gt;Iterm&lt;code&gt;了。安装完成之后，打开软件，&lt;/code&gt;以下的操作均在iterm2上操作`。&lt;/p&gt;
&lt;h5 id=&#34;配置oh-my-zsh&#34;&gt;配置&lt;code&gt;oh-my-zsh&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;现在我们就需要配置一个&lt;code&gt;神助&lt;/code&gt;工具&lt;code&gt;oh-my-zsh&lt;/code&gt;来让你的Iterm2起飞，最开始的时候，你的iterm是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200613130224096.png&#34; alt=&#34;image-20200613130224096&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下面，我们修改默认的&lt;code&gt;bash&lt;/code&gt;为&lt;code&gt;zsh&lt;/code&gt;，这里要注意的是，后期需要做一些&lt;code&gt;命令别名&lt;/code&gt;,&lt;code&gt;环境变量&lt;/code&gt;的时候，就不再是以前的&lt;code&gt;bashrc&lt;/code&gt;等了，应是&lt;code&gt;~/.zshrc&lt;/code&gt;或者&lt;code&gt;/etc/zshrc&lt;/code&gt;啦。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install zsh &lt;span class=&#34;c1&#34;&gt;# 安装zsh&lt;/span&gt;
chsh -s /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果你想要修改回来&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;chsh -s /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;修改之后，我们通过&lt;code&gt;wget&lt;/code&gt;或者&lt;code&gt;curl&lt;/code&gt;的方式下载&lt;code&gt;oh-my-zsh&lt;/code&gt;，以下安装方式选择任意一种即可:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;curl方式&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;wget方式&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sh -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行完之后，就如下所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200613130723249.png&#34; alt=&#34;image-20200613130723249&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实际上，就是通过curl或者wget的方式将&lt;code&gt;oh-my-zsh&lt;/code&gt;的代码仓库克隆到你的家目录下&lt;code&gt;/Users/marionxue/.oh-my-zsh&lt;/code&gt;下&lt;/p&gt;
&lt;h5 id=&#34;提供字体支持&#34;&gt;提供字体支持&lt;/h5&gt;
&lt;p&gt;接下来我们需要安装一些字体，这些字体提供了某些oh-my-zsh主题的特殊字符的支持，在美化配置上是必不可少的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/powerline/fonts.git --depth&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# clone&lt;/span&gt;
git clone https://github.com/powerline/fonts.git --depth&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# install&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; fonts
./install.sh
&lt;span class=&#34;c1&#34;&gt;# clean-up a bit&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
rm -rf fonts
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安装好之后，选择一款Powerline字体了：iterm2 -&amp;gt; Preferences -&amp;gt; Profiles -&amp;gt; Text -&amp;gt; Font -&amp;gt; Change Font（我用的是&lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34; title=&#34;nerd-fonts&#34;&gt;nerd-fonts&lt;/a&gt;因为该字体支持非 &lt;code&gt;ASCII&lt;/code&gt; 码字体，如下图所示）,当你的终端在配置主题之后，出现了乱码，那么你的字体一定是没有选对，这里需要使用powerline系列的字体，这是需要注意的地方。如果你需要安装nerd-fonts,直接使用&lt;code&gt;brew&lt;/code&gt;即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew tap caskroom/fonts
brew cask install font-hack-nerd-font
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images.assets/image-20200613145411438.png&#34; alt=&#34;image-20200613145411438&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;美化iterm2&#34;&gt;美化iterm2&lt;/h5&gt;
&lt;p&gt;一些特别吸引眼球的美化设置都是通过在主题的基础上自定义修改实现的，默认的oh-my-zsh使用的主题是&lt;code&gt;ZSH_THEME=&amp;quot;robbyrussell&amp;quot;&lt;/code&gt;，个人并不好看，下面我们自己选择一个合适的主题，我们可以在&lt;code&gt;/Users/marionxue/.oh-my-zsh/themes&lt;/code&gt;下面查看默认提供的主题。而配置文件就是我们之前提及到的&lt;code&gt;~/.zshrc&lt;/code&gt;文件，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200613132704679.png&#34; alt=&#34;image-20200613132704679&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们打开该文件找到&lt;code&gt;ZSH_THEME=&amp;quot;robbyrussell&amp;quot;&lt;/code&gt;，然后修改&lt;code&gt;robbyrussell&lt;/code&gt;为你喜欢的主题即可，我这里使用的是&lt;code&gt;ZSH_THEME=&amp;quot;agnoster&amp;quot;&lt;/code&gt;不过我也推荐这个主题。记得每次修改&lt;code&gt;~/.zshrc&lt;/code&gt;文件之后，需要&lt;code&gt;source ~/.zshrc&lt;/code&gt;让配置文件生效，我们看一下效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png&#34; alt=&#34;agnoster&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是看起来比较单调，不是那么的高大上啊，于是有些人在网上肯定发现过以下这种样式，看起来相对比较完美，研究一下下面这种图的做法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/833995626.jpg&#34; alt=&#34;3.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;仔细观察，&lt;code&gt;命令提示符&lt;/code&gt;左侧显示的是&lt;code&gt;git&lt;/code&gt;的分支，后侧显示的&lt;code&gt;执行结果状态&lt;/code&gt;、执行命令的&lt;code&gt;数量&lt;/code&gt;以及&lt;code&gt;时间&lt;/code&gt;，这是一个比较流行的第三方 &lt;a href=&#34;https://github.com/bhilburn/powerlevel9k&#34; title=&#34;PowerLevel9k&#34;&gt;PowerLevel9k&lt;/a&gt; 开源主题，我们将其下载到&lt;code&gt;~/.oh-my-zsh/custom/themes&lt;/code&gt;下，详细的配置设置参考github上的文档:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/.oh-my-zsh/custom/themes
https://github.com/bhilburn/powerlevel9k.git
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;修改配置文件中的主题设置为:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ZSH_THEME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;powerlevel9k/powerlevel9k&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后配置&lt;code&gt;git&lt;/code&gt;,&lt;code&gt;history&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;，我们在&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;POWERLEVEL9K_LEFT_PROMPT_ELEMENTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt;context dir vcs&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt;status &lt;span class=&#34;nb&#34;&gt;history&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样就完成了上图的配置。当然你可以设置一些带有icon的模式比如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;POWERLEVEL9K_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;nerdfont-complete&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/format,png.jpeg&#34; alt=&#34;让 PowerLevel9K 主题显示图标字符 —— From AigeStudio&#34; /&gt;&lt;/p&gt;
&lt;p&gt;你也可以自已定义一些背景颜色，你可以通过执行一下命令获取配色&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;spectrum_bls &lt;span class=&#34;c1&#34;&gt;# 显示前配色&lt;/span&gt;
spectrum_ls &lt;span class=&#34;c1&#34;&gt;# 显示后配色&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images.assets/image-20200613144120084.png&#34; alt=&#34;image-20200613144120084&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;美化进阶&#34;&gt;美化进阶&lt;/h4&gt;
&lt;p&gt;这里就是美化终端的基本操作，下面我们看一下如何在原有的基础上配置一下自己喜欢的icon和插件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200613140442286.png&#34; alt=&#34;image-20200613140442286&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;红色框&#34;&gt;红色框&lt;/h5&gt;
&lt;p&gt;红色框是iterm的资源状态栏，你可以在iterm2中使用快捷键&lt;code&gt;command+,&lt;/code&gt;或者菜单栏打开首选项，进行设置，后面就不在赘述如何带开了，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200613141322608.png&#34; alt=&#34;image-20200613141322608&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;configure status bar&lt;/code&gt;将需要的托放在下面既可&lt;/p&gt;
&lt;h5 id=&#34;青色的&#34;&gt;青色的🐳&lt;/h5&gt;
&lt;p&gt;青色的🐳是一个emoji.可以利用&lt;code&gt;touchbar&lt;/code&gt;填充上去，可以写文字&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200613141519848.png&#34; alt=&#34;image-20200613141519848&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;黄色的目录&#34;&gt;黄色的目录&lt;/h5&gt;
&lt;p&gt;这里是安装的一些高效易用的插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/paulirish/git-open&#34; title=&#34;git-open&#34;&gt;git-open&lt;/a&gt;: 一个快捷工具，当你&lt;code&gt;cd&lt;/code&gt;到一个版本化的代码仓库目录下，执行&lt;code&gt;git-open&lt;/code&gt;会自动打开浏览器并跳转到该代码仓库地址&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zsh-users/zsh-autosuggestions&#34; title=&#34;zsh-autosuggestions&#34;&gt;zsh-autosuggestions&lt;/a&gt;:这是一个自动提示之前执行过的命令历史&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zsh-users/zsh-syntax-highlighting&#34; title=&#34;zsh-syntax-highlighting&#34;&gt;zsh-syntax-highlighting&lt;/a&gt;:这是一个zsh语法高亮的插件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些插件安装配置简单，只需要&lt;code&gt;clone&lt;/code&gt;对应的代码仓库到&lt;code&gt;/Users/marionxue/.oh-my-zsh/custom/plugins&lt;/code&gt;下，然后在&lt;code&gt;.zshrc&lt;/code&gt;配置文件下的&lt;code&gt;plugins&lt;/code&gt;处配置上即可，注意我这里使用的是&lt;code&gt;agnoster&lt;/code&gt;主题。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/.oh-my-zsh/custom/plugins
git clone https://github.com/paulirish/git-open
git clone https://github.com/zsh-users/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting

vim ~/.zshrc
&lt;span class=&#34;nv&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt;
   git
   zsh-syntax-highlighting
   zsh-autosuggestions
   git-open
&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最后是配置生效&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;蓝色框内的配置&#34;&gt;蓝色框内的配置&lt;/h5&gt;
&lt;p&gt;这里是通过&lt;code&gt;agnoster&lt;/code&gt;主题加上一些自己修改的主题实现的。然后结合&lt;code&gt;~/.zshrc&lt;/code&gt;配置命令行提示符的显示，你可以在&lt;a href=&#34;https://apps.timwhitlock.info/emoji/tables/unicode&#34; title=&#34;emoji网站&#34;&gt;emoji网站1&lt;/a&gt;，&lt;a href=&#34;https://www.iemoji.com/view/emoji/1768/symbols/wheel-of-dharma&#34; title=&#34;emoji网站2&#34;&gt;emoji网站2&lt;/a&gt;上找到对应的&lt;strong&gt;Bytes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200613142755511.png&#34; alt=&#34;image-20200613142755511&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中的&lt;code&gt;devcluster&lt;/code&gt;和&lt;code&gt;kube-ops&lt;/code&gt;是我的k8s集群的集群名以及对应的命名空间，这里是利用&lt;code&gt;kubectx&lt;/code&gt;、&lt;code&gt;kube-ps1&lt;/code&gt;实现的，具体的你可以参考，下面是我的&lt;code&gt;部分&lt;/code&gt;配置文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ZSH_THEME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;agnoster&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;DISABLE_AUTO_UPDATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;DISABLE_UPDATE_PROMPT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt;
   git
   zsh-syntax-highlighting
   zsh-autosuggestions
   kubectl
   kube-ps1
   git-open
&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;KUBE_PS1_SYMBOL_ENABLE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;KUBE_PS1_PREFIX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\u2638\uFE0F  &amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;KUBE_PS1_SUFFIX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;KUBE_PS1_DIVIDER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\xf0\x9f\x94\xa5 &amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;PS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;$(kube_ps1)&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PS1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;好了，到这里就结束了，希望你能有所收获~&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200614-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A8%E6%96%872/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200614-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A8%E6%96%872/</guid>
        <description>学习如逆水行舟，不进则退；只有坚持不断的学习，才能保持进步。今天给大家推荐几个优质的公众号，感兴趣的可以关注一下哈。 DevOps和k8s全栈技术 推荐理由: 专注于</description>
        <content:encoded>&lt;p&gt;学习如逆水行舟，不进则退；只有坚持不断的学习，才能保持进步。今天给大家推荐几个优质的公众号，感兴趣的可以关注一下哈。&lt;/p&gt;
&lt;h2 id=&#34;devops和k8s全栈技术&#34;&gt;DevOps和k8s全栈技术&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/640.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;推荐理由: 专注于技术分享，包括：DevOps，kubernetes，微服务，SpringCloud，istio，自动化，python，go，linux等云计算知识。&lt;/p&gt;
&lt;p&gt;欢迎大家关注公众号，关注后可进群交流，获取免费视频，让我们共同努力，共同进步，共同成长~&lt;/p&gt;
&lt;h2 id=&#34;武培轩&#34;&gt;武培轩&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/640.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个就不用多说了，坚持分享原创后端技术干货的公众号「武培轩」，包括Java、Spring Boot、分布式、微服务、ES、MQ、源码解析、数据库、设计模式、面经等。扫码回复【送书】还可以参与送书活动。当然也有必不可少的优质资源，回复【资料】都拿走吧！期待你的加入，共同成长。&lt;/p&gt;
&lt;h2 id=&#34;mall商城开源平台&#34;&gt;mall商城开源平台&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/640-20200613180419588.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公众号简介：mallplus商城包括前台商城系统及后台管理系统，小程序 ，wechat 和类似 taro微信商城，pc商城，基于SpringBoot+MyBatis实现。[ 微信 + 支付宝 + 百度 + 头条 ] 小程序 + APP + 公众号 +PC + H5 等模块。&lt;/p&gt;
&lt;h2 id=&#34;云原生生态圈&#34;&gt;云原生生态圈&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/640-20200613180419606.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公众号简介: 欢迎您关注【云原生生态圈】，学习和了解当前最流行、最常用的集群服务解决方案。我们专注于分享，主要包括: Linux相关服务以及集群架构、DevOps实践、kubernetes、CloudNative、微服务、Python、Go等方面的知识。期待您的关注，在公众号菜单栏您可以加入《DevOps &amp;amp; CloudNative交流群》，同时也欢迎您的投稿与合作~&lt;/p&gt;
&lt;h2 id=&#34;运维开发故事&#34;&gt;运维开发故事&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/640-20200613180419575.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;公众号简介：用于输出干货的公众号，会写一些学习过程中的笔记以及遇到的坑，内容包括但不限于Linux运维，devops工具链，k8s容器化技术，监控，日志收集，网络安全，Python或GO开发，欢迎您的关注，一起学习，一起成长。&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200615-lazydocker-%E4%B8%93%E4%B8%BA%E6%87%92%E4%BA%BA%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200615-lazydocker-%E4%B8%93%E4%B8%BA%E6%87%92%E4%BA%BA%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%B7%A5%E5%85%B7/</guid>
        <description>Lazydocker的使用背景 平时的工作管理中会使用到各种各样的命令行工具，有些人是比较厌烦的去学习各种命令以及选项，比如Docker的各种命令和选项其实都让人</description>
        <content:encoded>&lt;h4 id=&#34;lazydockerhttpsgithubcomjesseduffieldlazydocker的使用背景&#34;&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker&#34;&gt;Lazydocker&lt;/a&gt;的使用背景&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/59972109-8e9c8480-95cc-11e9-8350-38f7f86ba76d.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;平时的工作管理中会使用到各种各样的命令行工具，有些人是比较厌烦的去学习各种命令以及选项，比如&lt;code&gt;Docker&lt;/code&gt;的各种命令和选项其实都让人很头大，于是就有人做出来一款名为&lt;code&gt;Lazydocker&lt;/code&gt;的专为&lt;code&gt;懒人&lt;/code&gt;设计的&lt;code&gt;Docker&lt;/code&gt;和&lt;code&gt;docker-compose&lt;/code&gt;终端管理工具，该工具使用&lt;code&gt;Go&lt;/code&gt;语言开发基于&lt;code&gt;gocui&lt;/code&gt;实现。&lt;/p&gt;
&lt;p&gt;如果你发现自己的项目出了问题，或者是服务down掉了，那么&lt;code&gt;Lazydocker&lt;/code&gt;就可以立刻给你提供帮助。&lt;code&gt;Lazydocker&lt;/code&gt;可以帮助我们&lt;code&gt;DEBUG&lt;/code&gt;自己的项目或者服务，并且在出现问题时立刻重启所有组件，然后给我们提供详细的日志流。其中，日志流还会进行细项分类，并允许我们了解特定服务中发生的所有事情。是&lt;a href=&#34;https://github.com/jesseduffield/lazydocker&#34; title=&#34;Github仓库&#34;&gt;github&lt;/a&gt;上一个比较🔥的开源工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200614233443621.png&#34; alt=&#34;image-20200614233443621&#34; /&gt;&lt;/p&gt;
&lt;p&gt;除此之外，想要记住所有的Docker命令其实是很麻烦的，而且跨多个终端窗口跟踪容器也几乎是无法做到的。但是在&lt;code&gt;Lazydocker&lt;/code&gt;的帮助下，我们就可以在一个终端窗口中查看到所有你所需要的信息，而且常用的命令仅需按下一个键即可实现。毫无疑问，&lt;code&gt;Lazydocker&lt;/code&gt;绝对是懒人们的福音!我们先来看一下效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/demo3.gif&#34; alt=&#34;Gif&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;lazydocker的功能&#34;&gt;Lazydocker的功能&lt;/h4&gt;
&lt;p&gt;现在让我们先了解一下&lt;code&gt;Lazydocker&lt;/code&gt;的功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;清晰的查看所有的&lt;code&gt;Docker&lt;/code&gt;和&lt;code&gt;Docker-compose&lt;/code&gt;容器环境的状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实时查看容器/服务日志；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看容器指标的ascii图，这样您不仅可以感觉到而且看起来像开发人员&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义这些图形以测量您想要的几乎任何指标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入容器/服务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启/移除/重建容器或服务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看给定镜像的历史层信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改占用磁盘空间的容器、镜像或卷；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;lazydocker安装配置&#34;&gt;Lazydocker安装配置&lt;/h4&gt;
&lt;p&gt;你可以直接在&lt;code&gt;Github&lt;/code&gt;上下载&lt;a href=&#34;https://github.com/jesseduffield/lazydocker/releases&#34; title=&#34;下载地址&#34;&gt;二进制文件&lt;/a&gt;，也可以通过容器运行该命令，此处我直接使用二进制命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget https://github.com/jesseduffield/lazydocker/releases/download/v0.9/lazydocker_0.9_Darwin_x86_64.tar.gz
tar xf lazydocker_0.9_Darwin_x86_64.tar.gz
cp lazydocker /usr/local/bin/ &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x /usr/local/bin/lazydocker
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;因为该命令太长了，所以建议配置一个命令别名，方便我们使用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;alias lzd=&amp;#39;lazydocker&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此时，直接执行&lt;code&gt;lzd&lt;/code&gt;即可在终端上显示容器的各种指标状态图&lt;/p&gt;
&lt;h4 id=&#34;lazydocker的配置&#34;&gt;Lazydocker的配置&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Lazydocker&lt;/code&gt;支持用户自定义配置，对于不同的操作系统其配置文件存在不同的位置上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSX: &lt;code&gt;~/Library/Application Support/jesseduffield/lazydocker/config.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux: &lt;code&gt;~/.config/jesseduffield/lazydocker/config.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows: &lt;code&gt;C:\\Users\\&amp;lt;User&amp;gt;\\AppData\\Roaming\\jesseduffield\\lazydocker\\config.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过你可以在打开&lt;code&gt;Lazydocker&lt;/code&gt;之后，鼠标移到左上方，使用快捷键&lt;code&gt;o&lt;/code&gt;即可打开配置文件进入编辑状态，此时直接编辑即可，想要知道每个配置文件选项的含义，可以参考&lt;a href=&#34;https://godoc.org/github.com/jesseduffield/lazydocker/pkg/config&#34; title=&#34;开发配置含义&#34;&gt;开发配置参数&lt;/a&gt;查看，下面是一个配置的案例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/demo3-20200615001139282.gif&#34; alt=&#34;demo3.gif&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gui:
  scrollHeight: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
  theme:
    activeBorderColor:
    - green
    - bold
    inactiveBorderColor:
    - white
    optionsTextColor:
    - blue
  returnImmediately: &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
  wrapMainPanel: &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
reporting: undetermined
commandTemplates:
  dockerCompose: docker-compose
  restartService: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} restart {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  stopService: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} stop {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  serviceLogs: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} logs --since=60m --follow {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  viewServiceLogs: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} logs --follow {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  rebuildService: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} up -d --build {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  recreateService: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} up -d --force-recreate {{ .Service.Name }}&amp;#39;&lt;/span&gt;
  viewContainerLogs: docker logs --timestamps --follow --since&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;60m &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; .Container.ID
    &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
  containerLogs: docker logs --timestamps --follow --since&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;60m &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; .Container.ID &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
  allLogs: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} logs --tail=300 --follow&amp;#39;&lt;/span&gt;
  viewAlLogs: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} logs&amp;#39;&lt;/span&gt;
  dockerComposeConfig: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} config&amp;#39;&lt;/span&gt;
  checkDockerComposeConfig: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} config --quiet&amp;#39;&lt;/span&gt;
  serviceTop: &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{ .DockerCompose }} top {{ .Service.Name }}&amp;#39;&lt;/span&gt;
customCommands:
  containers:
  - name: bash
    attach: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
    command: docker &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; -it &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; .Container.ID &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt; /bin/sh
    serviceNames: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;
oS:
  openCommand: open &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt;filename&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
  openLinkCommand: open &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt;link&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
update:
  dockerRefreshInterval: 100ms
stats:
  graphs:
  - caption: CPU &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    statPath: DerivedStats.CPUPercentage
    color: blue
  - caption: Memory &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    statPath: DerivedStats.MemoryPercentage
    color: green
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;lazydocker的快捷键&#34;&gt;Lazydocker的快捷键&lt;/h4&gt;
&lt;p&gt;在&lt;code&gt;lazydocker&lt;/code&gt;的交互式界面中，还提供了多种快捷键，大家可以通过快捷键快速的在多种功能之间切换。&lt;/p&gt;
&lt;h5 id=&#34;project&#34;&gt;Project&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;e&lt;/kbd&gt;: edit lazydocker config
  &lt;kbd&gt;o&lt;/kbd&gt;: open lazydocker config
  &lt;kbd&gt;[&lt;/kbd&gt;: previous tab
  &lt;kbd&gt;]&lt;/kbd&gt;: next tab
  &lt;kbd&gt;m&lt;/kbd&gt;: view logs
  &lt;kbd&gt;enter&lt;/kbd&gt;: focus main panel
&lt;/pre&gt;
&lt;h5 id=&#34;containers&#34;&gt;Containers&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;[&lt;/kbd&gt;: previous tab
  &lt;kbd&gt;]&lt;/kbd&gt;: next tab
  &lt;kbd&gt;d&lt;/kbd&gt;: remove
  &lt;kbd&gt;e&lt;/kbd&gt;: Hide/Show stopped containers
  &lt;kbd&gt;s&lt;/kbd&gt;: stop
  &lt;kbd&gt;r&lt;/kbd&gt;: restart
  &lt;kbd&gt;a&lt;/kbd&gt;: attach
  &lt;kbd&gt;m&lt;/kbd&gt;: view logs
  &lt;kbd&gt;c&lt;/kbd&gt;: run predefined custom command
  &lt;kbd&gt;b&lt;/kbd&gt;: view bulk commands
  &lt;kbd&gt;enter&lt;/kbd&gt;: focus main panel
&lt;/pre&gt;
&lt;h5 id=&#34;services&#34;&gt;Services&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;d&lt;/kbd&gt;: remove containers
  &lt;kbd&gt;s&lt;/kbd&gt;: stop
  &lt;kbd&gt;r&lt;/kbd&gt;: restart
  &lt;kbd&gt;a&lt;/kbd&gt;: attach
  &lt;kbd&gt;m&lt;/kbd&gt;: view logs
  &lt;kbd&gt;[&lt;/kbd&gt;: previous tab
  &lt;kbd&gt;]&lt;/kbd&gt;: next tab
  &lt;kbd&gt;R&lt;/kbd&gt;: view restart options
  &lt;kbd&gt;c&lt;/kbd&gt;: run predefined custom command
  &lt;kbd&gt;b&lt;/kbd&gt;: view bulk commands
  &lt;kbd&gt;enter&lt;/kbd&gt;: focus main panel
&lt;/pre&gt;
&lt;h5 id=&#34;images&#34;&gt;Images&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;[&lt;/kbd&gt;: previous tab
  &lt;kbd&gt;]&lt;/kbd&gt;: next tab
  &lt;kbd&gt;c&lt;/kbd&gt;: run predefined custom command
  &lt;kbd&gt;d&lt;/kbd&gt;: remove image
  &lt;kbd&gt;b&lt;/kbd&gt;: view bulk commands
  &lt;kbd&gt;enter&lt;/kbd&gt;: focus main panel
&lt;/pre&gt;
&lt;h5 id=&#34;volumes&#34;&gt;Volumes&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;[&lt;/kbd&gt;: previous tab
  &lt;kbd&gt;]&lt;/kbd&gt;: next tab
  &lt;kbd&gt;c&lt;/kbd&gt;: run predefined custom command
  &lt;kbd&gt;d&lt;/kbd&gt;: remove volume
  &lt;kbd&gt;b&lt;/kbd&gt;: view bulk commands
  &lt;kbd&gt;enter&lt;/kbd&gt;: focus main panel
&lt;/pre&gt;
&lt;h5 id=&#34;main&#34;&gt;Main&lt;/h5&gt;
&lt;pre&gt;
  &lt;kbd&gt;esc&lt;/kbd&gt;: return
&lt;/pre&gt;
&lt;h4 id=&#34;更多精彩专辑&#34;&gt;更多精彩专辑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI2MTQzNjQ5Ng==&amp;amp;action=getalbum&amp;amp;album_id=1369187505597235200&amp;amp;subscene=0&amp;amp;scenenote=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI2MTQzNjQ5Ng%3D%3D%26mid%3D2247484958%26idx%3D1%26sn%3D11f8e92c043bd9c3b8e90e065f115db2%26chksm%3Dea5b2321dd2caa377348a8fbab891c8ec36b1293cca97e859419ac452dde49ed8d2d3a1eca2d%26scene%3D0%26xtrack%3D1%26key%3D0f1187fb9cce3ad0f417b07d2cde6d6d7ecc728843b564a2884c93e6fdd5488ea9896347ee71bd92791bce84307e9858e828625d17e0aef3fcabbb7e777d0e9994e9364f9eaf266cad935e9146faaae6%26ascene%3D1%26uin%3DMjc5ODA5OTc2NA%253D%253D%26devicetype%3DiMac%2BMacBookPro15%252C1%2BOSX%2BOSX%2B10.15.5%2Bbuild(19F101)%26version%3D12040112%26nettype%3DWIFI%26lang%3Dzh_CN%26fontScale%3D100%26exportkey%3DAeB4wIawnx%252BKYpH9VsF12aQ%253D%26pass_ticket%3D3pf2gDXXsByxalM6lrUpxq1Wr%252BHc8vU07vVNbNzYexRtUYujsv7o3xFwckkFiR%252B6%26winzoom%3D1.000000&amp;amp;uin=&amp;amp;key=&amp;amp;devicetype=iMac+MacBookPro15%2C1+OSX+OSX+10.15.5+build(19F101)&amp;amp;version=12040112&amp;amp;lang=zh_CN&amp;amp;nettype=WIFI&amp;amp;ascene=1&amp;amp;fontScale=100&amp;amp;winzoom=1.000000&#34;&gt;运维架构专辑&lt;/a&gt;: 包含一些运维技术的使用&lt;code&gt;经验分享&lt;/code&gt;、&lt;code&gt;技术架构案例&lt;/code&gt;、&lt;code&gt;学习交流&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI2MTQzNjQ5Ng==&amp;amp;action=getalbum&amp;amp;album_id=1336873749727068161&amp;amp;subscene=0&amp;amp;scenenote=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI2MTQzNjQ5Ng%3D%3D%26mid%3D2247484922%26idx%3D1%26sn%3Dea6b573671df0dfe22fd39b0461afb09%26chksm%3Dea5b20c5dd2ca9d33e28b6f943360d1828cb77b5316abbda18eb35783cf498d4c292b3dbfb01%26scene%3D0%26xtrack%3D1%26key%3Dedcf9a611ec4e1b716fffa506181563e03e7d2454d1b981a39fc0e7050a31a198551033b5580e28e75603d29eea7fd2bc75c0bdad27dcb7e8554f01f4fecae3f89e5bd06c174e07257a5b64cb932d5f4%26ascene%3D1%26uin%3DMjc5ODA5OTc2NA%253D%253D%26devicetype%3DiMac%2BMacBookPro15%252C1%2BOSX%2BOSX%2B10.15.5%2Bbuild(19F101)%26version%3D12040112%26nettype%3DWIFI%26lang%3Dzh_CN%26fontScale%3D100%26exportkey%3DAdxiFAXoCLD49JSs84qW9GE%253D%26pass_ticket%3D3pf2gDXXsByxalM6lrUpxq1Wr%252BHc8vU07vVNbNzYexRtUYujsv7o3xFwckkFiR%252B6%26winzoom%3D1.000000&amp;amp;uin=&amp;amp;key=&amp;amp;devicetype=iMac+MacBookPro15%2C1+OSX+OSX+10.15.5+build(19F101)&amp;amp;version=12040112&amp;amp;lang=zh_CN&amp;amp;nettype=WIFI&amp;amp;ascene=1&amp;amp;fontScale=100&amp;amp;winzoom=1.000000&#34;&gt;kubernetes实践案例&lt;/a&gt;:都是&lt;code&gt;kubernetes&lt;/code&gt;相关的实践案例，毫无套路，大家都说好!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI2MTQzNjQ5Ng==&amp;amp;action=getalbum&amp;amp;album_id=1336890052449845249&amp;amp;subscene=27&amp;amp;scenenote=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI2MTQzNjQ5Ng%3D%3D%26mid%3D2247484720%26idx%3D1%26sn%3D959a5374e432db8f7a664ff064294a04%26chksm%3Dea5b200fdd2ca919d0ad98952f3daa3344c32becea6c708af00ad9cb1eee7cc0c042d824b270%26scene%3D27%26key%3Dedcf9a611ec4e1b7b9852f0731726bc0e69dd6c5339949af11ce0e66ef2a699c66396aa8683a31c0ae0a78aecd47c3e0947dfb812cf50dd45a30a7c224ea09b94f6dc97d30f6913ce7c3fe5e9204e594%26ascene%3D1%26uin%3DMjc5ODA5OTc2NA%253D%253D%26devicetype%3DiMac%2BMacBookPro15%252C1%2BOSX%2BOSX%2B10.15.5%2Bbuild(19F101)%26version%3D12040112%26nettype%3DWIFI%26lang%3Dzh_CN%26fontScale%3D100%26exportkey%3DAWAx4LL9ZK784Gv2BuoOEdw%253D%26pass_ticket%3D3pf2gDXXsByxalM6lrUpxq1Wr%252BHc8vU07vVNbNzYexRtUYujsv7o3xFwckkFiR%252B6%26winzoom%3D1.000000&amp;amp;uin=&amp;amp;key=&amp;amp;devicetype=iMac+MacBookPro15%2C1+OSX+OSX+10.15.5+build(19F101)&amp;amp;version=12040112&amp;amp;lang=zh_CN&amp;amp;nettype=WIFI&amp;amp;ascene=1&amp;amp;fontScale=100&amp;amp;winzoom=1.000000&#34;&gt;DevOps实践案例&lt;/a&gt;: 专辑内包括&lt;code&gt;Jenkins&lt;/code&gt;和&lt;code&gt;Gitlab&lt;/code&gt;各自&lt;code&gt;持续集成&lt;/code&gt;、&lt;code&gt;持续发布&lt;/code&gt;的实践案例，以及各种&lt;code&gt;模板库的最佳实践&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200617-golang%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2%E8%B7%AF%E7%BA%BF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200617-golang%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2%E8%B7%AF%E7%BA%BF/</guid>
        <description></description>
        <content:encoded></content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200617-sonarqube7.7%E7%A4%BE%E5%8C%BA%E7%89%88%E5%AE%89%E8%A3%85/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200617-sonarqube7.7%E7%A4%BE%E5%8C%BA%E7%89%88%E5%AE%89%E8%A3%85/</guid>
        <description>配置MYSQL数据库 运行MySQL容器 1 2 3 4 docker container run -d --restart=always -v /data/mysql/my.cnf:/etc/mysql/conf.d/my.cnf \ -v /data/mysql/mysql:/var/lib/mysql \ -e MYSQL_ROOT_PASSWORD=PASSWORD \ -p 33306:3306 mysql:5.7 SonarQube配置信息 1 2 3 4 5 6 7 8 mkdir -p /data/sonarqube docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube:7.7-community docker cp sonarqube:/opt/sonarqube/conf /data/sonarqube/ docker cp</description>
        <content:encoded>&lt;h4 id=&#34;配置mysql数据库&#34;&gt;配置&lt;code&gt;MYSQL&lt;/code&gt;数据库&lt;/h4&gt;
&lt;h5 id=&#34;运行mysql容器&#34;&gt;运行MySQL容器&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker container run -d --restart&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;always -v /data/mysql/my.cnf:/etc/mysql/conf.d/my.cnf &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-v /data/mysql/mysql:/var/lib/mysql &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-e &lt;span class=&#34;nv&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;PASSWORD &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-p 33306:3306 mysql:5.7
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;sonarqube配置信息&#34;&gt;SonarQube配置信息&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir -p /data/sonarqube
docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube:7.7-community
docker cp sonarqube:/opt/sonarqube/conf /data/sonarqube/
docker cp sonarqube:/opt/sonarqube/extensions /data/sonarqube/
wget -P /data/sonar/extensions/plugins https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases/download/sonar-l10n-zh-plugin-1.27/sonar-l10n-zh-plugin-1.27.jar
docker stop sonarqube
docker rm sonarqube
chown -R suoper.suoper /data/sonarqube
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;创建sonarqube数据库信息&#34;&gt;创建SonarQube数据库信息&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sonar&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;CHARACTER&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;utf8_general_ci&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;GRANT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sonar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TO&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;sonar&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;192.168.128.%&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;sonar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FLUSH&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;配置sonarqube的ldap&#34;&gt;配置SonarQube的Ldap&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@jenkins-master-128-93:/data/sonarqube/conf# cat sonar.properties  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; egrep -v &lt;span class=&#34;s1&#34;&gt;&amp;#39;^$|^#&amp;#39;&lt;/span&gt;
sonar.security.realm&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;LDAP
sonar.authenticator.downcase&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
ldap.url&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ldap://192.168.128.92:389
ldap.bindDn&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gitlab,ou&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;People,dc&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;openldap,dc&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;xingshulin,dc&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;com
ldap.bindPassword&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ioPg20o5!
ldap.user.baseDn&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ou&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;People,dc&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;openldap,dc&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;xingshulin,dc&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;com
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;启动sonarqube服务&#34;&gt;启动SonarQube服务&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d --restart&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;always --name sonarqube -p 9000:9000 -e sonar.jdbc.username&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;root  -e sonar.jdbc.password&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;     -e sonar.jdbc.url&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;jdbc:mysql://192.168.128.93:33306/sonar?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;rewriteBatchedStatements=true&amp;amp;useConfigs=maxPerformance&amp;amp;useSSL=false&amp;#34;&lt;/span&gt;     -v /data/sonarqube/extensions:/opt/sonarqube/extensions -v /data/sonarqube/conf:/opt/sonarqube/conf sonarqube:7.7-community
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;配置域名解析&#34;&gt;配置域名解析&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;listen&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;server_name&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;quality.xsl.link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;access_log&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;logs/access.log&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kn&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   	&lt;span class=&#34;kn&#34;&gt;proxy_pass&lt;/span&gt;                          &lt;span class=&#34;s&#34;&gt;http://192.168.128.93:9000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    	&lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;Host&lt;/span&gt;              &lt;span class=&#34;nv&#34;&gt;$http_host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     	&lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;X-Real-IP&lt;/span&gt;         &lt;span class=&#34;nv&#34;&gt;$remote_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     	&lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;X-Forwarded-For&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
     	&lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;kn&#34;&gt;proxy_read_timeout&lt;/span&gt;                  &lt;span class=&#34;mi&#34;&gt;900&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#        allow 119.57.91.170;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#        allow 47.94.96.138;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#        allow 123.56.30.91;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#        allow 192.168.128.0/24;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#        deny all;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200618-visualstudiocode%E4%B8%AD%E9%9D%9E%E5%B8%B8nice%E7%9A%84%E6%8F%92%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200618-visualstudiocode%E4%B8%AD%E9%9D%9E%E5%B8%B8nice%E7%9A%84%E6%8F%92%E4%BB%B6/</guid>
        <description>GitLens — Git supercharged </description>
        <content:encoded>&lt;h5 id=&#34;gitlens--git-supercharged&#34;&gt;GitLens — Git supercharged&lt;/h5&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200619-%E6%9C%80%E9%9A%BE%E5%BF%98%E7%9A%84%E4%B8%80%E6%AC%A1openvpn%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200619-%E6%9C%80%E9%9A%BE%E5%BF%98%E7%9A%84%E4%B8%80%E6%AC%A1openvpn%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA/</guid>
        <description>这次终于把自己给&amp;quot;坑&amp;quot;坏了，因为一次不可控制的&amp;quot;停电&amp;quot;让公司的部分老年机饱受了一次&amp;quot;灾难性&amp;quot;的洗礼，</description>
        <content:encoded>&lt;p&gt;这次终于把自己给&amp;quot;坑&amp;quot;坏了，因为一次不可控制的&amp;quot;停电&amp;quot;让公司的部分老年机饱受了一次&amp;quot;灾难性&amp;quot;的洗礼，幸运的是部分幸存下来的主机中包括我们至关重要的服务，而就是那些看似无状态的服务深深的打了自己一巴掌。首当其冲的就是那个万恶的&lt;code&gt;Openvpn&lt;/code&gt;服务。使用Openvpn主要是为了解决一下场景:&lt;/p&gt;
&lt;p&gt;我们的部分非业务办公服务主要服务于内部的办公人员，由于疫情的背景下，我们需要满足远程办公的条件以及非本地的同事也是需要访问这些资源的，包括一些暴露在公网限制访问的服务等，所以通过点对点登录访问的Openvpn就是我们一直以来的选择。&lt;/p&gt;
&lt;p&gt;灾难后的恢复永远是让人发狂，而这边大家又在不断的&amp;quot;吹更&amp;rdquo;，实在难以淡定下来，不懂网络的我也没法直接在那些老古董身上动刀子，在一段焦虑和无奈之后还是冷静下仔细思考如何快速的恢复&amp;quot;战场&amp;rdquo;，因为一台物理机老前辈因为掉电让磁盘歇工了，短时间内想要修复物理机恐怕已经不可能了，所以我开始这样做：&lt;/p&gt;
&lt;h5 id=&#34;第一步-网上冲浪查看防火墙端口绑定规则&#34;&gt;第一步 网上冲浪，查看防火墙端口绑定规则&lt;/h5&gt;
&lt;p&gt;在网上疯狂的搜索着关于&lt;code&gt;CISCO ASA5515-X&lt;/code&gt;的网络配置，查看防火墙中关于&lt;code&gt;公网IP:x.x.x.x&lt;/code&gt;与主机之间端口射映关系，因为不断的变更交接人，记录的网络配置信息和文档早已随着时间飞逝了，这时候不免想来句&lt;code&gt;你妹的&lt;/code&gt;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ciscoasa# show nat
...
ciscoasa# show run object
...
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过查看一波&lt;code&gt;nat&lt;/code&gt;、&lt;code&gt;object&lt;/code&gt;和&lt;code&gt;service&lt;/code&gt;之后，发现了防火墙上配置的&lt;code&gt;Public IP&lt;/code&gt;与内部服务&lt;code&gt;OpenVPN&lt;/code&gt;主机之间端口的映射关系，于是赶紧找几个还&lt;code&gt;有气&lt;/code&gt;的主机进行业务恢复&lt;/p&gt;
&lt;h5 id=&#34;第二步-照着葫芦画个瓢&#34;&gt;第二步 照着葫芦画个瓢&lt;/h5&gt;
&lt;p&gt;这是一台&lt;code&gt;Centos7&lt;/code&gt;主机&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vpn ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat /etc/redhat-release&lt;/span&gt;
CentOS Linux release 7.7.1908 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Core&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;首先就是将其&lt;code&gt;IP&lt;/code&gt;地址修改为防火墙内规则制定的主机IP&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vpn ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat /etc/sysconfig/network-scripts/ifcfg-ens160&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;TYPE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Ethernet&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;PROXY_METHOD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;BROWSER_ONLY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;BOOTPROTO&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;DEFROUTE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;IPV4_FAILURE_FATAL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;IPV6INIT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;IPV6_AUTOCONF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;IPV6_DEFROUTE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;IPV6_FAILURE_FATAL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;IPV6_ADDR_GEN_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;stable-privacy&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ens160&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;aa08d0dd-5ba5-412c-84ab-716b885c4d89&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;DEVICE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ens160&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;ONBOOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;IPADDR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;172.16.99.129&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;PREFIX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;24&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;GATEWAY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.99.254&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 修改成需要的IP地址&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;IPV6_PRIVACY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;PEERDNS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;DNS1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;114.114.114.114&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;第三步-配置openvpn环境&#34;&gt;第三步 配置OpenVPN环境&lt;/h5&gt;
&lt;p&gt;在找对IP访问的映射关系之后,就是抓紧恢复服务，于是有了下面的安装配置段:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;easy-rsa&lt;/code&gt;制作&lt;code&gt;OpenVPN&lt;/code&gt;所需的证书以及客户端证书&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install openvpn
mkdir /data/tools -p 
wget -P /data/tools https://github.com/OpenVPN/easy-rsa/releases/download/3.0.1/EasyRSA-3.0.1.tgz
tar zxf EasyRSA-3.0.1.tgz
cp -rf EasyRSA-3.0.1 /etc/openvpn/easy-rsa
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /etc/openvpn/easy-rsa

./easyrsa init-pki &lt;span class=&#34;c1&#34;&gt;# 初始化证书目录pki&lt;/span&gt;
./easyrsa build-ca nopass 
&lt;span class=&#34;c1&#34;&gt;# 创建根证书，提示输入Common Name，名称随意，但是不能和服务端证书或客户端证书名称相同&lt;/span&gt;
./easyrsa gen-dh &lt;span class=&#34;c1&#34;&gt;# 生成Diffle Human参数，它能保证密钥在网络中安全传输&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;制作&lt;code&gt;CA&lt;/code&gt;证书&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./easyrsa init-pki &lt;span class=&#34;c1&#34;&gt;# 初始化证书目录pki&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;制作服务端&lt;code&gt;OpenVPN Server&lt;/code&gt;证书&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./easyrsa build-server-full server nopass &lt;span class=&#34;c1&#34;&gt;# server是服务端证书名称，可以用其它名称&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;制作客户端证书&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./easyrsa build-client-full barry nopass &lt;span class=&#34;c1&#34;&gt;# barry是客户端证书名称，可以用其它名称&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;配置LDAP认证&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install openvpn-auth-ldap -y
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vpn openvpn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls -al /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so&lt;/span&gt;
-rwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;133320&lt;/span&gt; Sep  &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2019&lt;/span&gt; /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;准备LDAP认证配置文件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;&amp;lt;LDAP&amp;gt;
# LDAP server URL
URL		ldap://192.168.99.130
# Bind DN (If your LDAP server doesn&#39;t support anonymous binds)
BindDN		cn=openvpn,dc=openldap,dc=kubemaster,dc=top
Password	openvpn_Passsword
# Network timeout (in seconds)
Timeout		15
# Enable Start TLS
#TLSEnable	no
# Follow LDAP Referrals (anonymously)
#FollowReferrals no
# TLS CA Certificate File
#TLSCACertFile	/usr/local/etc/ssl/ca.pem
# TLS CA Certificate Directory
#TLSCACertDir	/etc/ssl/certs
# Client Certificate and key
# If TLS client authentication is required
#TLSCertFile	/usr/local/etc/ssl/client-cert.pem
#TLSKeyFile	/usr/local/etc/ssl/client-key.pem
# Cipher Suite
# The defaults are usually fine here
# TLSCipherSuite	ALL:!ADH:@STRENGTH
&amp;lt;/LDAP&amp;gt;

&amp;lt;Authorization&amp;gt;
# Base DN
BaseDN		&amp;quot;ou=People,dc=openldap,dc=kubemaster,dc=top&amp;quot;
# User Search Filter
SearchFilter	&amp;quot;(&amp;amp;(uid=%u))&amp;quot;

# Require Group Membership
RequireGroup	false

# Add non-group members to a PF table (disabled)
#PFTable	ips_vpn_users

&amp;lt;Group&amp;gt;
  BaseDN		&amp;quot;ou=Groups,dc=example,dc=com&amp;quot;
  SearchFilter	&amp;quot;(|(cn=developers)(cn=artists))&amp;quot;
  MemberAttribute	uniqueMember
  # Add group members to a PF table (disabled)
  #PFTable	ips_vpn_eng
&amp;lt;/Group&amp;gt;
&amp;lt;/Authorization&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;配置服务端配置文件&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vpn openvpn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat server.conf |egrep -v &amp;#39;^$|^#|^\;&amp;#39;&lt;/span&gt;
port &lt;span class=&#34;m&#34;&gt;11194&lt;/span&gt;
proto tcp
dev tun
ca /etc/openvpn/easy-rsa/pki/ca.crt
cert /etc/openvpn/easy-rsa/pki/issued/server.crt
key /etc/openvpn/easy-rsa/pki/private/server.key  &lt;span class=&#34;c1&#34;&gt;# This file should be kept secret&lt;/span&gt;
dh /etc/openvpn/easy-rsa/pki/dh.pem
server 10.8.0.0 255.255.255.0 &lt;span class=&#34;c1&#34;&gt;# 这里是openvpn server的IP地址池&lt;/span&gt;
ifconfig-pool-persist ipp.txt
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;dhcp-option DNS 114.114.114.114&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 下发给客户端的DNS&lt;/span&gt;
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;dhcp-option DNS 8.8.8.8&amp;#34;&lt;/span&gt;
client-to-client
duplicate-cn
keepalive &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;120&lt;/span&gt;
comp-lzo
max-clients &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;
user root
group root
persist-key
persist-tun
status openvpn-status.log
log         openvpn.log
log-append  openvpn.log
verb &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
mute &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
client-cert-not-required
plugin /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/openvpn/auth/ldap.conf&amp;#34;&lt;/span&gt;
username-as-common-name
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;route 192.168.0.0 255.255.0.0&amp;#34;&lt;/span&gt;
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;route 192.168.99.0 255.255.255.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 下发给客户端的需要走VPN的网络流量，其它网段不走VPN，可正常上网。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;开启路由转发&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;net.ipv4.ip_forward = 1&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
sysctl -p
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;&lt;code&gt;OpenVPN&lt;/code&gt;防火墙的配置，这里是最重要的一环，注意不要把你的网络设备名称写错了。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iptables -t nat -A POSTROUTING -s 10.8.0.0/16 -o ens160 -j MASQUERADE &lt;span class=&#34;c1&#34;&gt;# 网络设备为ens160&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;配置&lt;code&gt;OpenVPN&lt;/code&gt;的启停脚本&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OpenVPN ..........[STOP]&amp;#34;&lt;/span&gt;
ps -ef &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;grep openvpn &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v grep &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OpenVPN ..........[START]&amp;#34;&lt;/span&gt;
/usr/local/openvpn/sbin/openvpn --config /etc/openvpn/server.conf &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;开机服务自启,将下面内容写到&lt;code&gt;/etc/rc.local&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/usr/local/openvpn/sbin/openvpn --daemon --config /etc/openvpn/server.conf &amp;gt; /dev/null 2&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;12&#34;&gt;
&lt;li&gt;客户端的配置&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 把服务器上这三个文件拷贝下来和客户端的配置文件放在一起&lt;/span&gt;
/etc/openvpn/easy-rsa/pki/private/barry.key
/etc/openvpn/easy-rsa/pki/issued/barry.crt
/etc/openvpn/easy-rsa/pki/ca.crt
&lt;span class=&#34;c1&#34;&gt;# 客户端配置文件内容&lt;/span&gt;
client
dev tun
proto tcp
resolv-retry infinite
nobind
remote PUBLIC_ADDRESS &lt;span class=&#34;m&#34;&gt;11194&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 就是与192.168.99.129上的11194绑定的那个公网IP地址&lt;/span&gt;
persist-key
persist-tun
ca ca.crt
ns-cert-type server
cert barry.crt
key barry.key
verb &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 日志等级&lt;/span&gt;
comp-lzo
auth-user-pass
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样基本上就完成了OpenVPN的搭建部署，也可能是我最后一次整这玩意儿。下面是配置OpenVPN时候遇到的问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;明明在openvpn服务端配置了服务端同一网段的下发路由，但就是ping不通服务端同一网段的其他主机，那你需要认真检查下面的配置，包括网卡设备名&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iptables -t nat -A POSTROUTING -s 10.8.0.0/16 -o ens160 -j MASQUERADE &lt;span class=&#34;c1&#34;&gt;# 网络设备为ens160&lt;/span&gt;
sudo iptables -nL -t nat &lt;span class=&#34;c1&#34;&gt;# 查看&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;为什么连上了OpenVPN我所有的流量都经过OpenVPN了,那是你启用了下面的配置，这个配置你也可以用于科学***/上网&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;push &lt;span class=&#34;s2&#34;&gt;&amp;#34;redirect-gateway def1 bypass-dhcp&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;给客户端指定固定的&lt;code&gt;VPN&lt;/code&gt;地址&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;client-config-dir ccd &lt;span class=&#34;c1&#34;&gt;# 表示指定固定IP地址的客户端配置文件存储在openvpn服务端配置文件统计目录下的ccd目录里面&lt;/span&gt;
route 192.168.40.128 255.255.255.248 &lt;span class=&#34;c1&#34;&gt;# 指定客户端IP的地址&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;为什么在&lt;code&gt;linux/MacOS&lt;/code&gt;上配置都没有问题，而在window上有问题，此时你需要注意的是，在window上安装和启动&lt;code&gt;OpenVPN&lt;/code&gt;都是需要管理员权限的，因为它会涉及到一些添加路由的操作，这些需要管理员权限。&lt;/li&gt;
&lt;/ol&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200620-openvpn%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200620-openvpn%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/</guid>
        <description>OpenVPN高级进阶 OpenVPN服务是一个比较老的服务了，但是作为一个核心的基础服务我觉得还是有必要认真仔细的掌握和理解，并且能根据其自身的功能优化和配置出</description>
        <content:encoded>&lt;h3 id=&#34;openvpn高级进阶&#34;&gt;OpenVPN高级进阶&lt;/h3&gt;
&lt;p&gt;OpenVPN服务是一个比较老的服务了，但是作为一个核心的基础服务我觉得还是有必要认真仔细的掌握和理解，并且能根据其自身的功能优化和配置出我们需要的场景，只要能解决实际的问题场景，对我们来说就是有价值的，下面通过几个场景聊一下OpeVPN的高阶配置选项:&lt;/p&gt;
&lt;p&gt;背景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;公司内部网段是&lt;code&gt;192.168.99.0/24&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;所有人&lt;/code&gt;允许访问反向代理主机为&lt;code&gt;192.168.99.130&lt;/code&gt;，但不能访问其他服务器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;特定的用户&lt;/code&gt;允许访问&lt;code&gt;数据库服务器&lt;/code&gt;为&lt;code&gt;192.168.99.131&lt;/code&gt;，不能访问其他服务器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;管理员&lt;/code&gt;能访问&lt;code&gt;所有公司内网服务器&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;场景1-限制主机访问&#34;&gt;场景1 限制主机访问&lt;/h3&gt;
&lt;p&gt;我们不需要&lt;code&gt;VPN客户端&lt;/code&gt;访问&lt;code&gt;VPN服务端&lt;/code&gt;所在集群中的&lt;code&gt;所有其他主机&lt;/code&gt;,允许某些特定的VPN客户端访问指定的内网主机资源的时候，我们需要在客户端无感知的情况下对VPN服务端做一些设置满足以上场景:&lt;/p&gt;
&lt;p&gt;更新服务端的配置，将VPN地址池的网段划分为&lt;code&gt;管理员&lt;/code&gt;网段、&lt;code&gt;客户组&lt;/code&gt;网段、&lt;code&gt;普通&lt;/code&gt;网络:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在Openvpn服务端配置文件server.conf增加：&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#10.8.0.0是给所有VPN客户端的IP段；&lt;/span&gt;
server 10.8.0.0 255.255.255.0
&lt;span class=&#34;c1&#34;&gt;#10.8.1.0是给管理员分配的IP段；&lt;/span&gt;
server 10.8.1.0 255.255.255.0
&lt;span class=&#34;c1&#34;&gt;#10.8.2.0就是给特定用户组分配的IP段；&lt;/span&gt;
server 10.8.2.0 255.255.255.0
&lt;span class=&#34;c1&#34;&gt;#下面是定义服务器读取特殊客户端配置文件的目录为ccd,ccd是与Openvpn服务端配置文件同级目录中的ccd目录&lt;/span&gt;
client-config-dir ccd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后给管理员配置访问网络&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat ccd/sysadmin1
ifconfig-push 10.8.1.1 10.8.1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;客户组网络:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat ccd/kehugroup
ifconfig-push 10.8.2.1 10.8.2.2
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里需要注意的是, &lt;code&gt;ccd&lt;/code&gt;目录下的文件名就是用户的&lt;code&gt;Common Name&lt;/code&gt;，OpenVPN是根据该名称来获得指定客户端的，客户端的IP地址不是任意指定的，由于Windows的TAP驱动必须采用/30网段的IP，为兼容该协议，应从特定的IP地址中选择，而且是成组出现的。&lt;/p&gt;
&lt;p&gt;最后在完成网络的划分之后，在&lt;code&gt;OpenVPN&lt;/code&gt;端进行&lt;code&gt;Iptables&lt;/code&gt;限制:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iptables -A FORWARD -i tun0 -s 10.8.0.0/24 -d 192.168.99.130 -j ACCEPT
iptables -A FORWARD -i tun0 -s 10.8.1.0/24 -d 192.168.99.0/24 -j ACCEPT
iptables -A FORWARD -i tun0 -s 10.8.2.0/24 -d 192.168.99.131 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;场景2-打通openvpn客户端与服务端的内网&#34;&gt;场景2 打通OpenVPN客户端与服务端的内网&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#让所有客户端都增加到内网192.168.99.0/24的路由&lt;/span&gt;
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;route 192.168.99.0 255.255.255.0&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 让所有的客户端都能访问仅允许服务端访问的网站(约束白名单)&lt;/span&gt;
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;route 39.156.69.79 255.255.255.255&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 向客户端推送增加访问服务端子网的192.168.10.0/24的路由，注意服务端的IP是否是子网的网关，否则需要在子网网关处添加到达192.168.99.0的路由(客户端也是如此)&lt;/span&gt;
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;route 192.168.10.0 255.255.255.0&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在子网网关处添加路由&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;route add -net 192.168.99.0 mask 255.255.255.0 gw 192.168.10.254 dev ens160
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;场景3-openvpn提供dhcp与dns&#34;&gt;场景3 OpenVPN提供DHCP与DNS&lt;/h3&gt;
&lt;p&gt;OpenVPN内部提供了DHCP的服务，而不需要依赖外部的DHCP服务器。同样，也提供了DHCP服务的一些配置参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# openvpn服务端的配置&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#定义客户端的DNS服务器地址&lt;/span&gt;
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;dhcp-option DNS 114.114.114.114&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 这是首选DNS&lt;/span&gt;
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;dhcp-option DNS 8.8.8.8&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 这是备选DNS&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#定义客户端的WINS服务器地址&lt;/span&gt;
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;dhcp-options WINS 192.168.228.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 这是设置IP和主机名之间的映射与IP和域名之间的映射不同,较少使用&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#让客户端发起的所有IP请求都通过OpenVPN服务器,可用于全局代理使用，启用后会出现浏览器内打不开网站等情况&lt;/span&gt;
push &lt;span class=&#34;s2&#34;&gt;&amp;#34;redirect-gateway def1 bypass-dhcp&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;场景4-添加ldap认证&#34;&gt;场景4 添加LDAP认证&lt;/h3&gt;
&lt;p&gt;通常情况下，OpenVPN客户端都需要通过&lt;code&gt;SSL&lt;/code&gt;连接的，因此客户端必须要有&lt;code&gt;ca&lt;/code&gt;证书，服务端可以通过设置&lt;code&gt;client-cert-not-required&lt;/code&gt;让客户端不配置证书。但是一般通过OpenLDAP认证是最方便的事情:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装LDAP`模块的配置&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install openvpn-auth-ldap -y
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vpn ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ls -al /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so&lt;/span&gt;
-rwxr-xr-x &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;133320&lt;/span&gt; Sep  &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;准备ldap认证的配置文件&lt;code&gt;/etc/openvpn/auth/ldap.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir -p /etc/openvpn/auth
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch ldap.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;下面是&lt;code&gt;ldap.conf&lt;/code&gt;的配置文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@vpn ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat /etc/openvpn/auth/ldap.conf&lt;/span&gt;
&amp;lt;LDAP&amp;gt;
	&lt;span class=&#34;c1&#34;&gt;# LDAP server URL&lt;/span&gt;
	URL		ldap://192.168.99.130
	&lt;span class=&#34;c1&#34;&gt;# Bind DN (If your LDAP server doesn&amp;#39;t support anonymous binds)&lt;/span&gt;
	BindDN		&lt;span class=&#34;nv&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;openvpn,dc&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;openldap,dc&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kubemaster,dc&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;top
	Password	openvpnuserpasswd
	&lt;span class=&#34;c1&#34;&gt;# Network timeout (in seconds)&lt;/span&gt;
	Timeout		&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# Enable Start TLS&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;#TLSEnable	no&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# Follow LDAP Referrals (anonymously)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;#FollowReferrals no&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# TLS CA Certificate File&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;#TLSCACertFile	/usr/local/etc/ssl/ca.pem&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# TLS CA Certificate Directory&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;#TLSCACertDir	/etc/ssl/certs&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# Client Certificate and key&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# If TLS client authentication is required&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;#TLSCertFile	/usr/local/etc/ssl/client-cert.pem&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;#TLSKeyFile	/usr/local/etc/ssl/client-key.pem&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# Cipher Suite&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# The defaults are usually fine here&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# TLSCipherSuite	ALL:!ADH:@STRENGTH&lt;/span&gt;
&amp;lt;/LDAP&amp;gt;

&amp;lt;Authorization&amp;gt;
	&lt;span class=&#34;c1&#34;&gt;# Base DN&lt;/span&gt;
	BaseDN		&lt;span class=&#34;s2&#34;&gt;&amp;#34;ou=People,dc=openldap,dc=kubemaster,dc=top&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# User Search Filter&lt;/span&gt;
	SearchFilter	&lt;span class=&#34;s2&#34;&gt;&amp;#34;(&amp;amp;(uid=%u))&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# uid或者cn一般都可以，根据自己的条件&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;# Require Group Membership&lt;/span&gt;
	RequireGroup	&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 是否启用组成员关系&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;# Add non-group members to a PF table (disabled)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;#PFTable	ips_vpn_users&lt;/span&gt;

	&amp;lt;Group&amp;gt;
		BaseDN		&lt;span class=&#34;s2&#34;&gt;&amp;#34;ou=Groups,dc=example,dc=com&amp;#34;&lt;/span&gt;
		SearchFilter	&lt;span class=&#34;s2&#34;&gt;&amp;#34;(|(cn=developers)(cn=artists))&amp;#34;&lt;/span&gt;
		MemberAttribute	uniqueMember
		&lt;span class=&#34;c1&#34;&gt;# Add group members to a PF table (disabled)&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;#PFTable	ips_vpn_eng&lt;/span&gt;
	&amp;lt;/Group&amp;gt;
&amp;lt;/Authorization&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在完成ldap的配置之后，只需要在服务端增加以下配置即可:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;client-cert-not-required
plugin /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/openvpn/auth/ldap.conf&amp;#34;&lt;/span&gt;
username-as-common-name
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样就完成了基于&lt;code&gt;openldap&lt;/code&gt;认证的OpenVPN客户端的用户鉴权。&lt;/p&gt;
&lt;h3 id=&#34;疑难杂症&#34;&gt;疑难杂症&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;VPN每隔10s左右会重新连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于密码认证的VPN出现每隔10s重新连接，说明你的账号在别的设备上进行登录了。请检查是否存在改情况并建议及时的修改密码。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Mac上的Tunnelblick总是处于不断认证的状态&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200620123753245.png&#34; alt=&#34;image-20200620123753245&#34; /&gt;&lt;/p&gt;
&lt;p&gt;出现这种情况说明你的Tunnelblick的版本太低，需要你及时的更新该软件的版本，就可以解决，&lt;a href=&#34;https://tunnelblick.net/downloads.html&#34; title=&#34;Tunnelblick Download&#34;&gt;TunnelBlick&lt;/a&gt;下载地址&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Window上使用OpenVPN客户端连接时出现&lt;code&gt;SSL ERROR&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;出现这种问题说明你的Window上的OpenVPN客户端版本太低，需要重新下载客户端并且使用&lt;code&gt;管理员身份&lt;/code&gt;安装和启动。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Window上使用OpenVPN客户端连接时出现&lt;code&gt;windows route add command failed&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;出现这种问题，属于打开VPN客户端的时候没有使用管理员身份打开，没有添加路由的权限。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;使用OpenVPN连接出现身份验证失败&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;出现这种问题，这是属于你的用户名或者密码填写错误，认真检查账户信息或者找相关技术负责人重新修改密码。&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200625-sql%E5%AE%A1%E6%A0%B8%E5%BC%80%E6%BA%90%E7%A5%9E%E5%A5%87yearning/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200625-sql%E5%AE%A1%E6%A0%B8%E5%BC%80%E6%BA%90%E7%A5%9E%E5%A5%87yearning/</guid>
        <description>今天给大家分享目前最popular的MySQL SQL审计平台Yearning，这个平台可以帮助开发者快速的完成SQL语句的语法的审核、检测、执行和回滚等操作。在</description>
        <content:encoded>&lt;p&gt;今天给大家分享目前最&lt;code&gt;popular&lt;/code&gt;的&lt;code&gt;MySQL SQL&lt;/code&gt;审计平台&lt;code&gt;Yearning&lt;/code&gt;，这个平台可以帮助开发者快速的完成SQL语句的语法的审核、检测、执行和回滚等操作。在早期，我们是先整理出来一套SQL使用规范，然后通过部门会议审核规范的内容，最后要求按照内容应用在实际的工作中，但是这些不免有些开发者依旧就不住或者&lt;code&gt;不上心&lt;/code&gt;，不按套路出牌，造成数据库使用不统一。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Yearning&lt;/code&gt;自身包含了一套通常适用的审核规范，基本上能满足日常需要，同时规范了日常开发需求所涉及到的SQL变动，在Yearning平台的辅助下，日常的SQL变动也更加贴近SQL使用的规范化、标准化的要求，同时&lt;code&gt;100%&lt;/code&gt;基于GO语言研发的Yearning也可以通过自定义二次开发&lt;code&gt;(遵循AGPL协议)&lt;/code&gt;增加一些符合自己审核策略，但是它的审核引擎&lt;code&gt;Juno&lt;/code&gt;不是开源的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200625101547637.png&#34; alt=&#34;image-20200625101547637&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Yearning的前端是基于&lt;code&gt;Vue.js&lt;/code&gt;构建的，而这块审核规则的代码也是全部在JS中传递和处理的，另外它还提供SQL语法高亮、自动补全和智能提示、可视化等。&lt;/p&gt;
&lt;h3 id=&#34;使用感受&#34;&gt;使用感受&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;有工单记录，让变更的SQL记录落库保存，易于审计。&lt;/li&gt;
&lt;li&gt;开发者自己提交，监测最大程度减小以往通过微信传送等粘贴出错几率，给DBA.运维省心。&lt;/li&gt;
&lt;li&gt;再一次证明&lt;code&gt;落实规范性的东西&lt;/code&gt;需要有工具化、流程化，靠自觉万万是做不到的。&lt;/li&gt;
&lt;li&gt;SQL审批要设置多成员多级审核，最后自己执行落库。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面列出支持的主要功能:&lt;/p&gt;
&lt;h3 id=&#34;yearning-feature&#34;&gt;Yearning Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SQL查询
&lt;ul&gt;
&lt;li&gt;查询工单&lt;/li&gt;
&lt;li&gt;导出&lt;/li&gt;
&lt;li&gt;自动补全，智能提示&lt;/li&gt;
&lt;li&gt;查询语句审计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SQL审核
&lt;ul&gt;
&lt;li&gt;流程化工单&lt;/li&gt;
&lt;li&gt;SQL语句检测与执行&lt;/li&gt;
&lt;li&gt;SQL回滚&lt;/li&gt;
&lt;li&gt;历史审核记录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推送
&lt;ul&gt;
&lt;li&gt;E-mail工单推送&lt;/li&gt;
&lt;li&gt;钉钉webhook机器人工单推送&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户权限及管理
&lt;ul&gt;
&lt;li&gt;角色划分&lt;/li&gt;
&lt;li&gt;基于用户的细粒度权限&lt;/li&gt;
&lt;li&gt;注册&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他
&lt;ul&gt;
&lt;li&gt;todoList&lt;/li&gt;
&lt;li&gt;LDAP登录&lt;/li&gt;
&lt;li&gt;动态审核规则配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AutoTask自动执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;体验&#34;&gt;体验&lt;/h3&gt;
&lt;p&gt;Yearning的安装十分简单，它依赖一个&lt;code&gt;mysql&lt;/code&gt;数据库用于存储工单的数据、回滚的SQL语句，所以需要先初始化数据库&lt;code&gt;-m&lt;/code&gt;，然后在启动&lt;code&gt;-s&lt;/code&gt;。对于回滚的语句不得不说一下，真的要是涉及到大变更的操作的时候，还是建议手动或者可靠地备份方式进行。官方也提供了&lt;a href=&#34;https://guide.yearning.io/install.html&#34; title=&#34;Yearning安装手册&#34;&gt;安装手册&lt;/a&gt;，一般建议容器化部署，方便省事，安装包内也有&lt;code&gt;Dockerfile&lt;/code&gt;，二次开发的同学也可以自己构建发布。&lt;/p&gt;
&lt;p&gt;在需要配置钉钉或者微信的时候，可以通过选项设置通知时显示Yearning的平台地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/15640366990306.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下面是配置钉钉和OpenLDAP登录的参考:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200625104229224.png&#34; alt=&#34;image-20200625104229224&#34; /&gt;&lt;/p&gt;
&lt;p&gt;无门槛领取DNSPOD/腾讯的域名注册5元券&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200626-python%E5%88%86%E6%9E%90%E5%BA%94%E8%81%98%E5%B2%97%E4%BD%8D%E6%9D%A1%E4%BB%B6%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200626-python%E5%88%86%E6%9E%90%E5%BA%94%E8%81%98%E5%B2%97%E4%BD%8D%E6%9D%A1%E4%BB%B6%E4%BF%A1%E6%81%AF/</guid>
        <description>场景 最近发现一些朋友想要跳槽，正值疫情，也不知道现在市场的如何，同时目前的IT行业更是越来越难,技术革新越来越快，对新的岗位的需求也是不断的变化，因此就会想知道</description>
        <content:encoded>&lt;h3 id=&#34;场景&#34;&gt;场景&lt;/h3&gt;
&lt;p&gt;最近发现一些朋友想要跳槽，正值疫情，也不知道现在市场的如何，同时目前的IT行业更是越来越难,技术革新越来越快，对新的岗位的需求也是不断的变化，因此就会想知道现在的应聘岗位对面试者的要求有哪些，各地的某个岗位薪资范围大概是多少等信息时候，我们就需要到某个招聘网站上不断的刷页面，看数据，但是简单的想一下，可以通过Python脚本来批量的分析招聘网站上各个岗位在不同城市的需求，高效的快捷的方便我们掌握大致的方向。&lt;/p&gt;
&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;
&lt;p&gt;如何获取数据，需要掌握基本的Python爬虫知识，[&lt;code&gt;requests&lt;/code&gt;](&lt;a href=&#34;https://requests.readthedocs.io/en/master/&#34;&gt;https://requests.readthedocs.io/en/master/&lt;/a&gt; Requests)模块就可以搞定了，在爬取数据之后，将其存在Excel中，因此需要[&lt;code&gt;xlwt&lt;/code&gt;](&lt;a href=&#34;https://xlwt.readthedocs.io/en/latest/&#34;&gt;https://xlwt.readthedocs.io/en/latest/&lt;/a&gt; xlwt)模块处理，当然在诸多的Python模块中，你可以选择你喜欢的，毕竟能抓老鼠的猫都是好猫。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;xlwt                   1.3.0 
requests               2.18.4
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;下面我们就拿拉钩网站为例，思考和获取部分的数据作为个人简单的分析参考，脚本中没有涉及到隐私数据信息，大可放心，同时也是为了找工作的小伙伴们提供一下参考的方向：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;脚本中获取的是通过指定的页的数量获取全国各城市的岗位信息，你可以修改&lt;code&gt;FetchData&lt;/code&gt;方法中的&lt;code&gt;referer&lt;/code&gt;和请求地址中城市的值，以便获取你需要的目标城市的岗位信息&lt;/li&gt;
&lt;li&gt;如果获取的比较频繁的话，可能会出现以下情况，这里你可以通过设置代理的方式解决，免费的代理IP网站上有很多，你可以参考这篇获取代理的文章。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200626202227154.png&#34; alt=&#34;image-20200626202227154&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在交互式输入需要获取的页数之后，爬取的数据将会存储在当前执行位置下的&lt;code&gt;data.xls&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面就简单的提供一下写好的Python脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env python3.4&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Created on 2020-06-26
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@title: &amp;#39;爬去网站的招聘信息&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@author: marionxue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;xlwt&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;# 获取存储职位信息的json对象，遍历获得公司名、福利待遇、工作地点、学历要求、工作类型、发布时间、职位名称、薪资、工作年限&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;FetchData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;my_headers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;User-Agent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;Referer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://www.lagou.com/jobs/list_Python?city=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%85%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;A8&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;5%9B%BD&amp;amp;cl=false&amp;amp;fromSearch=true&amp;amp;labelWords=&amp;amp;suginput=&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/x-www-form-urlencoded;charset = UTF-8&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;ses&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 获取session&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 更新头部信息&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;ses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://www.lagou.com/jobs/list_&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%83%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;91&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;5%B7&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%9E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;java?city=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%85%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;A8&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;5%9B%BD&amp;amp;cl=false&amp;amp;fromSearch=true&amp;amp;labelWords=&amp;amp;suginput=&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;positionResult&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;info_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;job&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;positionId&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 岗位对应ID&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 岗位对应城市&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;companyFullName&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 公司全名&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;companyLabelList&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 福利待遇&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;district&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 工作地点&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;education&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 学历要求&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;firstType&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 工作类型&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;formatCreateTime&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 发布时间&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;positionName&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 职位名称&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;salary&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 薪资&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;workYear&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 工作年限&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;info_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;information&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info_list&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;请输入你要抓取的页码总数：&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;info_result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;岗位id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;城市&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;公司全名&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;福利待遇&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;工作地点&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;学历要求&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;工作类型&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;发布时间&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;职位名称&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;薪资&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;工作年限&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;info_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://www.lagou.com/jobs/positionAjax.json?needAddtionalResult=false&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;datas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;s1&#34;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;false&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s1&#34;&gt;&amp;#39;pn&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s1&#34;&gt;&amp;#39;kd&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;devops工程师&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FetchData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;info_result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info_result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;第&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;页数据已采集&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;第&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;页数据采集出现问题&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;# 创建workbook,即excel&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;workbook&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xlwt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Workbook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 创建表,第二参数用于确认同一个cell单元是否可以重设值&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;worksheet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;workbook&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_sheet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;datas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cell_overwrite_ok&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info_result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;# print(row)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;worksheet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;workbook&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data.xls&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当我们需要查看某个岗位的时候，我们只需要在&lt;code&gt;58&lt;/code&gt;行处修改岗位的名称即可，然后输入你要采集多少页的数据即可，这样很快就会将数据采集并且存储在Excel表中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200626200816903.png&#34; alt=&#34;image-20200626200816903&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据显示&#34;&gt;数据显示&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200626202639522.png&#34; alt=&#34;image-20200626202639522&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数据基本上完成采集，当然对于自己有需要的话，还可以继续完善啊，😆&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200628-%E6%9D%8F%E6%A0%91%E6%9E%97%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8B%9B%E8%81%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200628-%E6%9D%8F%E6%A0%91%E6%9E%97%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8B%9B%E8%81%98/</guid>
        <description>杏树林信息技术（北京）有限公司成立于2011年，是国内知名的互联网医疗企业。杏树林的初心是让医生行医更轻松，让医疗更高效，将“协和三宝”（图书馆、病案室、老教授</description>
        <content:encoded>&lt;p&gt;&lt;a href=&#34;https://xingshulin.com&#34; title=&#34;杏树林官网&#34;&gt;杏树林信息技术（北京）有限公司&lt;/a&gt;成立于2011年，是国内知名的互联网医疗企业。杏树林的初心是让医生行医更轻松，让医疗更高效，将“协和三宝”（图书馆、病案室、老教授）变成中国医生的三宝。旗下APP产品“病历夹”和“医口袋”，为医生提供专业内容和临床工具，用户覆盖37%的中国医生群体。公司被国际知名创业媒体Fast Company评为2015年全球最具创新力医疗企业，并先后获得蓝驰、真格、开物、双湖、健康元等机构的4轮投资。2016年起，杏树林率先打造了以病历为核心的一站式全场景医药营销云平台，致力于推动医药企业合规专业化营销转型，为医药产品提供基于病历的全场景营销服务，解决了医药企业合规、精准、有效学术营销的诉求。杏树林还成立了国内第一个“病历营销研究院”，总结病历营销的方法论和最佳实践，帮助医药企业落地基于病历营销的专业化转型。同时，通过杏树林互联网医院，已经形成了“患者招募-线上诊疗-送药上门-慢病管理”的闭环服务。截至当前，杏树林已经与中国市场上数十家领先医药工业、商业企业以及医疗器械企业达成长期业务合作，服务了一百多个医药产品。外资药企十强与国内工业十强超过半数是杏树林的客户。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200628152454590.png&#34; alt=&#34;image-20200628152454590&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;初级前端开发工程师8k-15k&#34;&gt;初级前端开发工程师(8k-15k)&lt;/h3&gt;
&lt;h4 id=&#34;岗位职责&#34;&gt;【岗位职责】&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;新业务功能开发和维护;&lt;/li&gt;
&lt;li&gt;负责定位并解决现有模块存在的问题;&lt;/li&gt;
&lt;li&gt;持续优化页面，保证网站的高性能和可维护性;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;任职要求&#34;&gt;【任职要求】&lt;/h4&gt;
&lt;p&gt;能力要求:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本科及以上学历，1 年以上互联网工作经验，可接受能力优秀的应届毕业生、在校实习 生;&lt;/li&gt;
&lt;li&gt;有代码洁癖，对新技术有热情，关注技术发展方向;&lt;/li&gt;
&lt;li&gt;极强的责任心，追求完美的习惯，刨根问底的精神;&lt;/li&gt;
&lt;li&gt;有团队精神，能够积极主动推动团队更好的发展;&lt;/li&gt;
&lt;li&gt;乐于技术的分享。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;技术要求&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;熟练掌握 HTML5/CSS3/JavaScript 相关技能;&lt;/li&gt;
&lt;li&gt;熟悉基本的计算机网络概念，熟悉 HTTP 协议，了解 TCP/IP 的基本工作原理，熟悉各 种 Web 标准规范;&lt;/li&gt;
&lt;li&gt;使用过至少一种 JS 框架，React 或 Vue 等;&lt;/li&gt;
&lt;li&gt;熟悉 hybird 开发，能解决跨浏览器和不同分辨率移动设备兼容性;&lt;/li&gt;
&lt;li&gt;熟悉前端自动化和工程化，使用过 Webpack 或 Gulp 等常见构建工具。&lt;/li&gt;
&lt;li&gt;熟悉 Node 开发，熟练使用 Git;&lt;/li&gt;
&lt;li&gt;有小程序开发经验者优先、有 github 开源项目者优先;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;中级前端开发工程师12k-25k&#34;&gt;&lt;strong&gt;中级前端开发工程师(12k-25k):&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;岗位要求&#34;&gt;【岗位要求】&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;新业务功能开发和维护;&lt;/li&gt;
&lt;li&gt;负责 Node 框架的性能优化和维护; 3、负责定位并解决现有模块存在的问题; 4、持续优化页面，保证网站的高性能和可维护性; 5、规范和文档的编写、维护。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;任职要求-1&#34;&gt;【任职要求】&lt;/h4&gt;
&lt;p&gt;能力要求:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本科以上，2 年以上互联网工作经验;&lt;/li&gt;
&lt;li&gt;能够发现团队里的问题，提出方案，并落地;&lt;/li&gt;
&lt;li&gt;有代码洁癖，技术全面，对新技术有热情，关注技术发展方向;&lt;/li&gt;
&lt;li&gt;极强的责任心，追求完美的习惯，刨根问底的精神;&lt;/li&gt;
&lt;li&gt;有团队精神，能够积极主动推动团队更好的发展;&lt;/li&gt;
&lt;li&gt;乐于技术的分享。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;技术要求:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;2 年以上 Web 前端工作经验，熟练掌握 HTML5/CSS3/JavaScript 相关技能;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;熟悉基本的计算机网络概念，熟悉 HTTP 协议，了解 TCP/IP 的基本工作原理，熟悉各 种 Web 标准规范;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;熟练使用至少一种 JS 框架，React 或 Vue 等，掌握其原理，能独立开发常用组件;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;熟悉 hybird 开发，能解决跨浏览器和不同分辨率移动设备兼容性;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;熟悉前端自动化和工程化，对 Webpack、Gulp 等常见构建工具有自己的认知与理解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;熟悉 Node 开发，熟练使用 Git;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有小程序开发经验者优先、有 github 开源项目者优先;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;高级前端开发工程师20k-35k&#34;&gt;&lt;strong&gt;高级前端开发工程师(20k-35k)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;【岗位职责】&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新业务功能开发和维护;&lt;/li&gt;
&lt;li&gt;负责框架的性能优化和维护;&lt;/li&gt;
&lt;li&gt;负责定位并解决现有模块存在的问题;&lt;/li&gt;
&lt;li&gt;持续优化页面，保证功能的高性能和可维护性;&lt;/li&gt;
&lt;li&gt;规范和文档的编写、维护;&lt;/li&gt;
&lt;li&gt;参与团队的技术沉淀、与团队一起成长。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;任职要求-2&#34;&gt;【任职要求】&lt;/h4&gt;
&lt;p&gt;技术要求:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;精通 CSS 、JavaScript 等前端技术;&lt;/li&gt;
&lt;li&gt;熟悉基本的计算机网络概念，熟悉 HTTP 协议，了解 TCP/IP 的基本工作原理，熟悉各种 Web 标准规范;&lt;/li&gt;
&lt;li&gt;使用过 React 或 Vue 等前端框架，掌握其原理，能独立开发常用组件;&lt;/li&gt;
&lt;li&gt;对前端开发生态中的知识有基本了解(自动化构建、组件化、性能、安全等);&lt;/li&gt;
&lt;li&gt;对中后台业务组件化开发有充分理解和实践;&lt;/li&gt;
&lt;li&gt;对 web 开发场景常用的服务端、运维领域的相关技术有一定了解; 7、有服务端开发经验、其他语言经验优先。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;能力要求:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本科及以上学历，5 年及以上 Web 前端工作经验;&lt;/li&gt;
&lt;li&gt;能够发现团队里的问题，提出方案，并落地;&lt;/li&gt;
&lt;li&gt;有代码洁癖，技术全面，对新技术有热情，关注技术发展方向;&lt;/li&gt;
&lt;li&gt;极强的责任心，追求完美的习惯，刨根问底的精神;&lt;/li&gt;
&lt;li&gt;有团队精神，能够积极主动推动团队更好的发展;&lt;/li&gt;
&lt;li&gt;良好的沟通协调能力，在团队中能够扮演一定的技术管理能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;员工福利&#34;&gt;员工福利&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;健康：提供全科医生问诊服务及定制化年度体检，全方位解决员工及家属的各级医疗需求，为员工及家人健康保驾护航。&lt;/li&gt;
&lt;li&gt;激励：有吸引力的业绩奖励，每年&lt;code&gt;2&lt;/code&gt;次调薪机会。&lt;/li&gt;
&lt;li&gt;保险：&lt;code&gt;六险一金&lt;/code&gt;（养老保险、医疗保险、工伤保险、失业保险、生育保险、住房公积金及补充医疗保险）&lt;/li&gt;
&lt;li&gt;活动：团建经费、各种俱乐部：羽毛球、足球、篮球、游泳、滑雪、骑行等。&lt;/li&gt;
&lt;li&gt;关怀：从心到身的全面关怀，读书分享、内部培训、餐补、下午茶饮料、水果零食、按摩椅等&lt;/li&gt;
&lt;li&gt;其他：技术分享、免费的下午茶饮料等&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;加入我们&#34;&gt;加入我们&lt;/h3&gt;
&lt;p&gt;如果您对以上的岗位感兴趣，您可以扫描以下的二维码加我，直接将您的建立送达HR处。&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200629-kubernetes%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200629-kubernetes%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/</guid>
        <description>kuboard Kuboard 是一款免费的 Kubernetes 管理工具，提供了丰富的功能，结合已有或新建的代码仓库、镜像仓库、CI/CD工具等，可以便捷的搭建一个生产可用的 Kubernetes 容器云平台，轻松管理和运行云原</description>
        <content:encoded>&lt;h3 id=&#34;kuboard&#34;&gt;kuboard&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://kuboard.cn/&#34; title=&#34;kuboard&#34;&gt;Kuboard&lt;/a&gt; 是一款免费的 Kubernetes 管理工具，提供了丰富的功能，结合已有或新建的代码仓库、镜像仓库、CI/CD工具等，可以便捷的搭建一个生产可用的 Kubernetes 容器云平台，轻松管理和运行云原生应用。您也可以直接将 Kuboard 安装到现有的 Kubernetes 集群，通过 Kuboard 提供的 Kubernetes RBAC 管理界面，将 Kubernetes 提供的能力开放给您的开发团队。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200629140957438.png&#34; alt=&#34;image-20200629140957438&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Kuboard 提供的功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 基本管理功能
&lt;ul&gt;
&lt;li&gt;节点管理&lt;/li&gt;
&lt;li&gt;名称空间管理&lt;/li&gt;
&lt;li&gt;存储类/存储卷管理&lt;/li&gt;
&lt;li&gt;控制器（Deployment/StatefulSet/DaemonSet/CronJob/Job/ReplicaSet）管理&lt;/li&gt;
&lt;li&gt;Service/Ingress 管理&lt;/li&gt;
&lt;li&gt;ConfigMap/Secret 管理&lt;/li&gt;
&lt;li&gt;CustomerResourceDefinition 管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kubernetes 问题诊断
&lt;ul&gt;
&lt;li&gt;Top Nodes / Top Pods&lt;/li&gt;
&lt;li&gt;事件列表及通知&lt;/li&gt;
&lt;li&gt;容器日志及终端&lt;/li&gt;
&lt;li&gt;KuboardProxy (kubectl proxy 的在线版本)&lt;/li&gt;
&lt;li&gt;PortForward (kubectl port-forward 的快捷版本)&lt;/li&gt;
&lt;li&gt;复制文件 （kubectl cp 的在线版本）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;认证与授权
&lt;ul&gt;
&lt;li&gt;Github/GitLab 单点登录&lt;/li&gt;
&lt;li&gt;KeyCloak 认证&lt;/li&gt;
&lt;li&gt;LDAP 认证&lt;/li&gt;
&lt;li&gt;完整的 RBAC 权限管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kuboard 特色功能
&lt;ul&gt;
&lt;li&gt;Kuboard 官方套件
&lt;ul&gt;
&lt;li&gt;Grafana+Prometheus 资源监控&lt;/li&gt;
&lt;li&gt;Grafana+Loki+Promtail 日志聚合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kuboard 自定义名称空间布局&lt;/li&gt;
&lt;li&gt;Kuboard 中英文语言包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lens&#34;&gt;Lens&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://k8slens.dev/&#34; title=&#34;Lens&#34;&gt;lens&lt;/a&gt;是一个免费、开源的可以控制多kubernetes集群的IDE工具，如下图，左侧图标显示的是不同的Kubernetes集群，在此IDE上，可以可视化交互式的快速查看集群状态、每个资源对象的运行状态等。IDE支持&lt;code&gt;Mac&lt;/code&gt;、&lt;code&gt;windows&lt;/code&gt;和&lt;code&gt;Linux&lt;/code&gt;操作系统，可以直接在&lt;a href=&#34;https://github.com/lensapp/lens/releases/tag/v3.5.0&#34; title=&#34;lens-github&#34;&gt;Github&lt;/a&gt;上下载。下面看一下lens这款IDE支持的详细的功能：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/header-lens.png&#34; alt=&#34;alternative&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubernetes IDE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于需要每天处理Kubernetes集群的人来说，Lens是功能最强大的IDE。它是适用于MacOS，Windows和Linux操作系统的独立应用程序。确保正确设置和配置了群集。享受增强的可见性，实时统计信息，日志流和动手故障排除功能。借助Lens，您可以更轻松，更快速地使用集群，从而从根本上提高生产力和业务速度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多集群管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以从一个统一的IDE放心地访问和使用群集。Lens可与任意数量的Kubernetes集群一起使用。使用内置的kubectl来执行Kubernetes RBAC，从而可以访问集群。群集可以是本地群集（例如，迷你库），也可以是外部群集（例如，EKS，AKS，GKE，Pharos，UCP，Rancher或OpenShift）。只需导入带有集群详细信息的kubeconfig即可添加集群。添加后，可以轻松地在集群之间进行切换。使用Lens，您将为所有群集获得一个统一的IDE！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多工作区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将集群组织成逻辑组。工作区用于将多个群集组织成逻辑组。对于需要处理多个（甚至数百个）群集的DevOps和SRE，它们非常有用。单个工作空间包含集群及其完整配置的列表。创建和在工作空间之间切换很容易。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内置普罗米修斯统计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看作为仪表板一部分集成的所有相关图形和资源利用率图表。Lens带有内置的多租户Prometheus设置，该设置将尊重每个用户的RBAC。用户将看到他们有权访问的所有名称空间和资源的可视化。所有图形和资源利用率图表的设计均易于访问，并且在适当的上下文中均可使用，无论您操作的是仪表板的哪一部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上下文终端感应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内置终端随附了kubectl，该API始终在正确的上下文中与您的集群兼容。Lens内置终端将确保Kubernetes集群API的版本与kubectl的版本兼容。它会即时下载并分配正确的版本，因此您不必这样做。通过切换kubectl上下文以匹配您当前使用的集群，它也将使您高枕无忧。&lt;/p&gt;
&lt;h3 id=&#34;kubesphere&#34;&gt;KubeSphere&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200629143619888.png&#34; alt=&#34;image-20200629143619888&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kubesphere.com.cn/docs/zh-CN/&#34; title=&#34;KubeSphere&#34;&gt;KubeSphere&lt;/a&gt; 是在 &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; 之上构建的&lt;strong&gt;以应用为中心&lt;/strong&gt;的&lt;strong&gt;企业级分布式容器平台&lt;/strong&gt;，提供简单易用的操作界面以及向导式操作方式，在降低用户使用容器调度平台学习成本的同时，极大减轻开发、测试、运维的日常工作的复杂度，旨在解决 Kubernetes 本身存在的存储、网络、安全和易用性等痛点。除此之外，平台已经整合并优化了多个适用于容器场景的功能模块，以完整的解决方案帮助企业轻松应对&lt;strong&gt;敏捷开发与自动化运维、DevOps、微服务治理、灰度发布、多租户管理、工作负载和集群管理、监控告警、日志查询与收集、服务与网络、应用商店、镜像构建与镜像仓库管理和存储管理&lt;/strong&gt;等多种业务场景。后续版本还将提供和支持&lt;strong&gt;多集群管理、大数据、人工智能&lt;/strong&gt;等更为复杂的业务场景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200629143530958.png&#34; alt=&#34;image-20200629143530958&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因为功能齐全，显得用起来相对很笨重，kubesphere支持在线和离线安装，如果想要体验，可以先最小化安装一下试试，kubesphere还有devops，logging，service mesh，告警通知等可以按需尝试体验。&lt;/p&gt;
&lt;h3 id=&#34;wayne&#34;&gt;Wayne&lt;/h3&gt;
&lt;p&gt;是360开源的一个通用的、基于 Web 的 &lt;strong&gt;&lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; 多集群管理平台&lt;/strong&gt;。通过可视化 Kubernetes 对象模板编辑的方式，降低业务接入成本， 拥有完整的权限管理系统，适应多租户场景，是一款适合企业级集群使用的&lt;strong&gt;发布平台&lt;/strong&gt;。Wayne已大规模服务于360搜索，承载了内部绝大部分业务，稳定管理了近千个业务，上万个容器，运行了两年多时间，经受住了生产的考验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/640-3413651.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;wayne的功能特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视化操作：提供直观、简便的方式操作 Kubernetes 集群，减小学习成本，快速上线业务。&lt;/li&gt;
&lt;li&gt;多样的编辑模式：支持图形化编辑，也支持 Json、Yaml 两种高级定制化编辑模式。&lt;/li&gt;
&lt;li&gt;微内核架构：采用可扩展的插件化方式开发，定制化选择特性功能，更方便的集成符合企业需求的新功能。&lt;/li&gt;
&lt;li&gt;多集群管理：可以同时管理多个 Kubernetes 集群，更方便的管理多个集群。&lt;/li&gt;
&lt;li&gt;丰富的权限管理：将资源抽象化为部门、项目级别，角色的权限可以更细化的控制，适用于多部门、多项目的统一集中管理。&lt;/li&gt;
&lt;li&gt;多种登录模式：支持企业级 LDAP 登录、支持 OAuth2 登录，支持数据库登录多种模式。&lt;/li&gt;
&lt;li&gt;完备的审计：所有操作都会有完整的审计功能，方便追踪操作历史。&lt;/li&gt;
&lt;li&gt;开放平台：支持 APIKey 开放平台，用户可自主申请相关 APIKey 并管理自己的项目。&lt;/li&gt;
&lt;li&gt;多层次监控：提供多级别的监控统计信息，实时关注集群的运行状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kubernetes-dashbaord&#34;&gt;Kubernetes Dashbaord&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/dashboard&#34; title=&#34;kubernetes dashboard&#34;&gt;Kubernetes仪表板&lt;/a&gt;是Kubernetes集群的基于Web的通用UI。它允许用户管理群集中运行的应用程序并对其进行故障排除，以及管理群集本身。如果想要正常的显示资源的使用情况，需要kubernetes集群中有&lt;a href=&#34;https://mp.weixin.qq.com/s/hlOBpQ6mfkiUBmRQzdUjvg&#34;&gt;metrics-server&lt;/a&gt;，并且原生态的Kubernetes Dashboard不支持其他第三方认证&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/dashboard-ui.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200629-yaml%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E5%AD%A6%E4%B9%A0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200629-yaml%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%E5%AD%A6%E4%B9%A0/</guid>
        <description>Yaml基础语法与技巧 字符支持：YAML支持Unicode字符集，可以使用UTF-8、UTF-16、UTF-32字符集 1 2 3 4 5 6 date:2020-06-28info:- name:Marionxuetags:- num:1- descript:&amp;#34;writing somthing here&amp;#34; 缩进：YAML中缩</description>
        <content:encoded>&lt;h3 id=&#34;yaml基础语法与技巧&#34;&gt;Yaml基础语法与技巧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;字符支持：YAML支持Unicode字符集，可以使用UTF-8、UTF-16、UTF-32字符集&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2020-06-28&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Marionxue&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;descript&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;writing somthing here&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;　
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;缩进：YAML中缩进是非常重要的规范，不支持Tab，支持空格，没有严格要求空格个数，但是需要确保同一层次的左侧对齐&lt;/li&gt;
&lt;li&gt;单行注释：单行注释使用&lt;code&gt;#&lt;/code&gt;进行标记，可以在单行的任何位置开始注释的内容&lt;/li&gt;
&lt;li&gt;多行注释：不提供特殊的多行注释，使用多行行首的单行注释#实现多行注释的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span class=&#34;k&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 下面是两个空格，然后一个短横线&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Marionxue&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;基本数据类型：支持&lt;code&gt;整型&lt;/code&gt;、&lt;code&gt;浮点型&lt;/code&gt;、&lt;code&gt;时间戳类型&lt;/code&gt;、&lt;code&gt;Null&lt;/code&gt;等基本数据类型&lt;/li&gt;
&lt;li&gt;组合数据类型：支持&lt;code&gt;键/值&lt;/code&gt;方式和&lt;code&gt;列表&lt;/code&gt;类型，并可进行&lt;code&gt;嵌套组合&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;键/值方式：使用冒号&lt;code&gt;:&lt;/code&gt;进行分隔，也可使用&lt;code&gt;{}&lt;/code&gt;结合逗号进行表达&lt;/li&gt;
&lt;li&gt;列表类型：使用横线&lt;code&gt;-&lt;/code&gt;进行分隔，也可使用&lt;code&gt;[]&lt;/code&gt;结合&lt;code&gt;逗号&lt;/code&gt;进行表达&lt;/li&gt;
&lt;li&gt;开始符号: &lt;code&gt;---&lt;/code&gt;用于表示开始的符号，在一个文件中包含多个YAML设定的时候使用非常常见。&lt;/li&gt;
&lt;li&gt;结束符号：&lt;code&gt;…&lt;/code&gt;用于表示yaml文件结束&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# start&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;blue&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;red&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;green&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;Age&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;Bag&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;k&#34;&gt;osc:www.oschina.net, baidu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;www.baidu.com}&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# key/value list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;describle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;|
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;		Hi,all:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;		    &lt;/span&gt;my&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;name&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;is&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;xxx.&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;k&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;&amp;gt; 
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;		fmt.Println(&amp;#34;姓名: %s&amp;#34;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;		 &lt;/span&gt;name)&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单引号与双引号：字符串类型可以不使用单引号和双引号，使用单引号和双引号与不使用的时候在特殊字符及其转义的时候有些细微的区别，可用倒斜线**（\）**进行特殊字符转义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;区块的字串用缩排和修饰词（非必要）来和其他资料分隔，有新行保留（使用符号|）或新行折叠（使用符号&amp;gt;）两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt;表示保留区块中的回车换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;表示将区块中的回车换行替换为空行，最终连成一行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;强制类型转换：可以使用&lt;code&gt;!!&lt;/code&gt;用于强制类型转换&lt;br /&gt;
重复性内容：可以使用锚点标记&amp;amp;和应用标记*结合使用可以处理重复性的内容&lt;br /&gt;
保留字符：@和`为当前YAML规格的保留字符&lt;br /&gt;
较长的描绘性说明：使用|与&amp;gt;以及&amp;gt;-来处理常见的对于较长的描绘性说明的要求&lt;br /&gt;
空白字符限制：在使用逗号及冒号时，后须接一个空白字符&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;YAML使用可打印的Unicode字符，可使用UTF-8或UTF-16&lt;/li&gt;
&lt;li&gt;使用空白字符**（不能使用Tab）**分层，同层元素左侧对齐&lt;/li&gt;
&lt;li&gt;单行注解由井字号**（ # ）**开始，可以出现在行中任何位置&lt;/li&gt;
&lt;li&gt;每个清单成员以单行表示，并用短杠+空白**（- ）**起始&lt;/li&gt;
&lt;li&gt;每个杂凑表的成员用冒号+空白**（: ）**分开键和值&lt;/li&gt;
&lt;li&gt;杂凑表的键值可以用问号 **(?)**起始，表示多个词汇组成的键值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字串一般不使用引号&lt;/strong&gt;，但必要的时候可以用引号框住&lt;/li&gt;
&lt;li&gt;使用双引号表示字串时，可用倒斜线**（\）**进行特殊字符转义&lt;/li&gt;
&lt;li&gt;区块的字串用缩排和修饰词（非必要）来和其他资料分隔，有新行保留（使用符号|）或新行折叠（使用符号&amp;gt;）两种方式&lt;/li&gt;
&lt;li&gt;在单一档案中，可用连续三个连字号（&amp;mdash;）区分多个档案&lt;/li&gt;
&lt;li&gt;可选择性的连续三个点号（&amp;hellip;）用来表示档案结尾(在流式传输时非常有用，不需要关闭流即可知道到达结尾处)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重复的内容可使从参考标记星号 (*)复制到锚点标记（&amp;amp;）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指定格式可以使用两个惊叹号 ( !! )&lt;/strong&gt;，后面接上名称&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200630-linux%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E9%94%A6%E5%9B%8A/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200630-linux%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E9%94%A6%E5%9B%8A/</guid>
        <description>日志类查看 1 dmesg -T</description>
        <content:encoded>&lt;h3 id=&#34;日志类查看&#34;&gt;日志类查看&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dmesg -T
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200701-%E7%99%BE%E5%BA%A6%E5%BC%80%E6%BA%90bfe%E8%A2%ABcncf%E6%8E%A5%E7%BA%B3%E4%B8%BAsandbox-project/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200701-%E7%99%BE%E5%BA%A6%E5%BC%80%E6%BA%90bfe%E8%A2%ABcncf%E6%8E%A5%E7%BA%B3%E4%B8%BAsandbox-project/</guid>
        <description>2020年6月24日，BFE开源项目被CNCF （Cloud Native Computing Foundation，云原生计算基金会）正式接纳为Sandbox Project。这是百度第一个被C</description>
        <content:encoded>&lt;p&gt;2020年6月24日，&lt;a href=&#34;https://www.bfe-networks.net/zh_cn/&#34; title=&#34;BFE官网&#34;&gt;BFE&lt;/a&gt;开源项目被&lt;a href=&#34;https://www.cncf.io/&#34; title=&#34;CNCF官网&#34;&gt;CNCF&lt;/a&gt; （Cloud Native Computing Foundation，云原生计算基金会）正式接纳为&lt;a href=&#34;https://www.cncf.io/sandbox-projects/&#34; title=&#34;Sandbox&#34;&gt;Sandbox Project&lt;/a&gt;。这是百度第一个被CNCF接纳的开源项目，也是在网络方向上中国第一个被CNCF接纳的开源项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/090818_YYY6_2720166-20200701121603027.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;BFE原名为Baidu Front End（百度统一前端），是百度的统一七层流量转发平台。BFE平台目前已接入百度大部分流量，每日转发请求接近1万亿，峰值QPS超过1000万。在2019年百度春晚红包活动中，BFE平台在超大用户压力、数次流量波峰下平稳运行，保证了春晚红包活动的顺利进行。&lt;/p&gt;
&lt;p&gt;作为综合的流量转发平台，BFE平台集成了以下4大功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量接入和转发：支持HTTP、HTTPS、HTTP/2、&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9FUDP%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5&#34; title=&#34;QUIC&#34;&gt;QUIC&lt;/a&gt;等多种协议，并支持强大的应用层路由能力&lt;/li&gt;
&lt;li&gt;流量全局调度：支持由外网流量调度和内网流量调度共同构成的全局流量调度系统&lt;/li&gt;
&lt;li&gt;安全和防攻击：支持黑名单封禁、精细限流和应用层防火墙（WAF）等多种防攻击能力&lt;/li&gt;
&lt;li&gt;实时数据分析：支持分钟级的超高维度时序报表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为BFE平台的核心组件，BFE转发引擎从2012年开始研发，并于2014年使用Go语言完成重构。由于基于Go语言，和业界普遍使用的Nginx开源软件相比，BFE具有以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;研发效率高：Go语言的开发效率远高于C语言（及Lua），在代码的可维护性方面也有巨大优势。&lt;/li&gt;
&lt;li&gt;系统的安全和稳定性高：Go语言没有C语言固有的缓冲区溢出隐患，规避了大量的稳定性和安全风险；另外对于异常可以捕捉，保证程序在快速迭代上线的情况下也不崩溃。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有理由相信，从长期趋势看，基于更高级编程语言的软件系统会逐步取得竞争的优势。&lt;/p&gt;
&lt;p&gt;CPU等硬件资源的价格仍会快速下降，而开发人力成本、项目研发风险、系统稳定性/安全性方面会成为更重要的决策考虑。从这方面出发，主要基于C语言的Nginx会逐步衰落，而类似BFE这样的基于更高级编程语言的软件会逐步成为主流。&lt;/p&gt;
&lt;p&gt;另外，BFE在设计中，还特别增加了企业级应用场景的考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转发场景的直接支持：和Nginx这样从Web Server转型为Proxy的进化路径不同，BFE直接为转发场景设计，从转发模型和转发配置方面更满足转发场景的需求&lt;/li&gt;
&lt;li&gt;多租户的支持：在云计算的场景下，多租户复用是普遍的需求。在BFE的设计中，内置提供了多租户的支持。&lt;/li&gt;
&lt;li&gt;结构化的配置：BFE的配置设计，大量使用JSON这样的结构化方式，便于和相关配置管理系统对接&lt;/li&gt;
&lt;li&gt;丰富的监控探针：作为一个工业级软件，在BFE的设计中充分考虑了线上监控的需求，BFE程序通过HTTP方式向外暴露数千个内部状态变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了促进负载均衡技术的交流和发展，BFE的转发引擎于2019年7月正式开源，并获得了广泛的关注。2019年11月19日，BFE开源项目登上GitHub Trending Top 3。2019年12月，BFE开源项目的Github stars超过3000。&lt;/p&gt;
&lt;p&gt;BFE开源支持以下重要能力：&lt;/p&gt;
&lt;p&gt;1、主流网络协议接入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持HTTP/HTTPS/SPDY/HTTP2/WebSocket等&lt;/li&gt;
&lt;li&gt;支持TLS/HTTP/ WebSocket反向代理模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、可扩展插件框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过可扩展插件框架，快速定制开发扩展模块，满足业务定制化需求&lt;/li&gt;
&lt;li&gt;内置重写、重定向、流量修改、封禁等丰富插件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、基于请求内容的分流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于领域专有语言的分流规则，满足复杂业务场景定制化流量转发&lt;/li&gt;
&lt;li&gt;支持完备的分流条件原语集，包括基于请求内容（URI/Header/Cookie等）以及请求上下文（IP、协议、标签、时间等）的条件原语。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、灵活的负载均衡策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持集群级别负载均衡及实例级别负载均衡，实现多可用区容灾及过载保护&lt;/li&gt;
&lt;li&gt;内置加权轮询、加权最小连接数策略，基于IP或请求内容识别用户实现会话保持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CNCF是云计算领域全球顶级的开源社区。BFE开源项目在2020年启动了加入CNCF的申请工作。经过一系列的准备工作，于2020年6月18日通过CNCF SIG-NETWORK的答辩，并在不到一周内收到了被CNCF TOC接受的通知。在加入CNCF后，BFE将改名为Beyond Front End。&lt;/p&gt;
&lt;p&gt;BFE开源技术已在百度内被HTTPDNS、云加速、BML等产品使用，并将和百度的云原生产品进一步深入结合。BFE商用产品已经被度小满、央视网等客户选用，并已经在多个客户进行了测试验证。BFE将进一步扩大开源范围，加强开源生态的建设，并基于开源建立百度负载均衡的商业生态。&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200703-etcd%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%AE%9E%E8%B7%B5%E7%AF%87/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200703-etcd%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%AE%9E%E8%B7%B5%E7%AF%87/</guid>
        <description>Etcd集群的部署实践 我们准备三台机器，分别在这三台机器上安装部署etcd 1 2 wget https://github.com/etcd-io/etcd/releases/download/v3.4.9/etcd-v3.4.9-linux-amd64.tar.gz 在每个节点的机器上执行一下环境设定 1 2 3 4 5 6 7 8 9 TOKEN=token-01 CLUSTER_STATE=new NAME_1=machine-1 NAME_2=machine-2 NAME_3=machine-3 HOST_1=10.240.0.17 HOST_2=10.240.0.18 HOST_3=10.240.0.19 CLUSTER=${NAME_1}=http://${HOST_1}:2380,${NAME_2}=http://${HOST_2}:2380,${NAME_3}=http://${HOST_3}:2380</description>
        <content:encoded>&lt;h3 id=&#34;etcd集群的部署实践&#34;&gt;Etcd集群的部署实践&lt;/h3&gt;
&lt;p&gt;我们准备三台机器，分别在这三台机器上安装部署etcd&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget https://github.com/etcd-io/etcd/releases/download/v3.4.9/etcd-v3.4.9-linux-amd64.tar.gz

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在每个节点的机器上执行一下环境设定&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;TOKEN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;token-01
&lt;span class=&#34;nv&#34;&gt;CLUSTER_STATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;new
&lt;span class=&#34;nv&#34;&gt;NAME_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;machine-1
&lt;span class=&#34;nv&#34;&gt;NAME_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;machine-2
&lt;span class=&#34;nv&#34;&gt;NAME_3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;machine-3
&lt;span class=&#34;nv&#34;&gt;HOST_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.240.0.17
&lt;span class=&#34;nv&#34;&gt;HOST_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.240.0.18
&lt;span class=&#34;nv&#34;&gt;HOST_3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.240.0.19
&lt;span class=&#34;nv&#34;&gt;CLUSTER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NAME_1&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HOST_1&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:2380,&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NAME_2&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HOST_2&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:2380,&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NAME_3&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HOST_3&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:2380
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200704-%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9Acpu%E6%B6%88%E8%80%97%E5%9C%A8%E5%93%AA%E4%BA%9B%E5%87%BD%E6%95%B0%E4%B8%8A/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200704-%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9Acpu%E6%B6%88%E8%80%97%E5%9C%A8%E5%93%AA%E4%BA%9B%E5%87%BD%E6%95%B0%E4%B8%8A/</guid>
        <description>文章背景 日常的工作中，会收到一堆CPU使用率过高的告警邮件，遇到某台服务的CPU被占满了，这时候我们就要去查看是什么进程将服务器的CPU资源占用满了。通常我们会</description>
        <content:encoded>&lt;h2 id=&#34;文章背景&#34;&gt;文章背景&lt;/h2&gt;
&lt;p&gt;日常的工作中，会收到一堆CPU使用率过高的告警邮件，遇到某台服务的&lt;code&gt;CPU被占满了&lt;/code&gt;，这时候我们就要去查看是什么进程将服务器的CPU资源占用满了。通常我们会通过&lt;code&gt;top&lt;/code&gt;或者&lt;code&gt;htop&lt;/code&gt;来快速的查看占据CPU最高的那个进程，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200704183558634.png&#34; alt=&#34;image-20200704183558634&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里是通过一个普通的服务器做演示使用，如图所示当前服务器占用CPU最高的是一个叫做&lt;code&gt;kube-apiserver&lt;/code&gt;命令运行的一个进程，该进程的PID为&lt;code&gt;25633&lt;/code&gt;,当然你可能遇到一个服务器上运行有多个服务，想快速知道占用率最高的那几个进程的话，你可以使用以下命令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ps aux&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;head -1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;ps -aux &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -k3nr &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head -n &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; //查看前10个最占用CPU的进程
ps aux&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;head -1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;ps -aux &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -k4nr &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head -n &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; //查看前10个最占用内存的进程
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是通过以上的方法获取到服务器占用资源的进程之后，还是&lt;code&gt;不知道CPU使用究竟耗时在哪里&lt;/code&gt;,不清楚瓶颈在哪里，此时就可以通过&lt;code&gt;Linux&lt;/code&gt;系统的性能分析工具&lt;code&gt;perf&lt;/code&gt;分析，分析其返回的正在消耗CPU的函数以及调用栈。然后可以通过解析&lt;code&gt;perf&lt;/code&gt;采集的数据，渲染到火焰图🔥，就清楚的知道究竟占用系统CPU资源的罪魁祸首了。&lt;/p&gt;
&lt;p&gt;在制作火焰图之前，需要先来说说这个Linux性能分析工具&lt;code&gt;perf&lt;/code&gt;,该工具是一个相对简单易上手的性能分析工具，是&lt;code&gt;Performance&lt;/code&gt;单词的缩写，通过其&lt;code&gt;perf&lt;/code&gt;的命令选项完成系统事件的采集到解析，我们来简单的认识一下：&lt;/p&gt;
&lt;h2 id=&#34;linux上的性能分析工具perf&#34;&gt;linux上的性能分析工具&lt;code&gt;Perf&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;安装perf&#34;&gt;安装&lt;code&gt;perf&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;我目前的服务器发行版是&lt;code&gt;Ubuntu 16.04.6 LTS&lt;/code&gt;因此需要先安装perf才能使用，该工具由&lt;code&gt;linux-tools-common&lt;/code&gt;提供，但是它需要安装后面的依赖。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#安装&lt;/span&gt;
root@master:~# apt install linux-tools-common linux-tools-4.4.0-142-generic linux-cloud-tools-4.4.0-142-generic -y

root@master:~# perf -v &lt;span class=&#34;c1&#34;&gt;#显示perf的版本&lt;/span&gt;
perf version 4.4.167
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在安装完成时候，我们就可以对上图CPU使用率最高的进程ID为&lt;code&gt;25633&lt;/code&gt;的进程进行采样分析。&lt;/p&gt;
&lt;p&gt;首选我们采集一下该进程的&lt;code&gt;调用栈&lt;/code&gt;信息:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~# sudo perf record -F &lt;span class=&#34;m&#34;&gt;99&lt;/span&gt; -p &lt;span class=&#34;m&#34;&gt;25633&lt;/span&gt; -g -- sleep &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; perf record: Woken up &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; to write data &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; perf record: Captured and wrote 0.039 MB perf.data &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;120&lt;/span&gt; samples&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个命令会产生一个大的数据文件，取决与你采集的进程与CPU的配置，如果一台服务器有16个 CPU，每秒抽样99次，持续30秒，就得到 47,520 个调用栈，长达几十万甚至上百万行。上面的命令中，&lt;code&gt;perf record&lt;/code&gt;表示记录，&lt;code&gt;-F 99&lt;/code&gt;表示每秒99次，&lt;code&gt;-p 25633&lt;/code&gt;是进程号，即对哪个进程进行分析，&lt;code&gt;-g&lt;/code&gt;表示记录调用栈，&lt;code&gt;sleep 30&lt;/code&gt;则是持续30秒，参数信息可以视情况调整。生成的数据采集文件在当前目录下，名称为&lt;code&gt;perf.data&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;perf record&lt;/code&gt;命令可以从高到低排列统计每个调用栈出现的百分比，显示结果如下图所示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~# sudo perf report -n --stdio
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images.assets/image-20200704190236668.png&#34; alt=&#34;image-20200704190236668&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样的效果对使用者来说还是不那么直观易读，这时候，火焰🔥图也就真正的派上用途了。&lt;/p&gt;
&lt;h2 id=&#34;制作火焰图&#34;&gt;制作火焰🔥图&lt;/h2&gt;
&lt;p&gt;火焰🔥图并非一定就是火焰系列的颜色主题，只是通过🔥色系更能表达出含义。火焰图常见的类型有 &lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html&#34; title=&#34;On-CPU&#34;&gt;On-CPU&lt;/a&gt;, &lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/offcpuflamegraphs.html&#34; title=&#34;Off-CPU&#34;&gt;Off-CPU&lt;/a&gt;, 还有 &lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html&#34; title=&#34;Memory&#34;&gt;Memory&lt;/a&gt;, &lt;a href=&#34;http://www.brendangregg.com/FlameGraphs/hotcoldflamegraphs.html&#34; title=&#34;Hot/Cold&#34;&gt;Hot/Cold&lt;/a&gt;, [&lt;code&gt;Differential](http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html &amp;quot;Differential&amp;quot;) 等等. &lt;/code&gt;on-CPU/off-cpu`的区别就是一个是用于CPU是性能瓶颈，一个是IO是性能瓶颈，当你不知道当前的服务器的性能瓶颈究竟是什么的时候，你可以使用这两种类型进行对比，通过两种火焰图的差别是比较大的，如果两张火焰图长得差不多, 那么通常认为CPU被其它进程抢占了.&lt;/p&gt;
&lt;p&gt;另外一种情况就是如果无法确定当前的系统瓶颈, 可以通过压测工具来确认 : 通过压测工具看看能否让CPU使用率趋于饱和, 如果能那么使用 &lt;code&gt;On-CPU&lt;/code&gt; 火焰图, 如果不管怎么压, CPU 使用率始终上不来, 那么多半说明程序被 &lt;code&gt;IO&lt;/code&gt; 或锁卡住了, 此时适合使用 &lt;code&gt;Off-CPU&lt;/code&gt; 火焰图. 你可以通过压测工具进行测试，目前比较常用的就是&lt;code&gt;ab&lt;/code&gt;和&lt;code&gt;wrk&lt;/code&gt;，我建议尝试使用诸如 &lt;a href=&#34;https://github.com/wg/wrk&#34; title=&#34;wrk&#34;&gt;wrk&lt;/a&gt; 之类更现代的压测工具.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果选择 &lt;code&gt;ab&lt;/code&gt; 的话, 那么务必记得开启 &lt;code&gt;-k&lt;/code&gt; 选项, 以避免耗尽系统的可用端口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Github上有&lt;code&gt;Brendan D. Gregg&lt;/code&gt; 的 &lt;code&gt;Flame Graph&lt;/code&gt; 工程实现了一套生成火焰图的脚本.我们可以直接克隆下来直接用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone https://github.com/brendangregg/FlameGraph.git
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;生成火焰🔥图，我们一般都遵循以下流程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200704192051139.png&#34; alt=&#34;image-20200704192051139&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;捕获堆栈&lt;/code&gt;: 使用&lt;code&gt;perf&lt;/code&gt;捕捉进程运行堆栈信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;折叠堆栈&lt;/code&gt;: 对抓取的系统和程序运行每一时刻的堆栈信息进行分析组合, 将重复的堆栈累计在一起, 从而体现出负载和关键路径，通过&lt;code&gt;stackcollapse&lt;/code&gt;脚本完成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;生成火焰图&lt;/code&gt;：分析 stackcollapse 输出的堆栈信息渲染成火焰图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Flame Graph&lt;/code&gt;中提供了抓取不同信息的脚本，可以按需使用。下面我们需要对捕获到的进程堆栈信息&lt;code&gt;perf.data&lt;/code&gt;进行折叠，生成折叠的堆栈信息:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~# perf script -i /root/perf.data &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&amp;gt; /root/perf.unfold
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;用 &lt;code&gt;stackcollapse-perf.pl&lt;/code&gt; 将 perf 解析出的内容 &lt;code&gt;perf.unfold&lt;/code&gt; 中的符号进行折叠&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~/FlameGraph# ls
aix-perf.pl    docs                        example-perf.svg  pkgsplit-perf.pl  stackcollapse-aix.pl       stackcollapse-go.pl               stackcollapse-ljp.awk         stackcollapse-pmc.pl        stackcollapse-vsprof.pl   test.sh
demos          example-dtrace-stacks.txt   files.pl          range-perf.pl     stackcollapse-bpftrace.pl  stackcollapse-instruments.pl      stackcollapse-perf.pl         stackcollapse-recursive.pl  stackcollapse-vtune.pl
dev            example-dtrace.svg          flamegraph.pl     README.md         stackcollapse-elfutils.pl  stackcollapse-java-exceptions.pl  stackcollapse-perf-sched.awk  stackcollapse-sample.awk    stackcollapse-xdebug.php
difffolded.pl  example-perf-stacks.txt.gz  jmaps             record-test.sh    stackcollapse-gdb.pl       stackcollapse-jstack.pl           stackcollapse.pl              stackcollapse-stap.pl       &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
root@master:~/FlameGraph# ./stackcollapse-perf.pl /root/perf.unfold &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&amp;gt; /root/perf.folded
root@master:~/FlameGraph#
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最后就是生成火焰🔥图了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@master:~/FlameGraph# ./flamegraph.pl /root/perf.folded &amp;gt; /root/perf.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当然也可以通过管道符&lt;code&gt;|&lt;/code&gt;将整个过程简化:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; perf script &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; FlameGraph/stackcollapse-perf.pl &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; FlameGraph/flamegraph.pl &amp;gt; process.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最后在谷歌浏览器上打开该火焰图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200704193400492.png&#34; alt=&#34;image-20200704193400492&#34; /&gt;&lt;/p&gt;
&lt;p&gt;火焰图是基于&lt;code&gt;stack&lt;/code&gt;信息生成的&lt;code&gt;SVG&lt;/code&gt; 图片, 用来展示 CPU 的调用栈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt; 轴表示调用栈, 每一层都是一个函数. 调用栈越深, 火焰就越高, 顶部就是正在执行的函数, 下方都是它的父函数.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; 轴表示抽样数, 如果一个函数在 x 轴占据的宽度越宽, 就表示它被抽到的次数多, 即执行的时间长. 注意, x 轴不代表时间, 而是所有的调用栈合并后, 按字母顺序排列的.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;火焰图就是看顶层的哪个函数占据的宽度最大. 只要有&lt;code&gt;&amp;quot;平顶&amp;quot;(plateaus)&lt;/code&gt;, 就表示该函数可能存在性能问题。颜色没有特殊含义, 因为火焰图表示的是 CPU 的繁忙程度, 所以一般选择暖色调.&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;调用栈不完整&lt;/code&gt;调用栈过深时，某些系统只返回前面的一部分（比如前10层）;当&lt;code&gt;函数名缺失&lt;/code&gt;，函数没有名字，编译器只用内存地址来表示（比如匿名函数），所以使用火焰图也是存在分析不到的地方。你也可以通过以下脚本进行采集分析火焰图:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -ne &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Usage: &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; seconds&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
perf record -a -g -o perf.data &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;PID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;ps aux&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;perf record&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v grep&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PID&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
	sleep &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt; -s INT &lt;span class=&#34;nv&#34;&gt;$PID&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# wait until perf exite&lt;/span&gt;
sleep &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

perf script -i perf.data &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&amp;gt; perf.unfold
perl stackcollapse-perf.pl perf.unfold &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&amp;gt; perf.folded
perl flamegraph.pl perf.folded &amp;gt;perf.svg
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200705-%E9%98%BF%E9%87%8C%E4%BA%91kubernetes%E7%94%B5%E5%AD%90%E4%B9%A6%E5%88%86%E4%BA%AB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200705-%E9%98%BF%E9%87%8C%E4%BA%91kubernetes%E7%94%B5%E5%AD%90%E4%B9%A6%E5%88%86%E4%BA%AB/</guid>
        <description>最近在阿里云开发者藏经阁中发现一本有趣的电子书，由声东编写的《深入浅出Kubernetes》，文末有下载方式： 一次搞懂6个核心原理吃透理论基础 一次学会6个典型问</description>
        <content:encoded>&lt;p&gt;&lt;img src=&#34;images.assets/image-20200705222527780.png&#34; alt=&#34;image-20200705222527780&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最近在阿里云开发者藏经阁中发现一本有趣的电子书，由声东编写的《深入浅出Kubernetes》，文末有下载方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次搞懂6个核心原理吃透理论基础&lt;/li&gt;
&lt;li&gt;一次学会6个典型问题的华丽操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/640.gif&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;124页的阿里云&lt;a href=&#34;https://developer.aliyun.com/topic/ebook?share_source=wechat&#34; title=&#34;阿里云藏经阁&#34;&gt;《深入浅出Kubernetes》&lt;/a&gt;从理论到实践的干货大纲:&lt;/p&gt;
&lt;h4 id=&#34;理论篇&#34;&gt;理论篇&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;这么理解集群控制器，能行！&lt;/li&gt;
&lt;li&gt;集群网络详解&lt;/li&gt;
&lt;li&gt;集群伸缩原理&lt;/li&gt;
&lt;li&gt;认证与调度&lt;/li&gt;
&lt;li&gt;集群服务的三个要点和一种实现&lt;/li&gt;
&lt;li&gt;镜像拉去这件小事&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实践篇&#34;&gt;实践篇&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;读懂这一篇，集群节点不下线&lt;/li&gt;
&lt;li&gt;节点下线姊妹篇&lt;/li&gt;
&lt;li&gt;我们为什么会删除不了集群的命名空间？&lt;/li&gt;
&lt;li&gt;阿里云ACK产品安全组配置管理&lt;/li&gt;
&lt;li&gt;二分之一活的微服务&lt;/li&gt;
&lt;li&gt;半夜两点Ca证书过期问题处理惨况总结&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在微信公众号内回复&amp;quot;阿里云&amp;quot;即可下载《深入浅出Kubernetes》PDF版。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;精彩文章回顾&#34;&gt;精彩文章回顾&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/VSvsLAb-QEZ7_syDPItyLA&#34;&gt;火焰图：全局视野的Linux性能剖析 &lt;code&gt;1k+&lt;/code&gt;在读&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/R5JI3vE995_vfxtYkbQYrA&#34;&gt;最流行的五款Kubernetes交互式可视化工具 &lt;code&gt;900+&lt;/code&gt;在读&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/3JIPe9pIbxdN7tGmLtX5ng&#34;&gt;轻松爬取拉勾网岗位招聘信息 &lt;code&gt;600+&lt;/code&gt;在读&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/eycZx7JtLGXy0mkZ1_V2nQ&#34;&gt;Yearning - 最Popular的MYSQL审计平台 &lt;code&gt;700+&lt;/code&gt;在读&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/TZzsHM1YbUHot6BGRqSzlg&#34;&gt;Prometheus监控系列-部署篇 &lt;code&gt;500+&lt;/code&gt;在读&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200709-jenkins%E4%B8%8A%E4%B8%8B%E6%B8%B8%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200709-jenkins%E4%B8%8A%E4%B8%8B%E6%B8%B8%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%AC%94%E8%AE%B0/</guid>
        <description></description>
        <content:encoded></content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/20200709-kubernetes-envoy%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/20200709-kubernetes-envoy%E5%AE%9E%E8%B7%B5/</guid>
        <description></description>
        <content:encoded></content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/docs-template/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/docs-template/</guid>
        <description>请使用 Chrome 浏览器。 请阅读下方文本熟悉工具使用方法，本文可直接拷贝到微信中预览。 1 Markdown Nice 简介 支持自定义样式的 Markdown 编辑器 支持微信公众号、知乎和稀土掘金 欢迎扫码回复「排版」</description>
        <content:encoded>&lt;p&gt;&lt;img src=&#34;images.assets/b4c806dd-caa2-43f4-82d9-796ce6716267.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;请使用 &lt;strong&gt;Chrome&lt;/strong&gt; 浏览器。&lt;/p&gt;
&lt;p&gt;请阅读下方文本熟悉工具使用方法，本文可直接拷贝到微信中预览。&lt;/p&gt;
&lt;h2 id=&#34;1-markdown-nice-简介&#34;&gt;1 Markdown Nice 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;支持自定义样式的 Markdown 编辑器&lt;/li&gt;
&lt;li&gt;支持微信公众号、知乎和稀土掘金&lt;/li&gt;
&lt;li&gt;欢迎扫码回复「排版」加入用户群&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/c3690018-4a92-4766-ac7e-ac54dd54c093.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-主题&#34;&gt;2 主题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://preview.mdnice.com/themes/&#34;&gt;https://preview.mdnice.com/themes/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;欢迎提交主题，提供更多文章示例~~&lt;/p&gt;
&lt;h2 id=&#34;3-通用语法&#34;&gt;3 通用语法&lt;/h2&gt;
&lt;h3 id=&#34;31-标题&#34;&gt;3.1 标题&lt;/h3&gt;
&lt;p&gt;在文字写书写不同数量的&lt;code&gt;#&lt;/code&gt;可以完成不同的标题，如下：&lt;/p&gt;
&lt;h1 id=&#34;一级标题&#34;&gt;一级标题&lt;/h1&gt;
&lt;h2 id=&#34;二级标题&#34;&gt;二级标题&lt;/h2&gt;
&lt;h3 id=&#34;三级标题&#34;&gt;三级标题&lt;/h3&gt;
&lt;h3 id=&#34;32-无序列表&#34;&gt;3.2 无序列表&lt;/h3&gt;
&lt;p&gt;无序列表的使用，在符号&lt;code&gt;-&lt;/code&gt;后加空格使用。如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无序列表 1&lt;/li&gt;
&lt;li&gt;无序列表 2&lt;/li&gt;
&lt;li&gt;无序列表 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要控制列表的层级，则需要在符号&lt;code&gt;-&lt;/code&gt;前使用空格。如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无序列表 1&lt;/li&gt;
&lt;li&gt;无序列表 2
&lt;ul&gt;
&lt;li&gt;无序列表 2.1&lt;/li&gt;
&lt;li&gt;无序列表 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;由于微信原因，最多支持到二级列表&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;33-有序列表&#34;&gt;3.3 有序列表&lt;/h3&gt;
&lt;p&gt;有序列表的使用，在数字及符号&lt;code&gt;.&lt;/code&gt;后加空格后输入内容，如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有序列表 1&lt;/li&gt;
&lt;li&gt;有序列表 2&lt;/li&gt;
&lt;li&gt;有序列表 3&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;34-引用&#34;&gt;3.4 引用&lt;/h3&gt;
&lt;p&gt;引用的格式是在符号&lt;code&gt;&amp;gt;&lt;/code&gt;后面书写文字。如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读一本好书，就是在和高尚的人谈话。 ——歌德&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;雇用制度对工人不利，但工人根本无力摆脱这个制度。 ——阮一峰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;35-粗体和斜体&#34;&gt;3.5 粗体和斜体&lt;/h3&gt;
&lt;p&gt;粗体的使用是在需要加粗的文字前后各加两个&lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而斜体的使用则是在需要斜体的文字前后各加一个&lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果要使用粗体和斜体，那么就是在需要操作的文字前后加三个&lt;code&gt;*&lt;/code&gt;。如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个是粗体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这个是斜体&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;这个是粗体加斜体&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;注：由于 commonmark 标准，可能会导致加粗与想象不一致，如下&lt;/p&gt;
&lt;p&gt;**今天天气好晴朗，**处处好风光。&lt;/p&gt;
&lt;p&gt;这个是正常现象，请参考&lt;a href=&#34;https://github.com/markdown-it/markdown-it/issues/410&#34; title=&#34;加粗 Issue&#34;&gt;加粗 Issue&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;36-链接&#34;&gt;3.6 链接&lt;/h3&gt;
&lt;p&gt;微信公众号仅支持公众号文章链接，即域名为&lt;code&gt;https://mp.weixin.qq.com/&lt;/code&gt;的合法链接。使用方法如下所示：&lt;/p&gt;
&lt;p&gt;对于该论述，欢迎读者查阅之前发过的文章，&lt;a href=&#34;https://mp.weixin.qq.com/s/s5IhxV2ooX3JN_X416nidA&#34;&gt;你是《未来世界的幸存者》么？&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;37-分割线&#34;&gt;3.7 分割线&lt;/h3&gt;
&lt;p&gt;可以在一行中用三个以上的减号来建立一个分隔线，同时需要在分隔线的上面空一行。如下：&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;38-删除线&#34;&gt;3.8 删除线&lt;/h3&gt;
&lt;p&gt;删除线的使用，在需要删除的文字前后各使用两个&lt;code&gt;~&lt;/code&gt;，如下：&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这是要被删除的内容。&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&#34;39-表格&#34;&gt;3.9 表格&lt;/h3&gt;
&lt;p&gt;可以使用冒号来定义表格的对齐方式，如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;姓名&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;年龄&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;工作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;小可爱&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;吃可爱多&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;小小勇敢&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;爬棵勇敢树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;小小小机智&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;看一本机智书&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;310-图片&#34;&gt;3.10 图片&lt;/h3&gt;
&lt;p&gt;插入图片，如果是行内图片则无图例，否则有图例，格式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/c3690018-4a92-4766-ac7e-ac54dd54c093.jpg&#34; alt=&#34;这里写图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以通过在图片尾部添加宽度和高度控制图片大小，用法如下：&lt;/p&gt;
&lt;p&gt;![同时设置宽度和高度](&lt;a href=&#34;https://imgkr.cn-bj.ufileos.com/4f78d8e8-77f6-4ea8-8a93-305087da06bd.png&#34;&gt;https://imgkr.cn-bj.ufileos.com/4f78d8e8-77f6-4ea8-8a93-305087da06bd.png&lt;/a&gt; =150x150)&lt;/p&gt;
&lt;p&gt;![只设置宽度，推荐使用百分比](&lt;a href=&#34;https://imgkr.cn-bj.ufileos.com/4f78d8e8-77f6-4ea8-8a93-305087da06bd.png&#34;&gt;https://imgkr.cn-bj.ufileos.com/4f78d8e8-77f6-4ea8-8a93-305087da06bd.png&lt;/a&gt; =40%x)&lt;/p&gt;
&lt;p&gt;该语法比较特殊，其他 Markdown 编辑器不完全通用。&lt;/p&gt;
&lt;p&gt;支持 jpg、png、gif、svg 等图片格式，&lt;strong&gt;其中 svg 文件仅可在微信公众平台中使用&lt;/strong&gt;，svg 文件示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/i_am_svg_20191024083453.svg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持图片&lt;strong&gt;拖拽和截图粘贴&lt;/strong&gt;到编辑器中上传，上传时使用当前选择的图床。&lt;/li&gt;
&lt;li&gt;可使用&lt;strong&gt;格式-&amp;gt;图片&lt;/strong&gt;上传本地图片，网站仅支持「图壳」图床，失败率低可长久保存！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注：仅支持 https 的图片，图片粘贴到微信时会自动上传微信服务器，不必担心使用上述图床会导致微信内图片丢失&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;4-特殊语法&#34;&gt;4. 特殊语法&lt;/h2&gt;
&lt;h3 id=&#34;41-脚注&#34;&gt;4.1 脚注&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;支持平台：微信公众号、知乎。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;脚注与链接的区别如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;链接：[文字](链接)
脚注：[文字](脚注解释 &amp;#34;脚注名字&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;有人认为在&lt;a href=&#34;https://en.wikipedia.org/wiki/Front-end_web_development&#34; title=&#34;Front-end web development&#34;&gt;大前端时代&lt;/a&gt;的背景下，移动端开发（Android、IOS）将逐步退出历史舞台。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;%E6%98%AF%E6%8C%87%E6%8E%8C%E6%8F%A1%E5%A4%9A%E7%A7%8D%E6%8A%80%E8%83%BD%EF%BC%8C%E5%B9%B6%E8%83%BD%E5%88%A9%E7%94%A8%E5%A4%9A%E7%A7%8D%E6%8A%80%E8%83%BD%E7%8B%AC%E7%AB%8B%E5%AE%8C%E6%88%90%E4%BA%A7%E5%93%81%E7%9A%84%E4%BA%BA%E3%80%82&#34; title=&#34;什么是全栈工程师&#34;&gt;全栈工程师&lt;/a&gt;在业务开发流程中起到了至关重要的作用。&lt;/p&gt;
&lt;p&gt;脚注内容请拉到最下面观看。&lt;/p&gt;
&lt;h3 id=&#34;42-代码块&#34;&gt;4.2 代码块&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;支持平台：微信代码主题仅支持微信公众号！其他主题无限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果在一个行内需要引用代码，只要用反引号引起来就好，如下：&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;在需要高亮的代码块的前一行及后一行使用三个反引号，同时&lt;strong&gt;第一行反引号后面表示代码块所使用的语言&lt;/strong&gt;，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// FileName: HelloWorld.java
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HelloWorld&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Java 入口程序，程序从此入口
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello,World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 向控制台打印一条语句
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;支持以下语言种类：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bash
clojure，cpp，cs，css
dart，dockerfile, diff
erlang
go，gradle，groovy
haskell
java，javascript，json，julia
kotlin
lisp，lua
makefile，markdown，matlab
objectivec
perl，php，python
r，ruby，rust
scala，shell，sql，swift
tex，typescript
verilog，vhdl
xml
yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果想要更换代码主题，可在上方挑选，不支持代码主题自定义。&lt;/p&gt;
&lt;p&gt;其中&lt;strong&gt;微信代码主题与微信官方一致&lt;/strong&gt;，有以下注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带行号且不换行，代码大小与官方一致&lt;/li&gt;
&lt;li&gt;需要在代码块处标志语言，否则无法高亮&lt;/li&gt;
&lt;li&gt;粘贴到公众号后，用鼠标点代码块内外一次，完成高亮&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;diff 不能同时和其他语言的高亮同时显示，且需要调整代码主题为微信代码主题以外的代码主题才能看到 diff 效果，使用效果如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gi&#34;&gt;+ 新增项
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;- 删除项
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;其他主题不带行号，可自定义是否换行，代码大小与当前编辑器一致&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;43-数学公式&#34;&gt;4.3 数学公式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;支持平台：微信公众号、知乎。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;行内公式使用方法，比如这个化学公式：$\ce{Hg^2+ -&amp;gt;[I-] HgI2 -&amp;gt;[I-] [Hg^{II}I4]^2-}$&lt;/p&gt;
&lt;p&gt;块公式使用方法如下：&lt;/p&gt;
&lt;p&gt;$$H(D_2) = -\left(\frac{2}{4}\log_2 \frac{2}{4} + \frac{2}{4}\log_2 \frac{2}{4}\right) = 1$$&lt;/p&gt;
&lt;p&gt;矩阵：&lt;/p&gt;
&lt;p&gt;$$&lt;br /&gt;
\begin{pmatrix}&lt;br /&gt;
1 &amp;amp; a_1 &amp;amp; a_1^2 &amp;amp; \cdots &amp;amp; a_1^n \&lt;br /&gt;
1 &amp;amp; a_2 &amp;amp; a_2^2 &amp;amp; \cdots &amp;amp; a_2^n \&lt;br /&gt;
\vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \&lt;br /&gt;
1 &amp;amp; a_m &amp;amp; a_m^2 &amp;amp; \cdots &amp;amp; a_m^n \&lt;br /&gt;
\end{pmatrix}&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;公式由于微信不支持，目前的解决方案是转成 svg 放到微信中，无需调整，矢量不失真。&lt;/p&gt;
&lt;p&gt;目前测试如果公式量过大，在 Chrome 下会存在粘贴后无响应，但是在 Firefox 中始终能够成功。&lt;/p&gt;
&lt;h3 id=&#34;44-toc&#34;&gt;4.4 TOC&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;支持平台：微信公众号、知乎。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TOC 全称为 Table of Content，列出全部标题。由于示例标题过多，需要使用将下方代码段去除即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[TOC]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于微信只支持到二级列表，本工具仅支持二级标题和三级标题的显示。&lt;/p&gt;
&lt;h3 id=&#34;45-注音符号&#34;&gt;4.5 注音符号&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;支持平台：微信公众号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;支持注音符号，用法如下：&lt;/p&gt;
&lt;p&gt;Markdown Nice 这么好用，简直是{喜大普奔|hē hē hē hē}呀！&lt;/p&gt;
&lt;h3 id=&#34;46-横屏滑动幻灯片&#34;&gt;4.6 横屏滑动幻灯片&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;支持平台：微信公众号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过&lt;code&gt;&amp;lt;![](url),![](url)&amp;gt;&lt;/code&gt;这种语法设置横屏滑动滑动片，具体用法如下：&lt;/p&gt;
&lt;p&gt;&amp;lt;&lt;img src=&#34;https://my-wechat.mdnice.com/mdnice/%E8%93%9D1_20191109174052.jpg&#34; alt=&#34;蓝1&#34; /&gt;,&lt;img src=&#34;https://my-wechat.mdnice.com/mdnice/%E7%BB%BF2_20191109174052.jpg&#34; alt=&#34;绿2&#34; /&gt;,&lt;img src=&#34;https://my-wechat.mdnice.com/mdnice/%E7%BA%A23_20191109174052.jpg&#34; alt=&#34;红3&#34; /&gt;&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;5-其他语法&#34;&gt;5 其他语法&lt;/h2&gt;
&lt;h3 id=&#34;51-html&#34;&gt;5.1 HTML&lt;/h3&gt;
&lt;p&gt;支持原生 HTML 语法，请写内联样式，如下：&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;display:block;text-align:right;color:orangered;&#34;&gt;橙色居右&lt;/span&gt;&lt;br /&gt;
&lt;span style=&#34;display:block;text-align:center;color:orangered;&#34;&gt;橙色居中&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;52-uml&#34;&gt;5.2 UML&lt;/h3&gt;
&lt;p&gt;不支持，推荐使用开源工具&lt;code&gt;https://draw.io/&lt;/code&gt;制作后再导入图片&lt;/p&gt;
&lt;h3 id=&#34;53-组件图床&#34;&gt;5.3 组件图床&lt;/h3&gt;
&lt;p&gt;组件目前共支持 3 种图床和 1 种自定义图床，主要特点如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;图床&lt;/th&gt;
&lt;th&gt;费用&lt;/th&gt;
&lt;th&gt;有效期&lt;/th&gt;
&lt;th&gt;失败率&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SM.MS&lt;/td&gt;
&lt;td&gt;免费&lt;/td&gt;
&lt;td&gt;长期&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阿里云&lt;/td&gt;
&lt;td&gt;付费&lt;/td&gt;
&lt;td&gt;自定义&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;七牛云&lt;/td&gt;
&lt;td&gt;10G 免费&lt;/td&gt;
&lt;td&gt;自定义&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;自定义&lt;/td&gt;
&lt;td&gt;高昂&lt;/td&gt;
&lt;td&gt;自定义&lt;/td&gt;
&lt;td&gt;自定义&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;4 个图床的缺点：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;图床&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SM.MS&lt;/td&gt;
&lt;td&gt;失败率高可用性很差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阿里云&lt;/td&gt;
&lt;td&gt;配置繁琐，费用昂贵&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;七牛云&lt;/td&gt;
&lt;td&gt;配置繁琐，需购买长期域名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;自定义&lt;/td&gt;
&lt;td&gt;搭建后台繁琐&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;54-更多文档&#34;&gt;5.4 更多文档&lt;/h3&gt;
&lt;p&gt;更多文档请参考 &lt;a href=&#34;https://docs.mdnice.com&#34; title=&#34;更多文档&#34;&gt;markdown-nice-docs&lt;/a&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/gitlabcicd%E7%A0%94%E7%A9%B6%E8%AF%BE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/gitlabcicd%E7%A0%94%E7%A9%B6%E8%AF%BE%E9%A2%98/</guid>
        <description>1 GitlabRunner 简介 1.1 Gitlab-runner GitLab Runner 是一个开源项目，用于运行您的作业并将结果发送回 GitLab。它与GitLab CI结合使用，GitLab CI是GitLab随附的用于协调作业的开源</description>
        <content:encoded>&lt;p&gt;&lt;img src=&#34;images.assets/03-1.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-gitlabrunner-简介&#34;&gt;1 GitlabRunner 简介&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/01.png&#34; alt=&#34;images&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;11-gitlab-runner&#34;&gt;1.1 Gitlab-runner&lt;/h4&gt;
&lt;p&gt;GitLab Runner 是一个开源项目，用于运行您的作业并将结果发送回 GitLab。它与&lt;a href=&#34;https://about.gitlab.com/product/continuous-integration/&#34;&gt;GitLab CI&lt;/a&gt;结合使用，&lt;a href=&#34;https://about.gitlab.com/product/continuous-integration/&#34;&gt;GitLab CI&lt;/a&gt;是&lt;a href=&#34;https://about.gitlab.com/product/continuous-integration/&#34;&gt;GitLab&lt;/a&gt;随附的用于协调作业的开源持续集成服务。&lt;/p&gt;
&lt;h4 id=&#34;12-要求&#34;&gt;1.2 要求&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;GitLab Runner 是用&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;编写的，可以作为一个二进制文件运行，不需要特定于语言的要求。它旨在在 GNU / Linux，macOS 和 Windows 操作系统上运行。只要您可以在其他操作系统上编译 Go 二进制文件，其他操作系统就可能会运行。&lt;/li&gt;
&lt;li&gt;如果要&lt;a href=&#34;https://docs.gitlab.com/12.8/runner/executors/docker.html&#34;&gt;使用 Docker&lt;/a&gt;，请安装最新版本。GitLab Runner 需要最少的 Docker &lt;code&gt;v1.13.0&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;GitLab Runner 版本应与 GitLab 版本同步。尽管较旧的 Runner 仍可以使用较新的 GitLab 版本，反之亦然，但在某些情况下，如果版本存在差异，则功能可能不可用或无法正常工作。在次要版本更新之间可以保证向后兼容性，但是请注意，GitLab 的次要版本更新会引入新功能，这些新功能将要求 Runner 在同一次要版本上使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;13-特点&#34;&gt;1.3 特点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;运行模式：
&lt;ul&gt;
&lt;li&gt;同时执行多个作业。&lt;/li&gt;
&lt;li&gt;对多个服务器（甚至每个项目）使用多个令牌。&lt;/li&gt;
&lt;li&gt;限制每个令牌的并行作业数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;job 可以运行在：
&lt;ul&gt;
&lt;li&gt;在本地。&lt;/li&gt;
&lt;li&gt;使用 Docker 容器。&lt;/li&gt;
&lt;li&gt;使用 Docker 容器并通过 SSH 执行作业。&lt;/li&gt;
&lt;li&gt;使用 Docker 容器在不同的云和虚拟化管理程序上自动缩放。&lt;/li&gt;
&lt;li&gt;连接到远程 SSH 服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用 Go 编写并以单个二进制文件的形式分发，而没有其他要求。&lt;/li&gt;
&lt;li&gt;支持 Bash，Windows Batch 和 Windows PowerShell。&lt;/li&gt;
&lt;li&gt;在 GNU / Linux，macOS 和 Windows（几乎可以在任何可以运行 Docker 的地方）上运行。&lt;/li&gt;
&lt;li&gt;允许自定义 job 运行环境。&lt;/li&gt;
&lt;li&gt;Gitlab runner 的配置文件热加载，无需重启。&lt;/li&gt;
&lt;li&gt;易于使用的设置，并支持 Docker，Docker-SSH，Parallels 或 SSH 运行环境。&lt;/li&gt;
&lt;li&gt;可以利用 Docker 容器的缓存。&lt;/li&gt;
&lt;li&gt;易于安装，可作为 GNU / Linux，macOS 和 Windows 的服务。&lt;/li&gt;
&lt;li&gt;嵌入式 Prometheus 指标 HTTP 服务器。&lt;/li&gt;
&lt;li&gt;裁判工作者监视 Prometheus 度量标准和其他特定于工作的数据并将其传递给 GitLab。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-gitlab-runner-部署使用篇&#34;&gt;2 Gitlab Runner 部署使用篇&lt;/h3&gt;
&lt;h4 id=&#34;21-安装篇&#34;&gt;2.1 安装篇&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;安装须知！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过包管理器安装 gitlab runner 服务会自动的创建 gitlab runner 用户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果需要使用 Docker 环境或者利用 Docker 缓存构建，需将&lt;code&gt;gitlab-runner&lt;/code&gt;用户加入到 docker 用户组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;usermod -aG docker gitlab-runner
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果授权之后依旧显示无权限操作&lt;code&gt;docker.sock&lt;/code&gt;，此时你需要修改 Gitlab runner 所运行在的主机上的 Docker daemon&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;22-注册篇&#34;&gt;2.2 注册篇&lt;/h4&gt;
&lt;h5 id=&#34;221-gitlab-runner-注册&#34;&gt;2.2.1 Gitlab Runner 注册&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;交互式注册&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --rm -t -i -v ~/data/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner:v12.6.0 register
Runtime platform                                    &lt;span class=&#34;nv&#34;&gt;arch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;amd64 &lt;span class=&#34;nv&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;linux &lt;span class=&#34;nv&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;revision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ac8e767a &lt;span class=&#34;nv&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;12.6.0
Running in system-mode.

Please enter the gitlab-ci coordinator URL &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;e.g. https://gitlab.com/&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
https://code.xingshulin.com
Please enter the gitlab-ci token &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; this runner:
4tutaeWWL3srNEcmHs1s
Please enter the gitlab-ci description &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; this runner:
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;00e4f023b5ae&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: devops-service-runner
Please enter the gitlab-ci tags &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; this runner &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;comma separated&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
build
Registering runner... succeeded                     &lt;span class=&#34;nv&#34;&gt;runner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;4tutaeWW
Please enter the executor: parallels, virtualbox, docker-ssh+machine, kubernetes, docker+machine, custom, docker, docker-ssh, shell, ssh:
shell
Runner registered successfully. Feel free to start it, but &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; it&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s running already the config should be automatically reloaded!
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;直接注册&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -itd --rm -v ~/data/gitlab-runner/config:/etc/gitlab-runner  gitlab/gitlab-runner:v12.6.0 register &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --non-interactive &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --executor &lt;span class=&#34;s2&#34;&gt;&amp;#34;shell&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --url &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://code.xingshulin.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --registration-token &lt;span class=&#34;s2&#34;&gt;&amp;#34;JRzzw2j1Ji6aBjwvkxAv&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --description &lt;span class=&#34;s2&#34;&gt;&amp;#34;devops-runner&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --tag-list &lt;span class=&#34;s2&#34;&gt;&amp;#34;build,deploy&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --run-untagged&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --locked&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --access-level&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;not_protected&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;222-gitlab-runner-选项&#34;&gt;2.2.2 gitlab runner 选项&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;   -c value, --config value   指定配置文件
   --template-config value    指定模板配置文件
   --tag-list value           指定runner的标签列表，逗号分隔
   -n, --non-interactive      无交互进行runner注册
   --leave-runner             如果注册失败，不用删除runner
   -r value, --registration-token value  runner的注册token
   --run-untagged             注册运行未加标签的构建，默认当标签列表为空时值为true
   --locked                   锁定runner 默认true
   --access-level value       设置访问等级 not_protected or ref_protected&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 默认 not_protected
   --maximum-timeout value    为作业设置最大运行超时时间 默认零 单位秒
   --paused                   设置runner为 paused,默认 &lt;span class=&#34;s1&#34;&gt;&amp;#39;false&amp;#39;&lt;/span&gt;
   --name value, --description value   Runner 名称
   --limit value              程序处理的最大构建数量default: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
   --output-limit value       最大的构建大小单位kb default: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
   --request-concurrency value 作业请求的最大并发数 default: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
   -u value, --url value         GitlabCI服务器地址
   -t value, --token value        GitlabCI服务器token
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;223-gitlab-runner-类型&#34;&gt;2.2.3 gitlab runner 类型&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;stuck&lt;/code&gt;: 表示当前的 pipeline 没有适配到合适的 Tags 的 Runner&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;shared ： 运行整个平台项目的作业（gitlab）&lt;/li&gt;
&lt;li&gt;group： 运行特定 group 下的所有项目的作业（group）&lt;/li&gt;
&lt;li&gt;specific: 运行指定的项目作业（project）&lt;/li&gt;
&lt;li&gt;locked： 无法运行项目作业&lt;/li&gt;
&lt;li&gt;paused： 不会运行作业&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-gitlab-runner-pipeline&#34;&gt;3. GitLab Runner Pipeline&lt;/h3&gt;
&lt;h4 id=&#34;31-job&#34;&gt;3.1 job&lt;/h4&gt;
&lt;p&gt;在每个项目中，我们使用名为&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;的 YAML 文件配置 GitLab CI / CD 管道。&lt;/p&gt;
&lt;p&gt;这里在 pipeline 中定义了两个作业，每个作业运行不同的命令。命令可以是 shell 或脚本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job1:
  script: &amp;quot;execute-script-for-job1&amp;quot;

job2:
  script: &amp;quot;execute-script-for-job2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;可以定义一个或多个作业(job)。&lt;/li&gt;
&lt;li&gt;每个作业必须具有唯一的名称（不能使用关键字）。&lt;/li&gt;
&lt;li&gt;每个作业是独立执行的。&lt;/li&gt;
&lt;li&gt;每个作业至少要包含一个 script。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-script&#34;&gt;3.2 script&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;job:
  script:
    - uname -a
    - bundle exec rspec
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;**注意：**有时， &lt;code&gt;script&lt;/code&gt;命令将需要用单引号或双引号引起来. 例如，包含冒号命令（ &lt;code&gt;:&lt;/code&gt; ）需要加引号，以便被包裹的 YAML 解析器知道来解释整个事情作为一个字符串，而不是一个”键：值”对. 使用特殊字符时要小心： &lt;code&gt;:&lt;/code&gt; ， &lt;code&gt;{&lt;/code&gt; ， &lt;code&gt;}&lt;/code&gt; ， &lt;code&gt;[&lt;/code&gt; ， &lt;code&gt;]&lt;/code&gt; ， &lt;code&gt;,&lt;/code&gt; ， &lt;code&gt;&amp;amp;&lt;/code&gt; ， &lt;code&gt;*&lt;/code&gt; ， &lt;code&gt;#&lt;/code&gt; ， &lt;code&gt;?&lt;/code&gt; ， &lt;code&gt;|&lt;/code&gt; ， &lt;code&gt;-&lt;/code&gt; ， &lt;code&gt;&amp;lt;&lt;/code&gt; ， &lt;code&gt;&amp;gt;&lt;/code&gt; ， &lt;code&gt;=&lt;/code&gt; &lt;code&gt;!&lt;/code&gt; ， &lt;code&gt;%&lt;/code&gt; ， &lt;code&gt;@&lt;/code&gt; .&lt;/p&gt;
&lt;h4 id=&#34;33-before_script&#34;&gt;3.3 before_script&lt;/h4&gt;
&lt;p&gt;用于定义一个命令，该命令在每个作业之前运行。必须是一个数组。指定的&lt;code&gt;script&lt;/code&gt;与主脚本中指定的任何脚本串联在一起，并在单个 shell 中一起执行。&lt;/p&gt;
&lt;h4 id=&#34;34-after_script&#34;&gt;3.4 after_script&lt;/h4&gt;
&lt;p&gt;用于定义将在每个作业（包括失败的作业）之后运行的命令。这必须是一个数组。指定的脚本在新的 shell 中执行，与任何&lt;code&gt;before_script&lt;/code&gt;或&lt;code&gt;script&lt;/code&gt;脚本分开。&lt;/p&gt;
&lt;p&gt;可以在全局定义，也可以在 job 中定义。在 job 中定义会覆盖全局。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;before_script:
  - echo &amp;quot;before-script!!&amp;quot;

variables:
  DOMAIN: example.com

stages:
  - build
  - deploy


build:
  before_script:
    - echo &amp;quot;before-script in job&amp;quot;
  stage: build
  script:
    - echo &amp;quot;mvn clean &amp;quot;
    - echo &amp;quot;mvn install&amp;quot;
  after_script:
    - echo &amp;quot;after script in job&amp;quot;


deploy:
  stage: deploy
  script:
    - echo &amp;quot;hello deploy&amp;quot;

after_script:
  - echo &amp;quot;after-script&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;after_script 失败不会影响作业失败。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/02.png&#34;&gt;&lt;img src=&#34;images.assets/02.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;before_script 失败导致整个作业失败，其他作业将不再执行。作业失败不会影响 after_script 运行。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/03.png&#34;&gt;&lt;img src=&#34;images.assets/03.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;35-stages&#34;&gt;3.5 stages&lt;/h4&gt;
&lt;p&gt;用于定义作业可以使用的阶段，并且是全局定义的。同一阶段的作业并行运行，不同阶段按顺序执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stages：
  - build
  - test
  - deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里定义了三个阶段，首先 build 阶段并行运行，然后 test 阶段并行运行，最后 deploy 阶段并行运行。deploy 阶段运行成功后将提交状态标记为 passed 状态。如果任何一个阶段运行失败，最后提交状态为 failed。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;未定义 stages&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全局定义的 stages 是来自于每个 job。如果 job 没有定义 stage 则默认是 test 阶段。如果全局未定义 stages,则按顺序运行 build,test,deploy。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/04.png&#34;&gt;&lt;img src=&#34;images.assets/04.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果作业中定义了其他阶段，例如”codescan”则会出现错误。原因是因为除了 build test deploy 阶段外的其他阶段作为.pre 运行（也就是作为第一个阶段运行，需要将此作业的 stage 指定为.pre）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/05.png&#34;&gt;&lt;img src=&#34;images.assets/05-20200601124254564.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;codescan:
  stage: .pre
  script:
    - echo &amp;quot;codescan&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;定义 stages 控制 stage 运行顺序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个标准的 yaml 文件中是需要定义 stages，可以帮助我们对每个 stage 进行排序。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stages:
  - build
  - test
  - codescan
  - deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/06.png&#34;&gt;&lt;img src=&#34;images.assets/06.png&#34; alt=&#34;iamges&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;36-pre--post&#34;&gt;3.6 .pre &amp;amp; .post&lt;/h4&gt;
&lt;p&gt;.pre 始终是整个管道的第一个运行阶段，.post 始终是整个管道的最后一个运行阶段。 用户定义的阶段都在两者之间运行。&lt;code&gt;.pre&lt;/code&gt;和&lt;code&gt;.post&lt;/code&gt;的顺序无法更改。如果管道仅包含&lt;code&gt;.pre&lt;/code&gt;或&lt;code&gt;.post&lt;/code&gt;阶段的作业，则不会创建管道。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/05.png&#34;&gt;&lt;img src=&#34;images.assets/05-20200601124254564.png&#34; alt=&#34;iamges&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;37-stage&#34;&gt;3.7 stage&lt;/h4&gt;
&lt;p&gt;是按 JOB 定义的，并且依赖于全局定义的&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#stages&#34;&gt;&lt;code&gt;stages&lt;/code&gt;&lt;/a&gt; 。 它允许将作业分为不同的阶段，并且同一&lt;code&gt;stage&lt;/code&gt;作业可以并行执行（取决于&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#using-your-own-runners&#34;&gt;特定条件&lt;/a&gt; ）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unittest:
  stage: test
  script:
    - echo &amp;quot;run test&amp;quot;

interfacetest:
  stage: test
  script:
    - echo &amp;quot;run test&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/07.png&#34;&gt;&lt;img src=&#34;images.assets/07.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可能遇到的问题： 阶段并没有并行运行。&lt;/p&gt;
&lt;p&gt;在这里我把这两个阶段在同一个 runner 运行了，所以需要修改 runner 每次运行的作业数量。默认是 1，改为 10.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/08.png&#34;&gt;&lt;img src=&#34;images.assets/08.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vim /etc/gitlab-runner/config.toml 更改后自动加载无需重启。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;concurrent = 10
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;38-variables&#34;&gt;3.8 variables&lt;/h4&gt;
&lt;p&gt;定义变量，pipeline 变量、job 变量、Runner 变量。job 变量优先级最大。&lt;/p&gt;
&lt;h4 id=&#34;39-综合实例&#34;&gt;3.9 综合实例&lt;/h4&gt;
&lt;p&gt;综合实例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;before_script:
  - echo &amp;quot;before-script!!&amp;quot;

variables:
  DOMAIN: example.com

stages:
  - build
  - test
  - codescan
  - deploy

build:
  before_script:
    - echo &amp;quot;before-script in job&amp;quot;
  stage: build
  script:
    - echo &amp;quot;mvn clean &amp;quot;
    - echo &amp;quot;mvn install&amp;quot;
    - echo &amp;quot;$DOMAIN&amp;quot;
  after_script:
    - echo &amp;quot;after script in buildjob&amp;quot;

unittest:
  stage: test
  script:
    - echo &amp;quot;run test&amp;quot;

deploy:
  stage: deploy
  script:
    - echo &amp;quot;hello deploy&amp;quot;
    - sleep 2;

codescan:
  stage: codescan
  script:
    - echo &amp;quot;codescan&amp;quot;
    - sleep 5;

after_script:
  - echo &amp;quot;after-script&amp;quot;
  - ech
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实验效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/17.png&#34;&gt;&lt;img src=&#34;images.assets/17.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可能遇到的问题： pipeline 卡主,为降低复杂性目前没有学习 tags，所以流水线是在共享的 runner 中运行的。需要设置共享的 runner 运行没有 tag 的作业。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/18.png&#34;&gt;&lt;img src=&#34;images.assets/18.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;310-tags&#34;&gt;3.10 tags&lt;/h4&gt;
&lt;p&gt;用于从允许运行该项目的所有 Runner 列表中选择特定的 Runner,在 Runner 注册期间，您可以指定 Runner 的标签。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tags&lt;/code&gt;可让您使用指定了标签的 runner 来运行作业,此 runner 具有 ruby 和 postgres 标签。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job:
  tags:
    - ruby
    - postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;给定带有&lt;code&gt;osx&lt;/code&gt;标签的 OS X Runner 和带有&lt;code&gt;windows&lt;/code&gt;标签的 Windows Runner，以下作业将在各自的平台上运行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;windows job:
  stage:
    - build
  tags:
    - windows
  script:
    - echo Hello, %USERNAME%!

osx job:
  stage:
    - build
  tags:
    - osx
  script:
    - echo &amp;quot;Hello, $USER!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/09.png&#34;&gt;&lt;img src=&#34;images.assets/09.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;311-allow_failure&#34;&gt;3.11 allow_failure&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;allow_failure&lt;/code&gt;允许作业失败，默认值为&lt;code&gt;false&lt;/code&gt; 。启用后，如果作业失败，该作业将在用户界面中显示橙色警告. 但是，管道的逻辑流程将认为作业成功/通过，并且不会被阻塞。 假设所有其他作业均成功，则该作业的阶段及其管道将显示相同的橙色警告。但是，关联的提交将被标记为”通过”，而不会发出警告。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job1:
  stage: test
  script:
    - execute_script_that_will_fail
  allow_failure: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/10.png&#34;&gt;&lt;img src=&#34;images.assets/10.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;312-when&#34;&gt;3.12 when&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;on_success&lt;/code&gt;前面阶段中的所有作业都成功（或由于标记为&lt;code&gt;allow_failure&lt;/code&gt;而被视为成功）时才执行作业。 这是默认值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;on_failure&lt;/code&gt;当前面阶段出现失败则执行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;always&lt;/code&gt; -执行作业，而不管先前阶段的作业状态如何，放到最后执行。总是执行。&lt;/p&gt;
&lt;h4 id=&#34;313-manual-手动&#34;&gt;3.13 manual 手动&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;manual&lt;/code&gt; -手动执行作业,不会自动执行，需要由用户显式启动. 手动操作的示例用法是部署到生产环境. 可以从管道，作业，环境和部署视图开始手动操作。&lt;/p&gt;
&lt;p&gt;此时在 deploy 阶段添加 manual，则流水线运行到 deploy 阶段为锁定状态，需要手动点击按钮才能运行 deploy 阶段。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/11.png&#34;&gt;&lt;img src=&#34;images.assets/11.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;314-delayed-延迟&#34;&gt;3.14 delayed 延迟&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;delayed&lt;/code&gt; 延迟一定时间后执行作业（在 GitLab 11.14 中已添加）。&lt;/p&gt;
&lt;p&gt;有效值&lt;code&gt;&#39;5&#39;,10 seconds,30 minutes, 1 day, 1 week&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/12.png&#34;&gt;&lt;img src=&#34;images.assets/12.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实验 demo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;before_script:
  - echo &amp;quot;before-script!!&amp;quot;

variables:
  DOMAIN: example.com

stages:
  - build
  - test
  - codescan
  - deploy

build:
  before_script:
    - echo &amp;quot;before-script in job&amp;quot;
  stage: build
  script:
    - echo &amp;quot;mvn clean &amp;quot;
    - echo &amp;quot;mvn install&amp;quot;
    - echo &amp;quot;$DOMAIN&amp;quot;
  after_script:
    - echo &amp;quot;after script in buildjob&amp;quot;

unittest:
  stage: test
  script:
    - ech &amp;quot;run test&amp;quot;
  when: delayed
  start_in: &#39;30&#39;
  allow_failure: true


deploy:
  stage: deploy
  script:
    - echo &amp;quot;hello deploy&amp;quot;
    - sleep 2;
  when: manual

codescan:
  stage: codescan
  script:
    - echo &amp;quot;codescan&amp;quot;
    - sleep 5;
  when: on_success

after_script:
  - echo &amp;quot;after-script&amp;quot;
  - ech

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;315-retry&#34;&gt;3.15 retry&lt;/h4&gt;
&lt;p&gt;配置在失败的情况下重试作业的次数。&lt;/p&gt;
&lt;p&gt;当作业失败并配置了&lt;code&gt;retry&lt;/code&gt; ，将再次处理该作业，直到达到&lt;code&gt;retry&lt;/code&gt;关键字指定的次数。如果&lt;code&gt;retry&lt;/code&gt;设置为 2，并且作业在第二次运行成功（第一次重试），则不会再次重试. &lt;code&gt;retry&lt;/code&gt;值必须是一个正整数，等于或大于 0，但小于或等于 2（最多两次重试，总共运行 3 次）.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unittest:
  stage: test
  retry: 2
  script:
    - ech &amp;quot;run test&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/19.png&#34;&gt;&lt;img src=&#34;images.assets/19.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，将在所有失败情况下重试作业。为了更好地控制&lt;code&gt;retry&lt;/code&gt;哪些失败，可以是具有以下键的哈希值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max&lt;/code&gt; ：最大重试次数.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when&lt;/code&gt; ：重试失败的案例.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据错误原因设置重试的次数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;always ：在发生任何故障时重试（默认）.
unknown_failure ：当失败原因未知时。
script_failure ：脚本失败时重试。
api_failure ：API失败重试。
stuck_or_timeout_failure ：作业卡住或超时时。
runner_system_failure ：运行系统发生故障。
missing_dependency_failure: 如果依赖丢失。
runner_unsupported ：Runner不受支持。
stale_schedule ：无法执行延迟的作业。
job_execution_timeout ：脚本超出了为作业设置的最大执行时间。
archived_failure ：作业已存档且无法运行。
unmet_prerequisites ：作业未能完成先决条件任务。
scheduler_failure ：调度程序未能将作业分配给运行scheduler_failure。
data_integrity_failure ：检测到结构完整性问题。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;316-实验&#34;&gt;3.16 实验&lt;/h4&gt;
&lt;p&gt;定义当出现脚本错误重试两次，也就是会运行三次。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unittest:
  stage: test
  tags:
    - build
  only:
    - master
  script:
    - ech &amp;quot;run test&amp;quot;
  retry:
    max: 2
    when:
      - script_failure
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/13.png&#34;&gt;&lt;img src=&#34;images.assets/13.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;317-timeout-超时&#34;&gt;3.17 timeout 超时&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;job 配置超时时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特定作业配置超时，作业级别的超时可以超过&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/pipelines/settings.html#timeout&#34;&gt;项目级别的超时，&lt;/a&gt;但不能超过 Runner 特定的超时。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;build:
  script: build.sh
  timeout: 3 hours 30 minutes

test:
  script: rspec
  timeout: 3h 30m
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;项目设置流水线超时时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;超时定义了作业可以运行的最长时间（以分钟为单位）。 这可以在项目的**“设置”&amp;gt;” CI / CD”&amp;gt;“常规管道”设置下进行配置** 。 默认值为 60 分钟。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/14.png&#34;&gt;&lt;img src=&#34;images.assets/14.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;runner 超时时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此类超时（如果小于&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/pipelines/settings.html#timeout&#34;&gt;项目定义的超时&lt;/a&gt; ）将具有优先权。此功能可用于通过设置大超时（例如一个星期）来防止 Shared Runner 被项目占用。未配置时，Runner 将不会覆盖项目超时。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/15.png&#34;&gt;&lt;img src=&#34;images.assets/15.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此功能如何工作：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1-运行程序超时大于项目超时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;runner 超时设置为 24 小时，项目的 CI / CD 超时设置为 2 小时。该工作将在 2 小时后超时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 2-未配置运行程序超时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;runner 不设置超时时间，项目的 CI / CD 超时设置为 2 小时。该工作将在 2 小时后超时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 3-运行程序超时小于项目超时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;runner 超时设置为 30 分钟，项目的 CI / CD 超时设置为 2 小时。工作在 30 分钟后将超时&lt;/p&gt;
&lt;h4 id=&#34;318-parallel&#34;&gt;3.18 parallel&lt;/h4&gt;
&lt;p&gt;配置要并行运行的作业实例数,此值必须大于或等于 2 并且小于或等于 50。&lt;/p&gt;
&lt;p&gt;这将创建 N 个并行运行的同一作业实例. 它们从&lt;code&gt;job_name 1/N&lt;/code&gt;到&lt;code&gt;job_name N/N&lt;/code&gt;依次命名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;codescan:
  stage: codescan
  tags:
    - build
  only:
    - master
  script:
    - echo &amp;quot;codescan&amp;quot;
    - sleep 5;
  parallel: 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/16.png&#34;&gt;&lt;img src=&#34;images.assets/16.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;319-综合实例&#34;&gt;3.19 综合实例&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;before_script:
  - echo &amp;quot;before-script!!&amp;quot;

variables:
  DOMAIN: example.com

stages:
  - build
  - test
  - codescan
  - deploy

build:
  before_script:
    - echo &amp;quot;before-script in job&amp;quot;
  stage: build
  script:
    - echo &amp;quot;mvn clean &amp;quot;
    - echo &amp;quot;mvn install&amp;quot;
    - echo &amp;quot;$DOMAIN&amp;quot;
  after_script:
    - echo &amp;quot;after script in buildjob&amp;quot;

unittest:
  stage: test
  script:
    - ech &amp;quot;run test&amp;quot;
  when: delayed
  start_in: &#39;5&#39;
  allow_failure: true
  retry:
    max: 1
    when:
      - script_failure
  timeout: 1 hours 10 minutes
deploy:
  stage: deploy
  script:
    - echo &amp;quot;hello deploy&amp;quot;
    - sleep 2;
  when: manual

codescan:
  stage: codescan
  script:
    - echo &amp;quot;codescan&amp;quot;
    - sleep 5;
  when: on_success
  parallel: 5

after_script:
  - echo &amp;quot;after-script&amp;quot;
  - ech
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;320-only--except&#34;&gt;3.20 only &amp;amp; except&lt;/h4&gt;
&lt;p&gt;only 和 except 是两个参数用分支策略来限制 jobs 构建：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;only&lt;/code&gt;定义哪些分支和标签的 git 项目将会被 job 执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;except&lt;/code&gt;定义哪些分支和标签的 git 项目将不会被 job 执行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job:
# use regexp
only:
- /^issue-.*$/
# use special keyword
except:
- branches
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;321-rules&#34;&gt;3.21 rules&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;rules&lt;/code&gt;允许&lt;em&gt;按顺序&lt;/em&gt;评估单个规则对象的列表，直到一个匹配并为作业动态提供属性. 请注意， &lt;code&gt;rules&lt;/code&gt;不能与&lt;code&gt;only/except&lt;/code&gt;组合使用。&lt;/p&gt;
&lt;p&gt;可用的规则条款包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#rulesif&#34;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; （类似于&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#onlyvariablesexceptvariables&#34;&gt;&lt;code&gt;only:variables&lt;/code&gt;&lt;/a&gt; ）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#ruleschanges&#34;&gt;&lt;code&gt;changes&lt;/code&gt;&lt;/a&gt; （ &lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#onlychangesexceptchanges&#34;&gt;&lt;code&gt;only:changes&lt;/code&gt;&lt;/a&gt;相同）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#rulesexists&#34;&gt;&lt;code&gt;exists&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3211-rulesif&#34;&gt;3.21.1 rules:if&lt;/h5&gt;
&lt;p&gt;如果&lt;code&gt;DOMAIN&lt;/code&gt;的值匹配，则需要手动运行。不匹配&lt;code&gt;on_success&lt;/code&gt;。 条件判断从上到下，匹配即停止。多条件匹配可以使用&lt;code&gt;&amp;amp;&amp;amp; ||&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;variables:
  DOMAIN: example.com

codescan:
  stage: codescan
  tags:
    - build
  script:
    - echo &amp;quot;codescan&amp;quot;
    - sleep 5;
  #parallel: 5
  rules:
    - if: &#39;$DOMAIN == &amp;quot;example.com&amp;quot;&#39;
      when: manual
    - when: on_success
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;3212-ruleschanges&#34;&gt;3.21.2 rules:changes&lt;/h5&gt;
&lt;p&gt;接受文件路径数组。 如果提交中&lt;code&gt;Jenkinsfile&lt;/code&gt;文件发生的变化则为 true。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;codescan:
  stage: codescan
  tags:
    - build
  script:
    - echo &amp;quot;codescan&amp;quot;
    - sleep 5;
  #parallel: 5
  rules:
    - changes:
      - Jenkinsfile
      when: manual
    - if: &#39;$DOMAIN == &amp;quot;example.com&amp;quot;&#39;
      when: manual
    - when: on_success
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;3213-rulesexists&#34;&gt;3.21.3 rules:exists&lt;/h5&gt;
&lt;p&gt;接受文件路径数组。当仓库中存在指定的文件时操作。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;codescan:
  stage: codescan
  tags:
    - build
  script:
    - echo &amp;quot;codescan&amp;quot;
    - sleep 5;
  #parallel: 5
  rules:
    - exists:
      - Jenkinsfile
      when: manual
    - changes:
      - Jenkinsfile
      when: on_success
    - if: &#39;$DOMAIN == &amp;quot;example.com&amp;quot;&#39;
      when: on_success
    - when: on_success
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;3214-rulesallow_failure&#34;&gt;3.21.4 rules:allow_failure&lt;/h5&gt;
&lt;p&gt;使用&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#allow_failure&#34;&gt;&lt;code&gt;allow_failure: true&lt;/code&gt;&lt;/a&gt; &lt;code&gt;rules:&lt;/code&gt;在不停止管道本身的情况下允许作业失败或手动作业等待操作.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job:
  script: &amp;quot;echo Hello, Rules!&amp;quot;
  rules:
    - if: &#39;$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == &amp;quot;master&amp;quot;&#39;
      when: manual
      allow_failure: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在此示例中，如果第一个规则匹配，则作业将具有以下&lt;code&gt;when: manual&lt;/code&gt;和&lt;code&gt;allow_failure: true&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;322-workflowrules&#34;&gt;3.22 workflow:rules&lt;/h4&gt;
&lt;p&gt;顶级&lt;code&gt;workflow:&lt;/code&gt;关键字适用于整个管道，并将确定是否创建管道。&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#when&#34;&gt;&lt;code&gt;when&lt;/code&gt;&lt;/a&gt; ：可以设置为&lt;code&gt;always&lt;/code&gt;或&lt;code&gt;never&lt;/code&gt; . 如果未提供，则默认值&lt;code&gt;always&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;variables:
  DOMAIN: example.com

workflow:
  rules:
    - if: &#39;$DOMAIN == &amp;quot;example.com&amp;quot;&#39;
    - when: always
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;323-综合实例&#34;&gt;3.23 综合实例&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;before_script:
  - echo &amp;quot;before-script!!&amp;quot;

variables:
  DOMAIN: example.com

workflow:
  rules:
    - if: &#39;$DOMAIN == &amp;quot;example.com&amp;quot;&#39;
      when: always
    - when: never

stages:
  - build
  - test
  - codescan
  - deploy

build:
  before_script:
    - echo &amp;quot;before-script in job&amp;quot;
  stage: build
  script:
    - echo &amp;quot;mvn clean &amp;quot;
    - echo &amp;quot;mvn install&amp;quot;
    - ech &amp;quot;$DOMAIN&amp;quot;
  after_script:
    - echo &amp;quot;after script in buildjob&amp;quot;
  rules:
    - exists:
      - Dockerfile
      when: on_success
      allow_failure: true

    - changes:
      - Dockerfile
      when: manual
    - when: on_failure

unittest:
  stage: test
  script:
    - ech &amp;quot;run test&amp;quot;
  when: delayed
  start_in: &#39;5&#39;
  allow_failure: true
  retry:
    max: 1
    when:
      - script_failure
  timeout: 1 hours 10 minutes

deploy:
  stage: deploy
  script:
    - echo &amp;quot;hello deploy&amp;quot;
    - sleep 2;
  rules:
    - if: &#39;$DOMAIN == &amp;quot;example.com&amp;quot;&#39;
      when: manual
    - if: &#39;$DOMAIN == &amp;quot;aexample.com&amp;quot;&#39;
      when: delayed
      start_in: &#39;5&#39;
    - when: on_failure

codescan:
  stage: codescan
  script:
    - echo &amp;quot;codescan&amp;quot;
    - sleep 5;
  when: on_success
  parallel: 5

after_script:
  - echo &amp;quot;after-script&amp;quot;
  - ech
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;324-cache-缓存&#34;&gt;3.24 cache 缓存&lt;/h4&gt;
&lt;p&gt;用来指定需要在 job 之间缓存的文件或目录。只能使用该项目工作空间内的路径。不要使用缓存在阶段之间传递工件，因为缓存旨在存储编译项目所需的运行时依赖项。&lt;/p&gt;
&lt;p&gt;如果在 job 范围之外定义了&lt;code&gt;cache&lt;/code&gt; ，则意味着它是全局设置，所有 job 都将使用该定义。如果未全局定义或未按 job 定义则禁用该功能。&lt;/p&gt;
&lt;h5 id=&#34;3241-cachepaths&#34;&gt;3.24.1 cache:paths&lt;/h5&gt;
&lt;p&gt;使用&lt;code&gt;paths&lt;/code&gt;指令选择要缓存的文件或目录，路径是相对于项目目录，不能直接链接到项目目录之外。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$CI_PROJECT_DIR&lt;/code&gt; 项目目录&lt;/p&gt;
&lt;p&gt;在 job build 中定义缓存，将会缓存 target 目录下的所有.jar 文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;build:
  script: test
  cache:
    paths:
      - target/*.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当在全局定义了 cache:paths 会被 job 中覆盖。以下实例将缓存 binaries 目录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cache:
  paths:
    - my/files

build:
  script: echo &amp;quot;hello&amp;quot;
  cache:
    key: build
    paths:
      - target/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于缓存是在 job 之间共享的，如果不同的 job 使用不同的路径就出现了缓存覆盖的问题。如何让不同的 job 缓存不同的 cache 呢？设置不同的&lt;code&gt;cache:key&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&#34;3242-cachekey-缓存标记&#34;&gt;3.24.2 cache:key 缓存标记&lt;/h5&gt;
&lt;p&gt;为缓存做个标记，可以配置 job、分支为 key 来实现分支、作业特定的缓存。为不同 job 定义了不同的 &lt;code&gt;cache:key&lt;/code&gt; 时， 会为每个 job 分配一个独立的 cache。cache:key&lt;code&gt;变量可以使用任何预定义变量，默认&lt;/code&gt;default ，从 GitLab 9.0 开始，默认情况下所有内容都在管道和作业之间共享。&lt;/p&gt;
&lt;p&gt;按照分支设置缓存&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cache:
  key: ${CI_COMMIT_REF_SLUG}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;files： 文件发生变化自动重新生成缓存(files 最多指定两个文件)，提交的时候检查指定的文件。&lt;/p&gt;
&lt;p&gt;根据指定的文件生成密钥计算 SHA 校验和，如果文件未改变值为 default。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cache:
  key:
    files:
      - Gemfile.lock
      - package.json
  paths:
    - vendor/ruby
    - node_modules
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;prefix: 允许给定 prefix 的值与指定文件生成的秘钥组合。&lt;/p&gt;
&lt;p&gt;在这里定义了全局的 cache，如果文件发生变化则值为 rspec-xxx111111111222222 ，未发生变化为 rspec-default。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cache:
  key:
    files:
      - Gemfile.lock
    prefix: ${CI_JOB_NAME}
  paths:
    - vendor/ruby

rspec:
  script:
    - bundle exec rspec
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如，添加&lt;code&gt;$CI_JOB_NAME&lt;/code&gt; &lt;code&gt;prefix&lt;/code&gt;将使密钥看起来像： &lt;code&gt;rspec-feef9576d21ee9b6a32e30c5c79d0a0ceb68d1e5&lt;/code&gt; ，并且作业缓存在不同分支之间共享，如果分支更改了&lt;code&gt;Gemfile.lock&lt;/code&gt; ，则该分支将为&lt;code&gt;cache🔑files&lt;/code&gt;具有新的 SHA 校验和. 将生成一个新的缓存密钥，并为该密钥创建一个新的缓存. 如果&lt;code&gt;Gemfile.lock&lt;/code&gt;未发生变化 ，则将前缀添加&lt;code&gt;default&lt;/code&gt; ，因此示例中的键为&lt;code&gt;rspec-default&lt;/code&gt; 。&lt;/p&gt;
&lt;h5 id=&#34;3243-cachepolicy-策略&#34;&gt;3.24.3 cache:policy 策略&lt;/h5&gt;
&lt;p&gt;默认：在执行开始时下载文件，并在结束时重新上传文件。称为” &lt;code&gt;pull-push&lt;/code&gt;缓存策略.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;policy: pull&lt;/code&gt; 跳过下载步骤&lt;/p&gt;
&lt;p&gt;&lt;code&gt;policy: push&lt;/code&gt; 跳过上传步骤&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stages:
  - setup
  - test

prepare:
  stage: setup
  cache:
    key: gems
    paths:
      - vendor/bundle
  script:
    - bundle install --deployment

rspec:
  stage: test
  cache:
    key: gems
    paths:
      - vendor/bundle
    policy: pull
  script:
    - bundle exec rspec ...
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;325-综合实例一-全局缓存&#34;&gt;3.25 综合实例(一) 全局缓存&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;before_script:
  - echo &amp;quot;before-script!!&amp;quot;

variables:
  DOMAIN: example.com

cache:
  paths:
   - target/

stages:
  - build
  - test
  - deploy

build:
  before_script:
    - echo &amp;quot;before-script in job&amp;quot;
  stage: build
  tags:
    - build
  only:
    - master
  script:
    - ls
    - id
    - mvn clean package -DskipTests
    - ls target
    - echo &amp;quot;$DOMAIN&amp;quot;
    - false &amp;amp;&amp;amp; true ; exit_code=$?
    - if [ $exit_code -ne 0 ]; then echo &amp;quot;Previous command failed&amp;quot;; fi;
    - sleep 2;
  after_script:
    - echo &amp;quot;after script in job&amp;quot;


unittest:
  stage: test
  tags:
    - build
  only:
    - master
  script:
    - echo &amp;quot;run test&amp;quot;
    - echo &#39;test&#39; &amp;gt;&amp;gt; target/a.txt
    - ls target
  retry:
    max: 2
    when:
      - script_failure

deploy:
  stage: deploy
  tags:
    - build
  only:
    - master
  script:
    - echo &amp;quot;run deploy&amp;quot;
    - ls target
  retry:
    max: 2
    when:
      - script_failure


after_script:
  - echo &amp;quot;after-script&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;
&lt;p&gt;Pipeline 日志分析&lt;/p&gt;
&lt;p&gt;build 作业运行时会对项目代码打包，然后生成 target 目录。作业结束创建缓存。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/20.png&#34;&gt;&lt;img src=&#34;images.assets/20.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始第二个作业 test，此时会把当前目录中的 target 目录删除掉（因为做了 git 对比）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/22.png&#34;&gt;&lt;img src=&#34;images.assets/22.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取到第一个作业生成的缓存 target 目录。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/21.png&#34;&gt;&lt;img src=&#34;images.assets/21.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始第三个作业，同样先删除了 target 目录，然后获取了第二个作业的缓存。最后生成了当前的缓存。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/23.png&#34;&gt;&lt;img src=&#34;images.assets/23.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Runner 缓存&lt;/p&gt;
&lt;p&gt;在做本次实验的时候我现在本地 runner 清除了项目的工作目录和历史缓存。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@zeyang-nuc-service ~]# cd /home/gitlab-runner/builds/1Cxihk7-/0/demo/demo-maven-service/
[root@zeyang-nuc-service demo-maven-service]# ls
Jenkinsfile  README.md  aaaaa  jenkins  pom.xml  src  target
[root@zeyang-nuc-service demo-maven-service]# cd ..
[root@zeyang-nuc-service demo]# ls
demo-maven-service  demo-maven-service.tmp
[root@zeyang-nuc-service demo]# rm -fr demo-maven-service
[root@zeyang-nuc-service demo]# rm -fr demo-maven-service.tmp/
[root@zeyang-nuc-service demo]# cd
[root@zeyang-nuc-service ~]# cd /home/gitlab-runner/cache/
[root@zeyang-nuc-service cache]# ls
demo
[root@zeyang-nuc-service cache]# rm -rf *
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;项目代码默认不会删除，可以发现是第二次作业的缓存。（因为上面的例子中第三次作业并没有修改缓存内容）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@zeyang-nuc-service cache]# cd /home/gitlab-runner/builds/1Cxihk7-/0/demo/demo-maven-service/
[root@zeyang-nuc-service demo-maven-service]# ls
Jenkinsfile  README.md  aaaaa  jenkins  pom.xml  src  target
[root@zeyang-nuc-service demo-maven-service]# cd ..
[root@zeyang-nuc-service demo]# ls
demo-maven-service  demo-maven-service.tmp
[root@zeyang-nuc-service demo]# rm -fr *
[root@zeyang-nuc-service demo]# ls
[root@zeyang-nuc-service demo]# ls
demo-maven-service  demo-maven-service.tmp
[root@zeyang-nuc-service demo]# cd demo-maven-service
[root@zeyang-nuc-service demo-maven-service]# ls
Jenkinsfile  README.md  aaaaa  jenkins  pom.xml  src  target
[root@zeyang-nuc-service demo-maven-service]# cat target/a.txt
test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进入 runner 缓存目录中查看缓存。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@zeyang-nuc-service ~]# cd /home/gitlab-runner/cache/demo/demo-maven-service/default/
[root@zeyang-nuc-service default]# ls
cache.zip
[root@zeyang-nuc-service default]# unzip cache.zip
Archive:  cache.zip
   creating: target/
  inflating: target/a.txt
   creating: target/classes/
   creating: target/classes/com/
   creating: target/classes/com/mycompany/
   creating: target/classes/com/mycompany/app/
  inflating: target/classes/com/mycompany/app/App.class
   creating: target/maven-archiver/
  inflating: target/maven-archiver/pom.properties
   creating: target/maven-status/
   creating: target/maven-status/maven-compiler-plugin/
   creating: target/maven-status/maven-compiler-plugin/compile/
   creating: target/maven-status/maven-compiler-plugin/compile/default-compile/
  inflating: target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst
  inflating: target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst
   creating: target/maven-status/maven-compiler-plugin/testCompile/
   creating: target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/
  inflating: target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/createdFiles.lst
  inflating: target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst
  inflating: target/my-app-1.1-SNAPSHOT.jar
   creating: target/test-classes/
   creating: target/test-classes/com/
   creating: target/test-classes/com/mycompany/
   creating: target/test-classes/com/mycompany/app/
  inflating: target/test-classes/com/mycompany/app/AppTest.class
[root@zeyang-nuc-service default]# ls
cache.zip  target
[root@zeyang-nuc-service default]# cd target/
[root@zeyang-nuc-service target]# ls
a.txt  classes  maven-archiver  maven-status  my-app-1.1-SNAPSHOT.jar  test-classes
[root@zeyang-nuc-service target]# cat a.txt
test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时此刻再次运行流水线作业，第一个作业用的是上个作业最后生成的缓存。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/24.png&#34;&gt;&lt;img src=&#34;images.assets/24.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;进入 runner 缓存目录查看,cache.zip 时间已经发生的变化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@zeyang-nuc-service default]# ll
total 12
-rw------- 1 gitlab-runner gitlab-runner 9172 Apr 29 10:27 cache.zip
drwxrwxr-x 6 root          root           127 Apr 29 10:05 target
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结论： 全局缓存生效于未在作业中定义缓存的所有作业，这种情况如果每个作业都对缓存目录做了更改，会出现缓存被覆盖的场景。&lt;/p&gt;
&lt;h4 id=&#34;325-综合实例二&#34;&gt;3.25 综合实例（二）&lt;/h4&gt;
&lt;p&gt;控制缓存策略&lt;/p&gt;
&lt;p&gt;例如 build 阶段我们需要生成新的 target 目录内容，可以优化设置 job 运行时不下载缓存。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/25.png&#34;&gt;&lt;img src=&#34;images.assets/25.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;before_script:
  - echo &amp;quot;before-script!!&amp;quot;

variables:
  DOMAIN: example.com

cache:
  paths:
   - target/

stages:
  - build
  - test
  - deploy

build:
  before_script:
    - echo &amp;quot;before-script in job&amp;quot;
  stage: build
  tags:
    - build
  only:
    - master
  script:
    - ls
    - id
    - cat target/a.txt
    - mvn clean package -DskipTests
    - ls target
    - echo &amp;quot;$DOMAIN&amp;quot;
    - false &amp;amp;&amp;amp; true ; exit_code=$?
    - if [ $exit_code -ne 0 ]; then echo &amp;quot;Previous command failed&amp;quot;; fi;
    - sleep 2;
  after_script:
    - echo &amp;quot;after script in job&amp;quot;
  cache:
    policy: pull   #不下载缓存


unittest:
  stage: test
  tags:
    - build
  only:
    - master
  script:
    - echo &amp;quot;run test&amp;quot;
    - echo &#39;test&#39; &amp;gt;&amp;gt; target/a.txt
    - ls target
    - cat target/a.txt
  retry:
    max: 2
    when:
      - script_failure

deploy:
  stage: deploy
  tags:
    - build
  only:
    - master
  script:
    - cat target/a.txt
    - echo &amp;quot;run deploy&amp;quot;
    - ls target
    - echo &amp;quot;deploy&amp;quot; &amp;gt;&amp;gt; target/a.txt
  retry:
    max: 2
    when:
      - script_failure


after_script:
  - echo &amp;quot;after-script&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;326-artifacts&#34;&gt;3.26 artifacts&lt;/h4&gt;
&lt;p&gt;用于指定在作业成功或者失败时应附加到作业的文件或目录的列表。作业完成后，工件将被发送到 GitLab，并可在 GitLab UI 中下载。&lt;/p&gt;
&lt;h5 id=&#34;3261-artifactspaths&#34;&gt;3.26.1 artifacts:paths&lt;/h5&gt;
&lt;p&gt;路径是相对于项目目录的，不能直接链接到项目目录之外。&lt;/p&gt;
&lt;p&gt;将制品目录设置为 target 目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;artifacts:
  paths:
    - target/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/26.png&#34;&gt;&lt;img src=&#34;images.assets/image-20200601151825397.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;禁用工件传递&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job:
  stage: build
  script: make build
  dependencies: []
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您可能只想为标记的发行版创建构件，以避免用临时构建构件填充构建服务器存储。仅为标签创建工件（ &lt;code&gt;default-job&lt;/code&gt;不会创建工件）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;default-job:
  script:
    - mvn test -U
  except:
    - tags

release-job:
  script:
    - mvn package -U
  artifacts:
    paths:
      - target/*.war
  only:
    - tags
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;3262-artifactsexpose_as&#34;&gt;3.26.2 artifacts:expose_as&lt;/h5&gt;
&lt;p&gt;关键字&lt;code&gt;expose_as&lt;/code&gt;可用于在合并请求 UI 中公开 job 的制品文件。&lt;/p&gt;
&lt;p&gt;例如，要匹配单个文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span class=&#34;k&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- echo&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;artifacts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;expose_as&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;artifact 1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- path/to/file.txt&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用此配置，GitLab 将在指向的相关合并请求中添加链接&lt;code&gt;file1.txt&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/27.png&#34;&gt;&lt;img src=&#34;images.assets/27.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看制品文件&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/28.png&#34;&gt;&lt;img src=&#34;images.assets/28.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;请注意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个合并请求最多可以公开 10 个作业工件。&lt;/li&gt;
&lt;li&gt;如果指定了目录，那么如果目录中有多个文件，则该链接将指向指向作业工件浏览器。&lt;/li&gt;
&lt;li&gt;如果开启 GitlabPages 可以对.html .htm .txt .json .log 扩展名单个文件工件渲染工件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3263-artifactsname&#34;&gt;3.26.3 artifacts:name&lt;/h5&gt;
&lt;p&gt;通过&lt;code&gt;name&lt;/code&gt;指令定义所创建的工件存档的名称。可以为每个归档使用唯一的名称。 &lt;code&gt;artifacts:name&lt;/code&gt;变量可以使用任何&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/variables/README.html&#34;&gt;预定义变量&lt;/a&gt;。默认名称是&lt;code&gt;artifacts&lt;/code&gt;，下载&lt;code&gt;artifacts&lt;/code&gt;改为&lt;code&gt;artifacts.zip&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用当前作业的名称创建档案&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job:
  artifacts:
    name: &amp;quot;$CI_JOB_NAME&amp;quot;
    paths:
      - binaries/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用内部分支或标记的名称（仅包括 binaries 目录）创建 artifacts，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job:
  artifacts:
    name: &amp;quot;$CI_COMMIT_REF_NAME&amp;quot;
    paths:
      - binaries/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用当前作业的名称和当前分支或标记（仅包括二进制文件目录）创建 artifacts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job:
  artifacts:
    name: &amp;quot;$CI_JOB_NAME-$CI_COMMIT_REF_NAME&amp;quot;
    paths:
      - binaries/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要创建一个具有当前&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#stages&#34;&gt;阶段&lt;/a&gt;名称和分支名称的 artifacts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job:
  artifacts:
    name: &amp;quot;$CI_JOB_STAGE-$CI_COMMIT_REF_NAME&amp;quot;
    paths:
      - binaries/
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;3264-artifactswhen&#34;&gt;3.26.4 artifacts:when&lt;/h5&gt;
&lt;p&gt;用于在作业失败时或尽管失败而上传工件。on_success 仅在作业成功时上载工件。这是默认值。on_failure 仅在作业失败时上载工件。always 上载工件，无论作业状态如何。&lt;/p&gt;
&lt;p&gt;要仅在作业失败时上传工件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job:
  artifacts:
    when: on_failure
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;3265-artifactsexpire_in&#34;&gt;3.26.5 artifacts:expire_in&lt;/h5&gt;
&lt;p&gt;制品的有效期，从上传和存储到 GitLab 的时间开始算起。如果未定义过期时间，则默认为 30 天。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;expire_in&lt;/code&gt;的值以秒为单位的经过时间，除非提供了单位。可解析值的示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‘42’
‘3 mins 4 sec’
‘2 hrs 20 min’
‘2h20min’
‘6 mos 1 day’
‘47 yrs 6 mos and 4d’
‘3 weeks and 2 days’
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一周后过期&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;job:
  artifacts:
    expire_in: 1 week
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;3266-artifactsreports&#34;&gt;3.26.6 artifacts:reports&lt;/h5&gt;
&lt;p&gt;用于从作业中收集测试报告，代码质量报告和安全报告. 在 GitLab 的 UI 中显示这些报告。&lt;/p&gt;
&lt;p&gt;**注意：**无论作业结果（成功或失败），都将收集测试报告。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;artifacts:reports:junit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;收集 junit 单元测试报告，收集的 JUnit 报告将作为工件上传到 GitLab，并将自动显示在合并请求中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;build:
  stage: build
  tags:
    - build
  only:
    - master
  script:
    - mvn test
    - mvn cobertura:cobertura
    - ls target
  artifacts:
    name: &amp;quot;$CI_JOB_NAME-$CI_COMMIT_REF_NAME&amp;quot;
    when: on_success
    expose_as: &#39;artifact 1&#39;
    paths:
      - target/*.jar
    reports:
      junit: target/surefire-reports/TEST-*.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;**注意：**如果您使用的 JUnit 工具导出到多个 XML 文件，则可以在一个作业中指定多个测试报告路径，它们将被自动串联到一个文件中. 使用文件名模式（ &lt;code&gt;junit: rspec-*.xml&lt;/code&gt; ），文件名数组（ &lt;code&gt;junit: [rspec-1.xml, rspec-2.xml, rspec-3.xml]&lt;/code&gt; ）或其组合（ &lt;code&gt;junit: [rspec.xml, test-results/TEST-*.xml]&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/30.png&#34;&gt;&lt;img src=&#34;images.assets/30.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/29.png&#34;&gt;&lt;img src=&#34;images.assets/29.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果无法显示此页面，需要更改系统设置。此选项可能会加大资源占用，默认禁用了需要启用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;登录gitlab
su -  git
$ gitlab-rails console
--------------------------------------------------------------------------------
 GitLab:       12.9.0 (9a382ff2c82) FOSS
 GitLab Shell: 12.0.0
 PostgreSQL:   10.12
--------------------------------------------------------------------------------
Feature.enable(:junit_pipeline_view)Loading production environment (Rails 6.0.2)
irb(main):001:0&amp;gt;
irb(main):002:0&amp;gt;
irb(main):003:0&amp;gt; Feature.enable(:junit_pipeline_view)
=&amp;gt; true
irb(main):004:0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考链接：https://docs.gitlab.com/ee/ci/junit_test_reports.html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;artifacts:reports:cobertura&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;收集的 Cobertura 覆盖率报告将作为工件上传到 GitLab，并在合并请求中自动显示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;build:
  stage: build
  tags:
    - build
  only:
    - master
  script:
    - mvn test
    - mvn cobertura:cobertura
    - ls target
  artifacts:
    name: &amp;quot;$CI_JOB_NAME-$CI_COMMIT_REF_NAME&amp;quot;
    when: on_success
    expose_as: &#39;artifact 1&#39;
    paths:
      - target/*.jar
    reports:
      junit: target/surefire-reports/TEST-*.xml
      cobertura: target/site/cobertura/coverage.xml
$ gitlab-rails console
--------------------------------------------------------------------------------
 GitLab:       12.9.0 (9a382ff2c82) FOSS
 GitLab Shell: 12.0.0
 PostgreSQL:   10.12
--------------------------------------------------------------------------------


Loading production environment (Rails 6.0.2)
irb(main):001:0&amp;gt;
irb(main):002:0&amp;gt;
irb(main):003:0&amp;gt; Feature.enable(:coverage_report_view)
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;maven 集成 cobertura 插件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;plugins&amp;gt;
  &amp;lt;!--  cobertura plugin start --&amp;gt;
  &amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;cobertura-maven-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.7&amp;lt;/version&amp;gt;
    &amp;lt;configuration&amp;gt;
      &amp;lt;formats&amp;gt;
          &amp;lt;format&amp;gt;html&amp;lt;/format&amp;gt;
          &amp;lt;format&amp;gt;xml&amp;lt;/format&amp;gt;
      &amp;lt;/formats&amp;gt;
  	&amp;lt;/configuration&amp;gt;
  &amp;lt;/plugin&amp;gt;
  &amp;lt;!--  cobertura plugin end --&amp;gt;

&amp;lt;/plugins&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行 mvn cobertura:cobertura 运行测试并产生 Cobertura 覆盖率报告。&lt;/p&gt;
&lt;p&gt;参考链接：https://docs.gitlab.com/12.9/ee/user/project/merge_requests/test_coverage_visualization.html&lt;/p&gt;
&lt;p&gt;备注: 实验未做出效果，具体问题待排查。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/31.png&#34;&gt;&lt;img src=&#34;images.assets/31.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;327-dependencies&#34;&gt;3.27 dependencies&lt;/h4&gt;
&lt;p&gt;定义要获取工件的作业列表，只能从当前阶段之前执行的阶段定义作业。定义一个空数组将跳过下载该作业的任何工件不会考虑先前作业的状态，因此，如果它失败或是未运行的手动作业，则不会发生错误。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/32.png&#34;&gt;&lt;img src=&#34;images.assets/32.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果设置为依赖项的作业的工件已过期或删除，那么依赖项作业将失败。&lt;/p&gt;
&lt;h4 id=&#34;328-综合实例&#34;&gt;3.28 综合实例&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;before_script:
  - echo &amp;quot;before-script!!&amp;quot;

variables:
  DOMAIN: example.com


cache:
  paths:
   - target/

stages:
  - build
  - test
  - deploy

build:
  before_script:
    - echo &amp;quot;before-script in job&amp;quot;
  stage: build
  tags:
    - build
  only:
    - master
  script:
    - ls
    - id
    - mvn test
    - mvn cobertura:cobertura
    - ls target
    - echo &amp;quot;$DOMAIN&amp;quot;
    - false &amp;amp;&amp;amp; true ; exit_code=$?
    - if [ $exit_code -ne 0 ]; then echo &amp;quot;Previous command failed&amp;quot;; fi;
    - sleep 2;
  after_script:
    - echo &amp;quot;after script in job&amp;quot;
  artifacts:
    name: &amp;quot;$CI_JOB_NAME-$CI_COMMIT_REF_NAME&amp;quot;
    when: on_success
    #expose_as: &#39;artifact 1&#39;
    paths:
      - target/*.jar
      #- target/surefire-reports/TEST*.xml
    reports:
      junit: target/surefire-reports/TEST-*.xml
      cobertura: target/site/cobertura/coverage.xml
  coverage: &#39;/Code coverage: \d+\.\d+/&#39;


unittest:
  dependencies:
    - build
  stage: test
  tags:
    - build
  only:
    - master
  script:
    - echo &amp;quot;run test&amp;quot;
    - echo &#39;test&#39; &amp;gt;&amp;gt; target/a.txt
    - ls target
  retry:
    max: 2
    when:
      - script_failure

deploy:
  stage: deploy
  tags:
    - build
  only:
    - master
  script:
    - echo &amp;quot;run deploy&amp;quot;
    - ls target
  retry:
    max: 2
    when:
      - script_failure
after_script:
  - echo &amp;quot;after-script&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;329-needs-并行阶段&#34;&gt;3.29 needs 并行阶段&lt;/h4&gt;
&lt;p&gt;可无序执行作业，无需按照 stages 顺序运行某些 jobs，可以让多个 stage 同时运行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stages:
  - build
  - test
  - deploy

module-a-build:
  stage: build
  script:
    - echo &amp;quot;hello3a&amp;quot;
    - sleep 10

module-b-build:
  stage: build
  script:
    - echo &amp;quot;hello3b&amp;quot;
    - sleep 10

module-a-test:
  stage: test
  script:
    - echo &amp;quot;hello3a&amp;quot;
    - sleep 10
  needs: [&amp;quot;module-a-build&amp;quot;]

module-b-test:
  stage: test
  script:
    - echo &amp;quot;hello3b&amp;quot;
    - sleep 10
  needs: [&amp;quot;module-b-build&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/33.png&#34;&gt;&lt;img src=&#34;images.assets/33.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;needs:&lt;/code&gt;设置为指向因&lt;code&gt;only/except&lt;/code&gt;规则而未实例化的作业，或者不存在，则创建管道时会出现 YAML 错误。&lt;/p&gt;
&lt;p&gt;暂时限制了作业在&lt;code&gt;needs:&lt;/code&gt;可能需要的最大作业数分配,&lt;code&gt;ci_dag_limit_needs&lt;/code&gt;功能标志已启用（默认）分配 10 个，如果功能被禁用为 50。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Feature::disable(:ci_dag_limit_needs)   # 50
Feature::enable(:ci_dag_limit_needs)  #10
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;330-制品下载&#34;&gt;3.30 制品下载&lt;/h4&gt;
&lt;p&gt;在使用&lt;code&gt;needs&lt;/code&gt;，可通过&lt;code&gt;artifacts: true&lt;/code&gt;或&lt;code&gt;artifacts: false&lt;/code&gt;来控制工件下载。 默认不指定为 true。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module-a-test:
  stage: test
  script:
    - echo &amp;quot;hello3a&amp;quot;
    - sleep 10
  needs:
    - job: &amp;quot;module-a-build&amp;quot;
      artifacts: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相同项目中的管道制品下载,通过将&lt;code&gt;project&lt;/code&gt;关键字设置为当前项目的名称，并指定引用，可以使用&lt;code&gt;needs&lt;/code&gt;从当前项目的不同管道中下载工件。在下面的示例中，&lt;code&gt;build_job&lt;/code&gt;将使用&lt;code&gt;other-ref&lt;/code&gt;ref 下载最新成功的&lt;code&gt;build-1&lt;/code&gt;作业的工件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;build_job:
  stage: build
  script:
    - ls -lhR
  needs:
    - project: group/same-project-name
      job: build-1
      ref: other-ref
      artifacts: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不支持从&lt;a href=&#34;http://s0docs0gitlab0com.icopy.site/12.9/ee/ci/yaml/README.html#parallel&#34;&gt;&lt;code&gt;parallel:&lt;/code&gt;&lt;/a&gt;运行的作业中下载工件。&lt;/p&gt;
&lt;h4 id=&#34;331-include&#34;&gt;3.31 include&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates&#34;&gt;https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以允许引入外部 YAML 文件，文件具有扩展名&lt;code&gt;.yml&lt;/code&gt;或&lt;code&gt;.yaml&lt;/code&gt; 。使用合并功能可以自定义和覆盖包含本地定义的 CI / CD 配置。相同的 job 会合并，参数值以源文件为准。&lt;/p&gt;
&lt;h4 id=&#34;332-local&#34;&gt;3.32 local&lt;/h4&gt;
&lt;p&gt;引入同一存储库中的文件，使用相对于根目录的完整路径进行引用，与配置文件在同一分支上使用。&lt;/p&gt;
&lt;p&gt;ci/localci.yml: 定义一个作业用于发布。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stages:
  - deploy

deployjob:
  stage: deploy
  script:
    - echo &#39;deploy&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;.gitlab-ci.yml 引入本地的 CI 文件’ci/localci.yml’。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include:
  local: &#39;ci/localci.yml&#39;

stages:
  - build
  - test
  - deploy


buildjob:
  stage: build
  script: ls


testjob:
  stage: test
  script: ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/38.png&#34;&gt;&lt;img src=&#34;images.assets/38.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;333-file&#34;&gt;3.33 file&lt;/h4&gt;
&lt;p&gt;包含来自另一个项目的文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include:
  - project: demo/demo-java-service
    ref: master
    file: &#39;.gitlab-ci.yml&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;334-template&#34;&gt;3.34 template&lt;/h4&gt;
&lt;p&gt;只能使用官方提供的模板 &lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab/tree/master/lib/gitlab/ci/templates&#34;&gt;https://gitlab.com/gitlab-org/gitlab/tree/master/lib/gitlab/ci/templates&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include:
  - template: Auto-DevOps.gitlab-ci.yml
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;335-remote&#34;&gt;3.35 remote&lt;/h4&gt;
&lt;p&gt;用于通过 HTTP / HTTPS 包含来自其他位置的文件，并使用完整 URL 进行引用. 远程文件必须可以通过简单的 GET 请求公开访问，因为不支持远程 URL 中的身份验证架构。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include:
  - remote: &#39;https://gitlab.com/awesome-project/raw/master/.gitlab-ci-template.yml&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;336-extends&#34;&gt;3.36 extends&lt;/h4&gt;
&lt;p&gt;继承模板 jobs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stages:
  - test
variables:
  RSPEC: &#39;test&#39;

.tests:
  script: echo &amp;quot;mvn test&amp;quot;
  stage: test
  only:
    refs:
      - branches

testjob:
  extends: .tests
  script: echo &amp;quot;mvn clean test&amp;quot;
  only:
    variables:
      - $RSPEC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;合并后&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;testjob:
  stage: test
  script: mvn clean test
  only:
    variables:
      - $RSPEC
    refs:
      - branches
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;337-extends--include&#34;&gt;3.37 extends &amp;amp; include&lt;/h4&gt;
&lt;p&gt;aa.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#stages:
#  - deploy

deployjob:
  stage: deploy
  script:
    - echo &#39;deploy&#39;
  only:
    - dev

.template:
  stage: build
  script:
    - echo &amp;quot;build&amp;quot;
  only:
    - master
include:
  local: &#39;ci/localci.yml&#39;

stages:
  - test
  - build
  - deploy

variables:
  RSPEC: &#39;test&#39;

.tests:
  script: echo &amp;quot;mvn test&amp;quot;
  stage: test
  only:
    refs:
      - branches

testjob:
  extends: .tests
  script: echo &amp;quot;mvn clean test&amp;quot;
  only:
    variables:
      - $RSPEC


newbuildjob:
  script:
    - echo &amp;quot;123&amp;quot;
  extends: .template
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这将运行名为&lt;code&gt;useTemplate&lt;/code&gt;的作业，该作业运行&lt;code&gt;echo Hello!&lt;/code&gt; 如&lt;code&gt;.template&lt;/code&gt;作业中所定义，并使用本地作业中所定义的&lt;code&gt;alpine&lt;/code&gt; Docker 映像.&lt;/p&gt;
&lt;h4 id=&#34;338-trigger-管道触发&#34;&gt;3.38 trigger 管道触发&lt;/h4&gt;
&lt;p&gt;当 GitLab 从&lt;code&gt;trigger&lt;/code&gt;定义创建的作业启动时，将创建一个下游管道。允许创建多项目管道和子管道。将&lt;code&gt;trigger&lt;/code&gt;与&lt;code&gt;when:manual&lt;/code&gt;一起使用会导致错误。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多项目管道&lt;/strong&gt;： 跨多个项目设置流水线，以便一个项目中的管道可以触发另一个项目中的管道。[微服务架构]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;父子管道&lt;/strong&gt;: 在同一项目中管道可以触发一组同时运行的子管道,子管道仍然按照阶段顺序执行其每个作业，但是可以自由地继续执行各个阶段，而不必等待父管道中无关的作业完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;339-多项目管道&#34;&gt;3.39 多项目管道&lt;/h4&gt;
&lt;p&gt;当前面阶段运行完成后，触发 demo/demo-java-service 项目 master 流水线。创建上游管道的用户需要具有对下游项目的访问权限。如果发现下游项目用户没有访问权限以在其中创建管道，则&lt;code&gt;staging&lt;/code&gt;作业将被标记为&lt;em&gt;失败&lt;/em&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;staging:
  variables:
    ENVIRONMENT: staging
  stage: deploy
  trigger:
    project: demo/demo-java-service
    branch: master
    strategy: depend
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;project&lt;/code&gt;关键字，用于指定下游项目的完整路径。该&lt;code&gt;branch&lt;/code&gt;关键字指定由指定的项目分支的名称。使用&lt;code&gt;variables&lt;/code&gt;关键字将变量传递到下游管道。 全局变量也会传递给下游项目。上游管道优先于下游管道。如果在上游和下游项目中定义了两个具有相同名称的变量，则在上游项目中定义的变量将优先。默认情况下，一旦创建下游管道，&lt;code&gt;trigger&lt;/code&gt;作业就会以&lt;code&gt;success&lt;/code&gt;状态完成。&lt;code&gt;strategy: depend&lt;/code&gt;将自身状态从触发的管道合并到源作业。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/34.png&#34;&gt;&lt;img src=&#34;images.assets/34.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在下游项目中查看管道信息&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/35.png&#34;&gt;&lt;img src=&#34;images.assets/35.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在此示例中，一旦创建了下游管道，该&lt;code&gt;staging&lt;/code&gt;将被标记为成功。&lt;/p&gt;
&lt;h4 id=&#34;340-父子管道&#34;&gt;3.40 父子管道&lt;/h4&gt;
&lt;p&gt;创建子管道 ci/child01.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stages:
  - build

child-a-build:
  stage: build
  script:
    - echo &amp;quot;hello3a&amp;quot;
    - sleep 10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在父管道触发子管道&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;staging2:
  variables:
    ENVIRONMENT: staging
  stage: deploy
  trigger:
    include: ci/child01.yml
    strategy: depend
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter03/01/images/36.png&#34;&gt;&lt;img src=&#34;images.assets/36.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;准备工作注册 docker 类型的 runner&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gitlab-runner register \
  --non-interactive \
  --executor &amp;quot;docker&amp;quot; \
  --docker-image alpine:latest \
  --url &amp;quot;http://192.168.1.200:30088/&amp;quot; \
  --registration-token &amp;quot;JRzzw2j1Ji6aBjwvkxAv&amp;quot; \
  --description &amp;quot;docker-runner&amp;quot; \
  --tag-list &amp;quot;newdocker&amp;quot; \
  --run-untagged=&amp;quot;true&amp;quot; \
  --locked=&amp;quot;false&amp;quot; \
  --docker-privileged \
  --access-level=&amp;quot;not_protected&amp;quot;
[[runners]]
  name = &amp;quot;docker-runner&amp;quot;
  url = &amp;quot;http://192.168.1.200:30088/&amp;quot;
  token = &amp;quot;xuaLZD7xUVviTsyeJAWh&amp;quot;
  executor = &amp;quot;docker&amp;quot;
  [runners.custom_build_dir]
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]
  [runners.docker]
    pull_policy = &amp;quot;if-not-present&amp;quot;
    tls_verify = false
    image = &amp;quot;alpine:latest&amp;quot;
    privileged = true
    disable_entrypoint_overwrite = false
    oom_kill_disable = false
    disable_cache = false
    volumes = [&amp;quot;/cache&amp;quot;]
    shm_size = 0
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;341-image&#34;&gt;3.41 image&lt;/h4&gt;
&lt;p&gt;默认在注册 runner 的时候需要填写一个基础的镜像，请记住一点只要使用执行器为 docker 类型的 runner 所有的操作运行都会在容器中运行。 如果全局指定了 images 则所有作业使用此 image 创建容器并在其中运行。 全局未指定 image，再次查看 job 中是否有指定，如果有此 job 按照指定镜像创建容器并运行，没有则使用注册 runner 时指定的默认镜像。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#image: maven:3.6.3-jdk-8

before_script:
  - ls
build:
  image: maven:3.6.3-jdk-8
  stage: build
  tags:
    - newdocker
  script:
    - ls
    - sleep 2
    - echo &amp;quot;mvn clean &amp;quot;
    - sleep 10

deploy:
  stage: deploy
  tags:
    - newdocker
  script:
    - echo &amp;quot;deploy&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;342-services&#34;&gt;3.42 services&lt;/h4&gt;
&lt;p&gt;工作期间运行的另一个 Docker 映像，并 link 到&lt;code&gt;image&lt;/code&gt;关键字定义的 Docker 映像。这样，您就可以在构建期间访问服务映像.&lt;/p&gt;
&lt;p&gt;服务映像可以运行任何应用程序，但是最常见的用例是运行数据库容器，例如&lt;code&gt;mysql&lt;/code&gt; 。与每次安装项目时都安装&lt;code&gt;mysql&lt;/code&gt;相比，使用现有映像并将其作为附加容器运行更容易，更快捷。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;services:
  - name: mysql:latest
    alias: mysql-1
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;343-environment&#34;&gt;3.43 environment&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;deploy to production:
  stage: deploy
  script: git push production HEAD:master
  environment:
    name: production
    url: https://prod.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;344-inherit&#34;&gt;3.44 inherit&lt;/h4&gt;
&lt;p&gt;使用或禁用全局定义的环境变量（variables）或默认值(default)。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;使用 true、false 决定是否使用，默认为 true&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inherit:
  default: false
  variables: false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;继承其中的一部分变量或默认值使用 list&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inherit:
  default:
    - parameter1
    - parameter2
  variables:
    - VARIABLE1
    - VARIABLE2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4-模板库设计&#34;&gt;4 模板库设计&lt;/h3&gt;
&lt;p&gt;为了实现模板复用，减少重复代码。本次课程开始我们将使用模板库来完成流水线。开始之前还是要把语法学好便于进一步实施。&lt;/p&gt;
&lt;p&gt;创建一个 git 仓库用于存放模板&lt;code&gt;demo/demo-gitlabci-service&lt;/code&gt; ，然后创建一个 template 目录存放所有 pipeline 的模板，创建一个 jobs 目录存放 job 模板。&lt;/p&gt;
&lt;p&gt;这样我们可以将一些 maven、ant、gradle、npm 工具通过一个 job 模板和不同的构建命令实现。templates 的好处是我们在其中定义了模板流水线，这些流水线可以直接让项目使用。当遇到个性化项目的时候就可以在当前项目创建.gitlab-ci.yml 文件来引用模板文件，再进一步实现个性化需要。&lt;/p&gt;
&lt;h4 id=&#34;41-模板库信息&#34;&gt;4.1 模板库信息&lt;/h4&gt;
&lt;p&gt;github : &lt;a href=&#34;https://github.com/zeyangli/gitlabci-templates&#34;&gt;https://github.com/zeyangli/gitlabci-templates&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;42-项目信息&#34;&gt;4.2 项目信息&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;视频中仓库地址&lt;/th&gt;
&lt;th&gt;github 仓库地址&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;demo/demo-maven-service&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/zeyangli/gitlabci-demo-maven-service&#34;&gt;zeyangli/gitlabci-demo-maven-service&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;测试 ci 语法项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cidevops-java-service&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/zeyangli/gitlabci-cidevops-java-service.git&#34;&gt;zeyangli/gitlabci-cidevops-java-service&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;构建工具集成项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cidevops-npm-service&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/zeyangli/gitlabci-cidevops-npm-service.git&#34;&gt;zeyangli/gitlabci-cidevops-npm-service&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;npm 集成项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cidevops-interfacetest-service&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/zeyangli/gitlabci-cidevops-interfacetest-service&#34;&gt;zeyangli/gitlabci-cidevops-interfacetest-service&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;自动化测试集成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cidevops-gitlabci-service&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/zeyangli/gitlabci-templates&#34;&gt;zeyangli/gitlabci-templates&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;模板库项目&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;43-集成构建工具&#34;&gt;4.3 集成构建工具&lt;/h4&gt;
&lt;p&gt;构建工具是用来将代码编译打包成制品的工具。例如前端项目我们一般使用 npm 进行打包，后端 java 项目我们一般使用 maven、gradle 进行打包。构建工具很多很多，但是集成到 gitlab 中是一样的。所以这里简单介绍使用 gitlabCI 集成 npm/maven 完成前后端项目的构建。&lt;/p&gt;
&lt;h4 id=&#34;44-软件包下载&#34;&gt;4.4 软件包下载&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://maven.apache.org/download.cgi&#34;&gt;maven 软件包下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.gradle.org/distributions/gradle-5.3-bin.zip&#34;&gt;gradle 软件包下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ant.apache.org/bindownload.cgi&#34;&gt;ant 软件包下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;node 软件包下载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;45-环境配置&#34;&gt;4.5 环境配置&lt;/h4&gt;
&lt;p&gt;首先，我们需要在 runner 机器中安装配置好 apache-maven。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#解压
tar zxf apache-maven-xxxx.tar.gz  -C /usr/local
tar zxf gradle-xxxx.tar.gz -C /usr/local
tar zxf node-xxxxx.tar.gz -C /usr/local
tar zxf apache-ant-xxxx.tar.gz -C /usr/local

#添加环境变量
vim /etc/profile
export MAVEN_HOME=/usr/local/apache-maven-3.6.0
export ANT_HOME=/usr/local/apache-ant-1.10.5
export GRADLE_HOME=/usr/local/gradle-5.3
export NODE_HOME=/usr/local/node-v10.15.3-linux-x64
export JAVA_HOME=/usr/local/jdk1.8.0_201
export PATH=$PATH:$MAVEN_HOME/bin:$ANT_HOME/bin:$GRADLE_HOME/bin:$NODE_HOME/bin
export PATH=$PATH:$JAVA_HOME/bin

# 生效全局环境变量
source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;46-maven-集成模板库配置&#34;&gt;4.6 maven 集成模板库配置&lt;/h4&gt;
&lt;p&gt;我们首先在 jobs 目录中创建一个 build.yml，然后在里面编写 build 作业模板。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.build:
  stage: build
  tags:
    - build
  script:
    - $BUILD_SHELL
    - ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们计划将测试相关的 job 都定义在 jobs/test.yml 中，我们开始创建并编写 test 作业。运行测试 shell 并收集单元测试报告。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#单元测试

.test:
  stage: test
  tags:
    - build
  script:
    - $TEST_SHELL
    - ls
  artifacts:
    reports:
      junit: ${JUNIT_REPORT_PATH}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们在 template 目录中创建 maven 流水线模板。 templates/java-pipeline.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include:
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/build.yml&#39;
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/test.yml&#39;

variables:
  BUILD_SHELL: &#39;mvn clean package  -DskipTests&#39;  ##构建命令
  CACHE_DIR: &#39;target/&#39;
  TEST_SHELL : &#39;mvn test&#39;                                   ##测试命令
  JUNIT_REPORT_PATH: &#39;target/surefire-reports/TEST-*.xml&#39;   ##单元测试报告

cache:
  paths:
    - ${CACHE_DIR}

stages:
  - build
  - test


build:
  stage: build
  extends: .build

test:
  stage: test
  extends: .test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后我们在项目中添加.gitlab-ci.yml 来引用模板构建流水线。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include:
    - project: &#39;cidevops/cidevops-gitlabci-service&#39;
      ref: master
      file: &#39;templates/java-pipeline.yml&#39;

variables:
  BUILD_SHELL: &#39;mvn clean package  -DskipTests&#39;
  TEST_SHELL: &#39;mvn  test&#39;
  CACHE_DIR: &#39;target/&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/003.png&#34;&gt;&lt;img src=&#34;images.assets/003.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好的，上面我们已经实现了构建，但是一般还回运行单元测试。接下来我们实现。&lt;/p&gt;
&lt;h4 id=&#34;47-npm-集成模板配置&#34;&gt;4.7 npm 集成模板配置&lt;/h4&gt;
&lt;p&gt;template/web-pipeline.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include:
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/build.yml&#39;

variables:
  BUILD_SHELL: &#39;npm run build&#39;     ##构建命令
  CACHE_DIR  : &amp;quot;dist/&amp;quot;             ##构建缓存


cache:
  paths:
    - ${CACHE_DIR}
    - node_modules/

stages:
  - install
  - build

install:
  stage: install
  script:
    - &#39;npm install&#39;

build:
  stage: build
  extends: .build
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;48-集成代码质量-sonarqube&#34;&gt;4.8 集成代码质量 sonarqube&lt;/h4&gt;
&lt;h5 id=&#34;481-内容&#34;&gt;4.8.1 内容&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;SonarQube 基础简介&lt;/li&gt;
&lt;li&gt;配置 GitLabCI 代码扫描&lt;/li&gt;
&lt;li&gt;配置 GitLabCI 合并扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;482-准备工作&#34;&gt;4.8.2 准备工作&lt;/h5&gt;
&lt;p&gt;参考链接：https://docs.sonarqube.org/latest/analysis/gitlab-cicd/&lt;/p&gt;
&lt;p&gt;扩展插件： &lt;a href=&#34;https://github.com/mc1arke/sonarqube-community-branch-plugin/releases&#34;&gt;https://github.com/mc1arke/sonarqube-community-branch-plugin/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&#34;http://119.3.228.122/jenkins/pipelineintegrated/chapter04/#%E9%85%8D%E7%BD%AE%E5%A4%9A%E5%88%86%E6%94%AF&#34;&gt;参考文章链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gitlab 内置环境变量： http://192.168.1.200:30088/help/ci/variables/README#variables&lt;/p&gt;
&lt;p&gt;在 SonarQube 中创建项目组添加用户，为用户分配权限。使用用户 token 分析扫描项目。&lt;/p&gt;
&lt;h5 id=&#34;483-准备用户&#34;&gt;4.8.3 准备用户&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/04.png&#34;&gt;&lt;img src=&#34;images.assets/04-20200601175124233.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;484-创建群组&#34;&gt;4.8.4 创建群组&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/01.png&#34;&gt;&lt;img src=&#34;images.assets/01-20200601175111650.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;485-创建权限模板&#34;&gt;4.8.5 创建权限模板&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/02.png&#34;&gt;&lt;img src=&#34;images.assets/02-20200601175116370.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;486-分配权限&#34;&gt;4.8.6 分配权限&lt;/h5&gt;
&lt;p&gt;一般给这个组中的成员管理员权限&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/03.png&#34;&gt;&lt;img src=&#34;images.assets/03-20200601175117673.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;487-为项目授权权限模板&#34;&gt;4.8.7 为项目授权权限模板&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/05.png&#34;&gt;&lt;img src=&#34;images.assets/05-20200601175128721.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;488-添加-token&#34;&gt;4.8.8 添加 token&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/06.png&#34;&gt;&lt;img src=&#34;images.assets/06-20200601175115403.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;489-扫描分析&#34;&gt;4.8.9 扫描分析&lt;/h5&gt;
&lt;p&gt;jobs/codeanalysis.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.codeanalysis-java:
  stage: code_analysis
  tags:
    - build
  script:
    - echo $CI_MERGE_REQUEST_IID $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME  $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - &amp;quot;$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=${CI_PROJECT_NAME} \
                                      -Dsonar.projectName=${CI_PROJECT_NAME} \
                                      -Dsonar.projectVersion=${CI_COMMIT_REF_NAME} \
                                      -Dsonar.ws.timeout=30 \
                                      -Dsonar.projectDescription=${CI_PROJECT_TITLE} \
                                      -Dsonar.links.homepage=${CI_PROJECT_URL} \
                                      -Dsonar.sources=${SCAN_DIR} \
                                      -Dsonar.sourceEncoding=UTF-8 \
                                      -Dsonar.java.binaries=target/classes \
                                      -Dsonar.java.test.binaries=target/test-classes \
                                      -Dsonar.java.surefire.report=target/surefire-reports \
                                      -Dsonar.branch.name=${CI_COMMIT_REF_NAME}&amp;quot;
  artifacts:
    paths:
      - &amp;quot;$ARTIFACT_PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;template/java-pipeline.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include:
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/build.yml&#39;
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/test.yml&#39;
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/codeanalysis.yml&#39;

variables:
  BUILD_SHELL: &#39;mvn clean package  -DskipTests&#39;  ##构建命令
  CACHE_DIR: &#39;target/&#39;
  TEST_SHELL : &#39;mvn test&#39;                                   ##测试命令
  JUNIT_REPORT_PATH: &#39;target/surefire-reports/TEST-*.xml&#39;   ##单元测试报告
  # 代码扫描
  SCANNER_HOME : &amp;quot;/usr/local/buildtools/sonar-scanner-3.2.0.1227-linux&amp;quot;
  SCAN_DIR : &amp;quot;src&amp;quot;
  ARTIFACT_PATH : &#39;target/*.jar&#39;                            ##制品目录

cache:
  paths:
    - ${CACHE_DIR}

stages:
  - build
  - test
  - code_analysis


build:
  stage: build
  extends: .build
  rules:
    - when: on_success


test:
  stage: test
  extends: .test
  rules:
    - when: on_success


code_analysis:
  stage: code_analysis
  extends: .codeanalysis-java
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实现效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/004.png&#34;&gt;&lt;img src=&#34;images.assets/004.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;4810-pull-request-集成&#34;&gt;4.8.10 Pull request 集成&lt;/h5&gt;
&lt;p&gt;配置 SonarQube，添加 gitlabtoken 和服务信息。系统设置 -&amp;gt; pull request。&lt;/p&gt;
&lt;p&gt;注意下面的配置在配置文件中定义不生效哦，可能是因为版本的问题导致的。暂且忽略。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;com.github.mc1arke.sonarqube.plugin.branch.pullrequest.gitlab.token=b8Gs1quX5GSeHwyuMWyY
com.github.mc1arke.sonarqube.plugin.branch.pullrequest.gitlab.url=http://192.168.1.200:30088
sonar.pullrequest.provider=GitlabServer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你想通过 API 操作可以参考：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -u &amp;quot;$SONAR_API_TOKEN&amp;quot; -X POST &amp;quot;http://sonarqube.example.com/api/settings/set?key=sonar.pullrequest.provider&amp;amp;value=GitlabServer&amp;quot;
curl -u &amp;quot;$SONAR_API_TOKEN&amp;quot; -X POST &amp;quot;http://sonarqube.example.com/api/settings/set?key=com.github.mc1arke.sonarqube.plugin.branch.pullrequest.gitlab.url&amp;amp;value=http://gitlab.example.com&amp;quot;
curl -u &amp;quot;$SONAR_API_TOKEN&amp;quot; -X POST &amp;quot;http://sonarqube.example.com/api/settings/set?key=com.github.mc1arke.sonarqube.plugin.branch.pullrequest.gitlab.token&amp;amp;value= $ GITLAB_TOKEN&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/10.png&#34;&gt;&lt;img src=&#34;images.assets/10-20200601175127933.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加扫描作业，主要是分析参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.codeanalysis-mr:
  stage: code_analysis
  only:
    - merge_requests
  tags:
    - build
  script:
    - &amp;quot;$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=${CI_PROJECT_NAME} \
                                      -Dsonar.projectName=${CI_PROJECT_NAME} \
                                      -Dsonar.projectVersion=${CI_COMMIT_REF_NAME} \
                                      -Dsonar.ws.timeout=30 \
                                      -Dsonar.projectDescription=${CI_PROJECT_TITLE} \
                                      -Dsonar.links.homepage=${CI_PROJECT_URL} \
                                      -Dsonar.sources=${SCAN_DIR} \
                                      -Dsonar.sourceEncoding=UTF-8 \
                                      -Dsonar.java.binaries=target/classes \
                                      -Dsonar.java.test.binaries=target/test-classes \
                                      -Dsonar.java.surefire.report=target/surefire-reports \
                                      -Dsonar.pullrequest.key=${CI_MERGE_REQUEST_IID} \
                                      -Dsonar.pullrequest.branch=${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME} \
                                      -Dsonar.pullrequest.base=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}  \
                                      -Dsonar.gitlab.ref_name=${CI_COMMIT_REF_NAME} \
                                      -Dsonar.gitlab.commit_sha=${CI_COMMIT_SHA}  \
                                      -Dsonar.gitlab.project_id=${CI_PROJECT_PATH} \
                                      -Dsonar.pullrequest.gitlab.repositorySlug=$CI_PROJECT_ID &amp;quot;

                                      #-Dsonar.branch.name=${CI_COMMIT_REF_NAME} -X &amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;templates/java-pipeline.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include:
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/build.yml&#39;
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/test.yml&#39;
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/codeanalysis.yml&#39;

variables:
  BUILD_SHELL: &#39;mvn clean package  -DskipTests&#39;  ##构建命令
  CACHE_DIR: &#39;target/&#39;
  TEST_SHELL : &#39;mvn test&#39;                                   ##测试命令
  JUNIT_REPORT_PATH: &#39;target/surefire-reports/TEST-*.xml&#39;   ##单元测试报告
  # 代码扫描
  SCANNER_HOME : &amp;quot;/usr/local/buildtools/sonar-scanner-3.2.0.1227-linux&amp;quot;
  SCAN_DIR : &amp;quot;src&amp;quot;
  ARTIFACT_PATH : &#39;target/*.jar&#39;                            ##制品目录


cache:
  paths:
    - ${CACHE_DIR}

stages:
  - build
  - test
  - code_analysis


build:
  stage: build
  extends: .build
  rules:
    - when: on_success


test:
  stage: test
  extends: .test
  rules:
    - when: on_success


code_analysis:
  stage: code_analysis
  extends: .codeanalysis-java

codeanalysis_mr:
  stage: code_analysis
  extends: .codeanalysis-mr
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建合并请求运行流水线，最终效果。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/11.png&#34;&gt;&lt;img src=&#34;images.assets/11-20200601175124155.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;49-制品库集成&#34;&gt;4.9 制品库集成&lt;/h4&gt;
&lt;h5 id=&#34;491-artifactory&#34;&gt;4.9.1 artifactory&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;.build:
  stage: build
  tags:
    - build
  script:
    - $BUILD_SHELL
    - ls

.deploy-artifact:
  stage: deploy-artifact
  tags:
    - build
  script:
    - curl -u${ARTIFACT_USER}:${ARTIFACT_PASSWD} -T ${ARTIFACT_PATH} &amp;quot;$ARTIFACTORY_URL/$ARTIFACTORY_NAME/$TARGET_FILE_PATH/$TARGET_ARTIFACT_NAME&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;492-定义变量&#34;&gt;4.9.2 定义变量&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/14.png&#34;&gt;&lt;img src=&#34;images.assets/14-20200601180422473.png&#34; alt=&#34;iamges&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;template&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include:
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/build.yml&#39;
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/test.yml&#39;
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/codeanalysis.yml&#39;

variables:
  BUILD_SHELL: &#39;mvn clean package  -DskipTests&#39;  ##构建命令
  CACHE_DIR: &#39;target/&#39;
  TEST_SHELL : &#39;mvn test&#39;                                   ##测试命令
  JUNIT_REPORT_PATH: &#39;target/surefire-reports/TEST-*.xml&#39;   ##单元测试报告
  # 代码扫描
  SCANNER_HOME : &amp;quot;/usr/local/buildtools/sonar-scanner-3.2.0.1227-linux&amp;quot;
  SCAN_DIR : &amp;quot;src&amp;quot;
  ARTIFACT_PATH : &#39;target/*.jar&#39;                            ##制品目录

  #上传制品库
  ARTIFACTORY_URL: &amp;quot;http://192.168.1.200:30082/artifactory&amp;quot;
  ARTIFACTORY_NAME: &amp;quot;cidevops&amp;quot;
  TARGET_FILE_PATH: &amp;quot;$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID&amp;quot;
  TARGET_ARTIFACT_NAME: &amp;quot;$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID.jar&amp;quot;



cache:
  paths:
    - ${CACHE_DIR}

stages:
  - build
  - test
  - parallel01

build:
  stage: build
  extends: .build
  rules:
    - when: on_success

test:
  stage: test
  extends: .test
  rules:
    - when: on_success

code_analysis:
  stage: parallel01
  extends: .codeanalysis-java

codeanalysis_mr:
  stage: parallel01
  extends: .codeanalysis-mr

deploy_artifact:
  stage: parallel01
  extends: .deploy-artifact

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/15.png&#34;&gt;&lt;img src=&#34;images.assets/15-20200601180425050.png&#34; alt=&#34;iamges&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/12.png&#34;&gt;&lt;img src=&#34;images.assets/12-20200601180418089.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;493-下载制品&#34;&gt;4.9.3 下载制品&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;.down-artifact:
  stage: down-artifact
  tags:
    - build
  script:
    - curl -u${ARTIFACT_USER}:${ARTIFACT_PASSWD} -O &amp;quot;$ARTIFACTORY_URL/$ARTIFACTORY_NAME/$TARGET_FILE_PATH/$TARGET_ARTIFACT_NAME&amp;quot;
    - ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;template&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;down_artifact:
  stage: down_artifact
  extends: .down-artifact
&lt;/code&gt;&lt;/pre&gt;&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/16.png&#34;&gt;&lt;img src=&#34;images.assets/16-20200601180416332.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/17.png&#34;&gt;&lt;img src=&#34;images.assets/17-20200601180430081.png&#34; alt=&#34;iamges&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;494-镜像仓库&#34;&gt;4.9.4 镜像仓库&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://cr.console.aliyun.com/cn-beijing/instances/repositories&#34;&gt;https://cr.console.aliyun.com/cn-beijing/instances/repositories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/18.png&#34;&gt;&lt;img src=&#34;images.assets/18-20200601180416552.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.build-docker:
  stage: buildimage
  tags:
    - build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWD  $CI_REGISTRY
    - docker build -t ${IMAGE_NAME} -f ${DOCKER_FILE_PATH} .
    - docker push ${IMAGE_NAME}
    - docker rmi ${IMAGE_NAME}
include:
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/build.yml&#39;
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/test.yml&#39;
  - project: &#39;cidevops/cidevops-gitlabci-service&#39;
    ref: master
    file: &#39;jobs/codeanalysis.yml&#39;

variables:
  BUILD_SHELL: &#39;mvn clean package  -DskipTests&#39;  ##构建命令
  CACHE_DIR: &#39;target/&#39;
  TEST_SHELL : &#39;mvn test&#39;                                   ##测试命令
  JUNIT_REPORT_PATH: &#39;target/surefire-reports/TEST-*.xml&#39;   ##单元测试报告
  # 代码扫描
  SCANNER_HOME : &amp;quot;/usr/local/buildtools/sonar-scanner-3.2.0.1227-linux&amp;quot;
  SCAN_DIR : &amp;quot;src&amp;quot;
  ARTIFACT_PATH : &#39;target/*.jar&#39;                            ##制品目录

  #上传制品库
  ARTIFACTORY_URL: &amp;quot;http://192.168.1.200:30082/artifactory&amp;quot;
  ARTIFACTORY_NAME: &amp;quot;cidevops&amp;quot;
  TARGET_FILE_PATH: &amp;quot;$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID&amp;quot;
  TARGET_ARTIFACT_NAME: &amp;quot;$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID.jar&amp;quot;

  #构建镜像
  CI_REGISTRY: &#39;registry.cn-beijing.aliyuncs.com&#39;
  CI_REGISTRY_USER: &#39;610556220zy&#39;
  #CI_REGISTRY_PASSWD: &#39;xxxxxxxx.&#39;
  IMAGE_NAME: &amp;quot;$CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID&amp;quot;
  DOCKER_FILE_PATH: &amp;quot;./Dockerfile&amp;quot;



cache:
  paths:
    - ${CACHE_DIR}

stages:
  - build
  - test
  - parallel01
  - down_artifact


build:
  stage: build
  extends: .build
  rules:
    - when: on_success


test:
  stage: test
  extends: .test
  rules:
    - when: on_success


code_analysis:
  stage: parallel01
  extends: .codeanalysis-java

codeanalysis_mr:
  stage: parallel01
  extends: .codeanalysis-mr

deploy_artifact:
  stage: parallel01
  extends: .deploy-artifact

down_artifact:
  stage: down_artifact
  extends: .down-artifact


build_image:
  stage: parallel01
  extends: .build-docker


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/20.png&#34;&gt;&lt;img src=&#34;images.assets/20-20200601180429985.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/19.png&#34;&gt;&lt;img src=&#34;images.assets/19-20200601180424124.png&#34; alt=&#34;iamges&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;410-自动化测试集成&#34;&gt;4.10 自动化测试集成&lt;/h4&gt;
&lt;h5 id=&#34;4101-开启-gitlab-pages&#34;&gt;4.10.1 开启 gitlab pages&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;root# vim /etc/gitlab/gitlab.rb
##! Define to enable GitLab Pages
pages_external_url &amp;quot;http://pages.gitlab.com/&amp;quot;
gitlab_pages[&#39;enable&#39;] = true
gitlab_pages[&#39;inplace_chroot&#39;] = true

gitlab-ctl reconfigure
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更新 gitlab.yml 文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;containers:
  - name: gitlab
  image: gitlab/gitlab-ce:12.9.0-ce.0
  imagePullPolicy: IfNotPresent
  ports:
    - containerPort: 30088
      name: web
      protocol: TCP
    - containerPort: 22
      name: agent
      protocol: TCP
    - containerPort: 80
      name: page
      protocol: TCP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开放 80 端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: gitlab
  name: gitlab
  namespace: devops
spec:
  type: NodePort
  ports:
    - name: web
      port: 30088
      targetPort: 30088
      nodePort: 30088
    - name: slave
      port: 22
      targetPort: 22
      nodePort: 30022
    - name: page
      port: 80
      targetPort: 80
      nodePort: 80
  selector:
    k8s-app: gitlab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/21.png&#34;&gt;&lt;img src=&#34;images.assets/21-20200601181139056.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完整的 yaml 参考 github 中。&lt;/p&gt;
&lt;p&gt;FAQ：未开启 chroot&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-pages/-/issues/129&#34;&gt;https://gitlab.com/gitlab-org/gitlab-pages/-/issues/129&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;Failed to bind mount /var/opt/gitlab/gitlab-rails/shared/pages on /tmp/gitlab-pages-1524473513642136363/pages. operation not permitted
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;4102-运行自动化测试&#34;&gt;4.10.2 运行自动化测试&lt;/h5&gt;
&lt;p&gt;在这里定义了两个 stage，interface_test 作业用于运行自动化测试，此时自动化测试已经配置好 ant+jmeter 集成所以直接运行 ant 命令即可。考虑到每个人安装的 jmeter 环境目录不一致所以可以通过-D 选项指定 jmeterhome。运行完成接口测试后，测试报告在项目当前目录的&lt;code&gt;result/htmlfile&lt;/code&gt;中。在此将测试报告整理成制品存放。&lt;/p&gt;
&lt;p&gt;pages 作业用于将测试报告中的 html 文件通过 pages 功能展示。首先获取 interface_test 作业的制品，然后将测试报告移动到 public 目录中。最后将 public 目录作为制品收集，有效期 30 天。&lt;/p&gt;
&lt;p&gt;jmeter 安装好了，之后需要将/usr/local/apache-jmeter-5.1.1/extras 目录中的 ant-jmeter-1.1.1.jar 复制到 ant 安装目录下的 lib 中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stages:
  - tests
  - deploy


interface_test:
  stage: tests
  tags:
    - build
  script:
    - ant -Djmeter.home=/usr/local/buildtools/apache-jmeter-5.2.1
  artifacts:
    paths:
      - result/htmlfile/

pages:
  stage: deploy
  dependencies:
    - interface_test
  script:
    - mv result/htmlfile/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/22.png&#34;&gt;&lt;img src=&#34;images.assets/22-20200601181139473.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;4103-上下游项目触发自动化测试&#34;&gt;4.10.3 上下游项目触发自动化测试&lt;/h5&gt;
&lt;p&gt;jobs/test.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.interfacetest:
  stage: interface_test
  trigger:
    project: cidevops/cidevops-interfacetest-service
    branch: master
    strategy: depend
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;templates.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interfact_test:
  stage: interface_test
  extends: .interfacetest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/23.png&#34;&gt;&lt;img src=&#34;images.assets/23-20200601181136814.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;411-kubernetes-集成&#34;&gt;4.11 Kubernetes 集成&lt;/h4&gt;
&lt;h5 id=&#34;4111-基于-kubernetes-部署-runner&#34;&gt;4.11.1 基于 kubernetes 部署 runner&lt;/h5&gt;
&lt;h6 id=&#34;41111-安装-helm3&#34;&gt;4.11.1.1 安装 helm3&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/helm/helm/releases
tar -zxvf helm-v3.0.0-linux-amd64.tar.gz
mv linux-amd64/helm /usr/local/bin/helm
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&#34;41112-配置-chart-存储库&#34;&gt;4.11.1.2 配置 chart 存储库&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;## 添加chart存储库
helm repo add gitlab https://charts.gitlab.io

## 验证源
helm repo list

##查询可以安装的gitlab-runner chart
helm search repo -l gitlab/gitlab-runner
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&#34;41113-更新配置信息&#34;&gt;4.11.1.3 更新配置信息&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;## 获取相关版本的chart包
helm fetch gitlab/gitlab-runner --version=0.15.0
[root@zeyang-nuc-service ~]# ls
Desktop                        es
Documents                      gitlab-runner-0.15.0.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;values.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## GitLab Runner Image
##
## By default it&#39;s using gitlab/gitlab-runner:alpine-v{VERSION}
## where {VERSION} is taken from Chart.yaml from appVersion field
##
## ref: https://hub.docker.com/r/gitlab/gitlab-runner/tags/
##
image: gitlab/gitlab-runner:alpine-v12.9.0

## 镜像下载策略
imagePullPolicy: IfNotPresent

## Gitlab服务器地址
gitlabUrl: http://192.168.1.200:30088/

## runner注册token
runnerRegistrationToken: &amp;quot;JRzzw2j1Ji6aBjwvkxAv&amp;quot;

## 终止之前注销所有跑步者
unregisterRunners: true


## 当停止管道时等待其作业终止时间
terminationGracePeriodSeconds: 3600

## Set the certsSecretName in order to pass custom certficates for GitLab Runner to use
## Provide resource name for a Kubernetes Secret Object in the same namespace,
## this is used to populate the /home/gitlab-runner/.gitlab-runner/certs/ directory
## ref: https://docs.gitlab.com/runner/configuration/tls-self-signed.html#supported-options-for-self-signed-certificates
##
# certsSecretName:


## 配置最大并发作业数
concurrent: 10

## 新作业检查间隔
checkInterval: 30

## GitlabRunner日志级别 debug, info, warn, error, fatal, panic
logLevel: info

## Configure GitLab Runner&#39;s logging format. Available values are: runner, text, json
## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-global-section
##
# logFormat:

## For RBAC support:
rbac:
  create: true
  ## Define specific rbac permissions.
  resources: [&amp;quot;pods&amp;quot;, &amp;quot;pods/exec&amp;quot;, &amp;quot;secrets&amp;quot;]
  verbs: [&amp;quot;get&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;watch&amp;quot;, &amp;quot;create&amp;quot;, &amp;quot;patch&amp;quot;, &amp;quot;delete&amp;quot;]

  ## Run the gitlab-bastion container with the ability to deploy/manage containers of jobs
  ## cluster-wide or only within namespace
  clusterWideAccess: false

  ## Use the following Kubernetes Service Account name if RBAC is disabled in this Helm chart (see rbac.create)
  ##
  # serviceAccountName: default

  ## Specify annotations for Service Accounts, useful for annotations such as eks.amazonaws.com/role-arn
  ##
  ## ref: https://docs.aws.amazon.com/eks/latest/userguide/specify-service-account-role.html
  ##
  # serviceAccountAnnotations: {}

## Configure integrated Prometheus metrics exporter
## ref: https://docs.gitlab.com/runner/monitoring/#configuration-of-the-metrics-http-server
metrics:
  enabled: true

## Configuration for the Pods that that the runner launches for each new job
##
runners:
  ## Default container image to use for builds when none is specified
  ##
  image: ubuntu:16.04

  ## Specify one or more imagePullSecrets
  ##
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # imagePullSecrets: []

  ## Specify the image pull policy: never, if-not-present, always. The cluster default will be used if not set.
  ##
  imagePullPolicy: &amp;quot;if-not-present&amp;quot;

  ## Defines number of concurrent requests for new job from GitLab
  ## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-runners-section
  ## 限制来自GitLab的对新作业的并发请求数
  requestConcurrency: 1

  ## Specify whether the runner should be locked to a specific project: true, false. Defaults to true.
  ##
  locked: false

  ## Specify the tags associated with the runner. Comma-separated list of tags.
  ##
  ## ref: https://docs.gitlab.com/ce/ci/runners/#using-tags
  ##
  tags: &amp;quot;kubernetes-runner,k8s&amp;quot;

  ## Specify if jobs without tags should be run.
  ## If not specified, Runner will default to true if no tags were specified. In other case it will
  ## default to false.
  ##
  ## ref: https://docs.gitlab.com/ce/ci/runners/#allowing-runners-with-tags-to-pick-jobs-without-tags
  ##
  runUntagged: true

  ## Specify whether the runner should only run protected branches.
  ## Defaults to False.
  ##
  ## ref: https://docs.gitlab.com/ee/ci/runners/#protected-runners
  ##
  protected: false

  ## Run all containers with the privileged flag enabled
  ## This will allow the docker:dind image to run if you need to run Docker
  ## commands. Please read the docs before turning this on:
  ## ref: https://docs.gitlab.com/runner/executors/kubernetes.html#using-docker-dind
  ##
  privileged: true

  ## The name of the secret containing runner-token and runner-registration-token
  # secret: gitlab-runner

  ## Namespace to run Kubernetes jobs in (defaults to the same namespace of this release)
  ##
  # namespace:

  ## The amount of time, in seconds, that needs to pass before the runner will
  ## timeout attempting to connect to the container it has just created.
  ## ref: https://docs.gitlab.com/runner/executors/kubernetes.html
  pollTimeout: 180

  ## Set maximum build log size in kilobytes, by default set to 4096 (4MB)
  ## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-runners-section
  outputLimit: 4096

  ## Distributed runners caching
  ## ref: https://gitlab.com/gitlab-org/gitlab-runner/blob/master/docs/configuration/autoscale.md#distributed-runners-caching
  ##
  ## If you want to use s3 based distributing caching:
  ## First of all you need to uncomment General settings and S3 settings sections.
  ##
  ## Create a secret &#39;s3access&#39; containing &#39;accesskey&#39; &amp;amp; &#39;secretkey&#39;
  ## ref: https://aws.amazon.com/blogs/security/wheres-my-secret-access-key/
  ##
  ## $ kubectl create secret generic s3access \
  ##   --from-literal=accesskey=&amp;quot;YourAccessKey&amp;quot; \
  ##   --from-literal=secretkey=&amp;quot;YourSecretKey&amp;quot;
  ## ref: https://kubernetes.io/docs/concepts/configuration/secret/
  ##
  ## If you want to use gcs based distributing caching:
  ## First of all you need to uncomment General settings and GCS settings sections.
  ##
  ## Access using credentials file:
  ## Create a secret &#39;google-application-credentials&#39; containing your application credentials file.
  ## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-runnerscachegcs-section
  ## You could configure
  ## $ kubectl create secret generic google-application-credentials \
  ##   --from-file=gcs-application-credentials-file=./path-to-your-google-application-credentials-file.json
  ## ref: https://kubernetes.io/docs/concepts/configuration/secret/
  ##
  ## Access using access-id and private-key:
  ## Create a secret &#39;gcsaccess&#39; containing &#39;gcs-access-id&#39; &amp;amp; &#39;gcs-private-key&#39;.
  ## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-runners-cache-gcs-section
  ## You could configure
  ## $ kubectl create secret generic gcsaccess \
  ##   --from-literal=gcs-access-id=&amp;quot;YourAccessID&amp;quot; \
  ##   --from-literal=gcs-private-key=&amp;quot;YourPrivateKey&amp;quot;
  ## ref: https://kubernetes.io/docs/concepts/configuration/secret/
  cache: {}
    ## General settings
    # cacheType: s3
    # cachePath: &amp;quot;gitlab_runner&amp;quot;
    # cacheShared: true

    ## S3 settings
    # s3ServerAddress: s3.amazonaws.com
    # s3BucketName:
    # s3BucketLocation:
    # s3CacheInsecure: false
    # secretName: s3access

    ## GCS settings
    # gcsBucketName:
    ## Use this line for access using access-id and private-key
    # secretName: gcsaccess
    ## Use this line for access using google-application-credentials file
    # secretName: google-application-credentials

  ## Build Container specific configuration
  ##
  builds: {}
    # cpuLimit: 200m
    # memoryLimit: 256Mi
    # cpuRequests: 100m
    # memoryRequests: 128Mi

  ## Service Container specific configuration
  ##
  services: {}
    # cpuLimit: 200m
    # memoryLimit: 256Mi
    # cpuRequests: 100m
    # memoryRequests: 128Mi

  ## Helper Container specific configuration
  ##
  helpers: {}
    # cpuLimit: 200m
    # memoryLimit: 256Mi
    # cpuRequests: 100m
    # memoryRequests: 128Mi
    # image: gitlab/gitlab-runner-helper:x86_64-latest

  ## Service Account to be used for runners
  ##
  # serviceAccountName:

  ## If Gitlab is not reachable through $CI_SERVER_URL
  ##
  # cloneUrl:

  ## Specify node labels for CI job pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  # nodeSelector: {}

  ## Specify pod labels for CI job pods
  ##
  # podLabels: {}

  ## Specify annotations for job pods, useful for annotations such as iam.amazonaws.com/role
  # podAnnotations: {}

  ## Configure environment variables that will be injected to the pods that are created while
  ## the build is running. These variables are passed as parameters, i.e. `--env &amp;quot;NAME=VALUE&amp;quot;`,
  ## to `gitlab-runner register` command.
  ##
  ## Note that `envVars` (see below) are only present in the runner pod, not the pods that are
  ## created for each build.
  ##
  ## ref: https://docs.gitlab.com/runner/commands/#gitlab-runner-register
  ##
  # env:
  #   NAME: VALUE


## Configure securitycontext
## ref: http://kubernetes.io/docs/user-guide/security-context/
##
securityContext:
  fsGroup: 65533
  runAsUser: 100


## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources: {}
  # limits:
  #   memory: 256Mi
  #   cpu: 200m
  # requests:
  #   memory: 128Mi
  #   cpu: 100m

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
  # Example: The gitlab runner manager should not run on spot instances so you can assign
  # them to the regular worker nodes only.
  # node-role.kubernetes.io/worker: &amp;quot;true&amp;quot;

## List of node taints to tolerate (requires Kubernetes &amp;gt;= 1.6)
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
  # Example: Regular worker nodes may have a taint, thus you need to tolerate the taint
  # when you assign the gitlab runner manager with nodeSelector or affinity to the nodes.
  # - key: &amp;quot;node-role.kubernetes.io/worker&amp;quot;
  #   operator: &amp;quot;Exists&amp;quot;

## Configure environment variables that will be present when the registration command runs
## This provides further control over the registration process and the config.toml file
## ref: `gitlab-runner register --help`
## ref: https://docs.gitlab.com/runner/configuration/advanced-configuration.html
##
# envVars:
#   - name: RUNNER_EXECUTOR
#     value: kubernetes

## list of hosts and IPs that will be injected into the pod&#39;s hosts file
hostAliases: []
  # Example:
  # - ip: &amp;quot;127.0.0.1&amp;quot;
  #   hostnames:
  #   - &amp;quot;foo.local&amp;quot;
  #   - &amp;quot;bar.local&amp;quot;
  # - ip: &amp;quot;10.1.2.3&amp;quot;
  #   hostnames:
  #   - &amp;quot;foo.remote&amp;quot;
  #   - &amp;quot;bar.remote&amp;quot;

## Annotations to be added to manager pod
##
podAnnotations: {}
  # Example:
  # iam.amazonaws.com/role: &amp;lt;my_role_arn&amp;gt;

## Labels to be added to manager pod
##
podLabels: {}
  # Example:
  # owner.team: &amp;lt;my_cool_team&amp;gt;

## HPA support for custom metrics:
## This section enables runners to autoscale based on defined custom metrics.
## In order to use this functionality, Need to enable a custom metrics API server by
## implementing &amp;quot;custom.metrics.k8s.io&amp;quot; using supported third party adapter
## Example: https://github.com/directxman12/k8s-prometheus-adapter
##
#hpa: {}
  # minReplicas: 1
  # maxReplicas: 10
  # metrics:
  # - type: Pods
  #   pods:
  #     metricName: gitlab_runner_jobs
  #     targetAverageValue: 400m
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&#34;41114-部署-chart&#34;&gt;4.11.1.4 部署 chart&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;## 创建runner
kubectl create ns gitlab-runner
helm install gitlab-runner --namespace gitlab-runner ./gitlab-runner

## 更新
helm upgrade gitlab-runner --namespace gitlab-runner ./gitlab-runner
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&#34;41115-效果&#34;&gt;4.11.1.5 效果&lt;/h6&gt;
&lt;p&gt;gitlab&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/31.png&#34;&gt;&lt;img src=&#34;images.assets/31-20200601181935195.png&#34; alt=&#34;iamges&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kubernetes&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/32.png&#34;&gt;&lt;img src=&#34;images.assets/32-20200601181937421.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;41116-运行流水线测试&#34;&gt;4.11.1.6 运行流水线测试&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;image: maven:3.6.3-jdk-8

before_script:
  - ls

services:
  - name: mysql:latest
    alias: mysql-1

build:
  image: maven:3.6.3-jdk-8
  stage: build
  tags:
    - k8s
  script:
    - ls
    - sleep 2
    - echo &amp;quot;mvn clean &amp;quot;
    - sleep 10

deploy:
  stage: deploy
  tags:
    - k8s
  script:
    - echo &amp;quot;deploy&amp;quot;
  environment:
    name: production
    url: http://www.baidu.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/33.png&#34;&gt;&lt;img src=&#34;images.assets/33-20200601181938840.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FAQ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Q1 未创建 rbac&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ERROR: Job failed (system failure): pods is forbidden: User &amp;quot;system:serviceaccount:gitlab-runner:default&amp;quot; cannot create resource &amp;quot;pods&amp;quot; in API group &amp;quot;&amp;quot; in the namespace &amp;quot;gitlab-runner&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&#34;41117-应用发布集成&#34;&gt;4.11.1.7 应用发布集成&lt;/h6&gt;
&lt;p&gt;创建名称空间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl create ns cidevops
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;准备镜像凭据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl create secret docker-registry cidevops \
    --docker-server=registry.cn-beijing.aliyuncs.com \
    --docker-username=xxxx \
    --docker-password=xxxx \
    --docker-email=test@test.com -n cidevops
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&#34;41118-配置模板&#34;&gt;4.11.1.8 配置模板&lt;/h6&gt;
&lt;p&gt;jobs/deploy.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.deploy-k8s:
  stage: deploy
  tags:
    - build
  script:
    - sed -i &amp;quot;s#__namespace__#${NAMESPACE}#g&amp;quot; deployment.yaml
    - sed -i &amp;quot;s#__appname__#${APP_NAME}#g&amp;quot; deployment.yaml
    - sed -i &amp;quot;s#__containerport__#${CONTAINER_PORT}#g&amp;quot; deployment.yaml
    - sed -i &amp;quot;s#__nodeport__#${NODE_PORT}#g&amp;quot; deployment.yaml
    - sed -i &amp;quot;s#__imagename__#${IMAGE_NAME}#g&amp;quot; deployment.yaml
    - kubectl apply -f deployment.yaml
  after_script:
   - sleep 10
   - kubectl get pod  -n $NAMESPACE
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;template.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy_k8s:
  stage: deploy
  extends: .deploy-k8s
  rules:
    - if: &amp;quot; $RUN_DEPLOY == &#39;no&#39; &amp;quot;
      when: never
    - if: &amp;quot; $MANUAL_BRANCH  == &#39;master&#39; &amp;quot;
      when: manual
    - when: always
  environment:
    name: $ENV_NAME
    url: $ENV_URL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;gitlab-ci.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  #部署k8s
  NAMESPACE: &amp;quot;$CI_PROJECT_NAMESPACE&amp;quot;
  APP_NAME: &amp;quot;$CI_PROJECT_NAME&amp;quot;
  CONTAINER_PORT: 8081
  NODE_PORT: 30181
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&#34;41119-最终效果&#34;&gt;4.11.1.9 最终效果&lt;/h6&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/24.png&#34;&gt;&lt;img src=&#34;images.assets/24-20200601181943090.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.idevops.site/gitlabci/chapter04/01/images/25.png&#34;&gt;&lt;img src=&#34;images.assets/25-20200601181937778.png&#34; alt=&#34;images&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-gitlab-variables&#34;&gt;5 Gitlab Variables&lt;/h3&gt;
&lt;p&gt;Gitlab runner的环境变量分为：&lt;code&gt;group/subgroup&lt;/code&gt;和&lt;code&gt;project&lt;/code&gt; 变量，其中&lt;code&gt;group&lt;/code&gt;变量是可迭代继承的，最多继承20个&lt;code&gt;subgroup&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;51-gitlab-预定值的环境变量httpsdocsgitlabcomeecivariablespredefined_variableshtml&#34;&gt;5.1 &lt;a href=&#34;https://docs.gitlab.com/ee/ci/variables/predefined_variables.html&#34;&gt;Gitlab 预定值的环境变量&lt;/a&gt;&lt;/h4&gt;
&lt;h3 id=&#34;6-gitlab-runner-examples&#34;&gt;6. GitLab runner examples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/ci/examples/&#34;&gt;CI/CD example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/gitlab-examples&#34;&gt;gitlab project example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-gitlab-runner-extends&#34;&gt;7. GitLab Runner Extends&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;gitlab schedule:https://docs.gitlab.com/ee/api/pipeline_schedules.html&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10-与其它cicd工具比较&#34;&gt;10 与其它CICD工具比较&lt;/h3&gt;
&lt;h4 id=&#34;101-gitlabci-vs-jenkins&#34;&gt;10.1 GitLabCI VS Jenkins&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Jenkins&lt;/code&gt; 是一个广泛用于持续集成的可视化 &lt;code&gt;web&lt;/code&gt; 自动化工具，&lt;code&gt;jenkins&lt;/code&gt; 可以很好的支持各种语言的项目构建，也完全兼容&lt;code&gt;ant&lt;/code&gt;、&lt;code&gt;maven&lt;/code&gt;、&lt;code&gt;gradle&lt;/code&gt;等多种第三方构建工具，同时跟&lt;code&gt;svn&lt;/code&gt;、&lt;code&gt;git&lt;/code&gt;能无缝集成，也支持直接与知名源代码托管网站，比如&lt;code&gt;github&lt;/code&gt;、&lt;code&gt;bitbucket&lt;/code&gt;直接集成，而且插件众多，在这么多年的技术积累之后，在国内大部分公司都有使用&lt;code&gt;Jenkins&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gitlab-CI&lt;/code&gt;是&lt;code&gt;gitlab8.0&lt;/code&gt;之后自带的一个持续集成系统，中心思想是当每一次&lt;code&gt;push&lt;/code&gt;到&lt;code&gt;gitlab&lt;/code&gt;的时候，都会触发一次脚本执行，然后脚本的内容包括了测试，编译，部署等一系列自定义的内容。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gitlab-CI&lt;/code&gt;的脚本执行，需要自定义安装对应&lt;code&gt;gitlab-runner&lt;/code&gt;来执行，代码&lt;code&gt;push&lt;/code&gt;之后，&lt;code&gt;webhook&lt;/code&gt;检测到代码变化，就会触发&lt;code&gt;gitlab-CI&lt;/code&gt;，分配到各个&lt;code&gt;Runner&lt;/code&gt;来运行相应的脚本&lt;code&gt;script&lt;/code&gt;。这些脚本有的是测试项目用的，有的是部署用的。&lt;/p&gt;
&lt;h5 id=&#34;1011-差异点对比&#34;&gt;10.1.1 差异点对比&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;分支的可配置性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用GitLab CI，新创建的分支无需任何进一步配置即可立即使用CI管道中的已定义作业。&lt;/li&gt;
&lt;li&gt;Jenkins 2 基于gitlab的多分支流水线可以实现。相对配置来说gitlab更加方便一些。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;定时执行构建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有时，根据时间触发作业或整个管道会有所帮助。例如，常规的夜间定时构建。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Jenkins 2可以立即使用。可以在应执行作业或管道的那一刻以cron式语法定义。&lt;/li&gt;
&lt;li&gt;GitLab CI没有此功能。但是，可以通过一种变通办法来实现：通过WebAPI使用同一台或另一台服务器上的cronjob触发作业和管道。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管使用GitLab CI无法做到这一点，其实如果配置了提交代码即触发流水线，那么最后一次提交的构建在什么时候没有什么不同，反而减少未提交代码的定时构建资源浪费。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拉取请求支持&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果很好地集成了存储库管理器和CI / CD平台，您可以看到请求的当前构建状态。使用这种功能，可以避免将代码合并到不起作用或无法正确构建的主分支中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins没有与源代码管理系统进一步集成，需要管理员自行写代码或者插件实现。&lt;/li&gt;
&lt;li&gt;GitLab与其CI平台紧密集成，可以方便查看每个打开和关闭拉动请求的运行和完成管道。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;权限管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从存储库管理器继承的权限管理对于不想为每个服务分别设置每个用户的权限的大型开发人员或组织团体很有用。大多数情况下，两种情况下的权限都是相同的，因此默认情况下应将它们配置在一个位置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于GitLab与GitLabCI的深度整合，权限可以统一管理。&lt;/li&gt;
&lt;li&gt;由于Jenkins 2没有内置的存储库管理器，因此它无法直接在存储库管理器和CI / CD平台之间合并权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;存储库交互&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitLab CI是Git存储库管理器GitLab的固定组件，因此在CI / CD流程和存储库功能之间提供了良好的交互。&lt;/li&gt;
&lt;li&gt;Jenkins 2与存储库管理器都是松散耦合的，因此在选择版本控制系统时它非常灵活。此外，就像其前身一样，Jenkins 2强调了对插件的支持，以进一步扩展或改善软件的现有功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;插件管理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩展Jenkins的本机功能是通过插件完成的。插件的维护，保护和升级成本很高。&lt;/li&gt;
&lt;li&gt;GitLab是开放式的，任何人都可以直接向代码库贡献更改，一旦合并，它将自动测试并维护每个更改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1012-优势与劣势&#34;&gt;10.1.2 优势与劣势&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;GitLabCI&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轻量级，不需要复杂的安装手段。&lt;/li&gt;
&lt;li&gt;配置简单，与&lt;code&gt;gitlab&lt;/code&gt;可直接适配。&lt;/li&gt;
&lt;li&gt;实时构建日志十分清晰，&lt;code&gt;UI&lt;/code&gt;交互体验很好&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;YAML&lt;/code&gt; 进行配置，任何人都可以很方便的使用。&lt;/li&gt;
&lt;li&gt;没有统一的管理界面，无法统筹管理所有项目&lt;/li&gt;
&lt;li&gt;配置依赖于代码仓库，耦合度没有&lt;code&gt;Jenkins&lt;/code&gt;低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Jenkins&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译服务和代码仓库分离，耦合度低&lt;/li&gt;
&lt;li&gt;插件丰富，支持语言众多。&lt;/li&gt;
&lt;li&gt;有统一的&lt;code&gt;web&lt;/code&gt;管理界面。&lt;/li&gt;
&lt;li&gt;插件以及自身安装较为复杂。&lt;/li&gt;
&lt;li&gt;体量较大，不是很适合小型团队。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1013-实际应用&#34;&gt;10.1.3 实际应用&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;GitLabCI 有助于DevOps人员，例如敏捷开发中，开发与运维是同一个人，最便捷的开发方式。&lt;/li&gt;
&lt;li&gt;JenkinsCI适合在多角色团队中，职责分明、配置与代码分离、插件丰富。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;102-gitlab-vs-travishttpsaboutgitlabcomdevops-toolstravis-ci-vs-gitlabhtml&#34;&gt;10.2 &lt;a href=&#34;https://about.gitlab.com/devops-tools/travis-ci-vs-gitlab.html&#34;&gt;Gitlab VS Travis&lt;/a&gt;&lt;/h4&gt;
&lt;h3 id=&#34;end&#34;&gt;end&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitespeed.io/&#34;&gt;https://www.sitespeed.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/jenkins-in-actions/01-jenkins%E5%AE%89%E8%A3%85%E7%AF%87/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/jenkins-in-actions/01-jenkins%E5%AE%89%E8%A3%85%E7%AF%87/</guid>
        <description>今天开始将在192.168.99.129这台主机上通过Jenkins:2.241版本为例进行Jenkins系列的深入学习与分享。至于Jenkins是干啥的，这些</description>
        <content:encoded>&lt;p&gt;今天开始将在&lt;code&gt;192.168.99.129&lt;/code&gt;这台主机上通过&lt;code&gt;Jenkins:2.241&lt;/code&gt;版本为例进行Jenkins系列的深入学习与分享。至于Jenkins是干啥的，这些没用的话就不说了，如果你看到我的笔记了，证明你至少是需要Jenkins为你助力的。&lt;/p&gt;
&lt;h3 id=&#34;通过war包安装jenkins&#34;&gt;通过WAR包安装Jenkins&lt;/h3&gt;
&lt;p&gt;在jenkins官网&lt;a href=&#34;http://updates.jenkins-ci.org/download/war/&#34; title=&#34;Jenkins war download&#34;&gt;下载地址&lt;/a&gt;下载2.241版本的war包,然后使用以下方式安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 安装&lt;/span&gt;
nohup java -jar jenkins.war &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如何你想查看&lt;code&gt;jenkins.war&lt;/code&gt;的配置选项，你可以执行以下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@99-129:~# java -jar jenkins.war --help
Running from: /root/jenkins.war
webroot: &lt;span class=&#34;nv&#34;&gt;$user&lt;/span&gt;.home/.jenkins
Jenkins Automation Server Engine 2.241
Usage: java -jar jenkins.war &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--option&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;value&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--option&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;value&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

Options:
   --webroot                &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; folder where the WAR file is expanded into. Default is &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;JENKINS_HOME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/war
   --pluginroot             &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; folder where the plugin archives are expanded into. Default is &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;JENKINS_HOME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/plugins
                              &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;NOTE: this option does not change the directory where the plugin archives are stored&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   --extractedFilesFolder   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; folder where extracted files are to be located. Default is the temp folder
   --daemon                 &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; fork into background and run as daemon &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Unix only&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   --logfile                &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; redirect log messages to this file
   --enable-future-java     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; allows running with new Java versions which are not fully supported &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;class version &lt;span class=&#34;m&#34;&gt;52&lt;/span&gt; and above&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   --javaHome               &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Override the JAVA_HOME variable
   --toolsJar               &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; The location of tools.jar. Default is JAVA_HOME/lib/tools.jar
   --config                 &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; load configuration properties from here. Default is ./winstone.properties
   --prefix                 &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; add this prefix to all URLs &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;eg http://localhost:8080/prefix/resource&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;. Default is none
   --commonLibFolder        &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; folder &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; additional jar files. Default is ./lib

   --extraLibFolder         &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; folder &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; additional jar files to add to Jetty classloader

   --logThrowingLineNo      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; show the line no that logged the message &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;slow&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;. Default is &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
   --logThrowingThread      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; show the thread that logged the message. Default is &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
   --debug                  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; the level of debug msgs &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1-9&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;. Default is &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;INFO level&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
... &lt;span class=&#34;c1&#34;&gt;# 此处因为内容太多，省略&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此时打开浏览器输入&lt;code&gt;http://192.168.99.129:8080&lt;/code&gt;访问jenkins&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200623225540453.png&#34; alt=&#34;image-20200623225540453&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在红色框内找到管理员的初始密码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@99-129:~# cat ./.jenkins/secrets/initialAdminPassword
ae44c519786b49b19eaef942715d7991
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;登录之后，选择插件进行安装，这里推荐安装建议安装的插件，如果出现插件安装失败，建议跳过安装，等登录上去之后，在进行安装插件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200623230113592.png&#34; alt=&#34;image-20200623230113592&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后就是配置一个管理员账号，登录之后的界面如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200623230233686.png&#34; alt=&#34;image-20200623230233686&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样通过war包安装的Jenkins就完成了。&lt;/p&gt;
&lt;h3 id=&#34;使用docker安装jenkins&#34;&gt;使用Docker安装Jenkins&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir ~/workspace/
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;
docker run -d -p 8080:8080 -v &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PWD&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/jenkins3:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v ~/.m2:/root/.m2 --name jenkins jenkins/jenkins:2.241
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在安装容器运行起来之后，我们通过以下命令获取&lt;code&gt;Jenkins&lt;/code&gt;初始账号密码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;☸️  devcluster🔥 kube-ops  ~/workspaces/jenkins-kubenetes-231  🐳 👉 cat jenkins3/secrets/initialAdminPassword
84a43f93a3494c8aa6dc30a82b2711ed
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接下来的步骤如上类似，安装插件，配置用户，然后登录即可。&lt;/p&gt;
&lt;h3 id=&#34;设置插件源&#34;&gt;设置插件源&lt;/h3&gt;
&lt;p&gt;在安装成功之后，我们需要下载部分的插件，但是插件在国内下载十分慢，因此我们这里将使用清华的源替换默认的插件源，提高下载速度，我们按照以下的步骤进行配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Manage Jenkins &amp;gt; Manage plugins &amp;gt; Advanced &amp;gt; Update Site
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;将文本框的内容替换为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;https://mirror.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images.assets/image-20200623230725846.png&#34; alt=&#34;image-20200623230725846&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样就完成了插件源的替换，亲测下载&lt;code&gt;pipeline&lt;/code&gt;插件以及它的依赖插件大概一分钟的时间，还可以接受。大家在安装遇到问题后可以找我咨询。微信&lt;code&gt;devsecopser&lt;/code&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/jenkins-in-actions/02-jenkins%E5%AE%89%E8%A3%85%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/jenkins-in-actions/02-jenkins%E5%AE%89%E8%A3%85%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</guid>
        <description>显示正在启动,请稍后&amp;hellip; 在Jenkins的安装过程中我们经常会遇到无法正常的访问到Jenkins插件源造成Jenkins的安装过程一直卡着，处于显示</description>
        <content:encoded>&lt;p&gt;&lt;img src=&#34;images.assets/image-20200626220506311.png&#34; alt=&#34;image-20200626220506311&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;显示正在启动请稍后&#34;&gt;显示正在启动,请稍后&amp;hellip;&lt;/h3&gt;
&lt;p&gt;在Jenkins的安装过程中我们经常会遇到无法正常的访问到&lt;code&gt;Jenkins插件源&lt;/code&gt;造成Jenkins的安装过程一直卡着，处于&lt;code&gt;显示正在启动,请稍后...&lt;/code&gt;此时我们只有更换一下插件源才有希望顺利的进入安装过程，在&lt;code&gt;jenkins2.241&lt;/code&gt;版本中，更换插件源的方式为:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vim ~/.jenkins/hudson.model.UpdateCenter.xml
&lt;span class=&#34;c1&#34;&gt;# 将&amp;lt;url&amp;gt;标签中的地址更换为:http://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json,更改后为:&lt;/span&gt;
cat ~/.jenkins/hudson.model.UpdateCenter.xml
&amp;lt;?xml &lt;span class=&#34;nv&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1.1&amp;#39;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;?&amp;gt;
&amp;lt;sites&amp;gt;
  &amp;lt;site&amp;gt;
    &amp;lt;id&amp;gt;default&amp;lt;/id&amp;gt;
    &amp;lt;url&amp;gt;http://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&amp;lt;/url&amp;gt;
&amp;lt;/site&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样重启Jenkins即可进入插件的安装环节。&lt;/p&gt;
&lt;h3 id=&#34;installation-of-73-plugins-in-1-hr-26-min&#34;&gt;installation of 73 plugins in 1 hr 26 min&lt;/h3&gt;
&lt;p&gt;在版本为Jenkins2.241的初始化安装时，选择已勾选的插件，包括插件之间的依赖关系一共是安装了&lt;code&gt;73&lt;/code&gt;个，共耗时&lt;code&gt;1h26min&lt;/code&gt;，例如以下安装插件的日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;2020-06-26 10:53:22.921+0000 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;67&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;	INFO	h.m.UpdateCenter&lt;span class=&#34;nv&#34;&gt;$CompleteBatchJob&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#run: Completed installation of 73 plugins in 1 hr 26 min&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样的事情我觉得还是经历一次就好了，下次需要安装的时候该怎么办？建议将其的插件保存一个副本，下次在安装的时候将其&lt;code&gt;plugins&lt;/code&gt;目录放在需要安装的Jenkins的数据目录下，如果是Docker容器安装的也可以将其挂载到容器中，这样安装过程变得就非常快了。&lt;/p&gt;
&lt;h3 id=&#34;localization-chinese-simplifiedhttpspluginsjenkinsiolocalization-zh-cn&#34;&gt;&lt;a href=&#34;https://plugins.jenkins.io/localization-zh-cn&#34;&gt;Localization: Chinese (Simplified)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为了解决插件下载缓慢的问题，目前有几种投机取巧的方法：&lt;/p&gt;
&lt;h4 id=&#34;拷贝插件&#34;&gt;拷贝插件&lt;/h4&gt;
&lt;p&gt;解决场景是避免Jenkins在安装过程中基础功能的插件下慢的问题，再一个是在Jenkins的迁移时候也是可以利用这样的方式进行安装。&lt;/p&gt;
&lt;h4 id=&#34;更换插件源&#34;&gt;更换插件源&lt;/h4&gt;
&lt;p&gt;网上大部分人推荐使用&lt;a href=&#34;http://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&#34; title=&#34;清华插件源&#34;&gt;清华的插件&lt;/a&gt;源来下载插件，但是在测试之后发现还是有些缓慢，但是确实比默认的已经很好了。&lt;/p&gt;
&lt;h4 id=&#34;解决下载的最后一公里&#34;&gt;解决下载的最后一公里&lt;/h4&gt;
&lt;p&gt;2019.11左右，Jenkins中文社区的国内镜像源发布了，具体的可以看&lt;a href=&#34;https://jenkins-zh.cn/wechat/articles/2019/11/2019-11-11-update-center-mirror-announcement/&#34; title=&#34;Jenkins中文社区镜像源博文&#34;&gt;Jenkins中文社区的博客&lt;/a&gt;，更多的背景信息这里就不在说明了，但是下载插件的速度不得不说基本上快无感知了，当选择了插件进行安装，刷新一下浏览器就显示安装完成了。首先在插件可用区搜索以下插件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200626215257504.png&#34; alt=&#34;image-20200626215257504&#34; /&gt;&lt;/p&gt;
&lt;p&gt;安装完成后会在Jenkins的首页的左下角显示中文社区的字样&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200626215405852.png&#34; alt=&#34;image-20200626215405852&#34; /&gt;点击进去之后，就会看到中文社区的插件源，然后设置更新中心地址即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200626215555559.png&#34; alt=&#34;image-20200626215555559&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后，我们在设置玩插件的地址之后，通过点击&lt;code&gt;立即获取&lt;/code&gt;查看是否正常&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200626215734998.png&#34; alt=&#34;image-20200626215734998&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样基本上就解决了后续因为插件安装带来的各种麻烦，如果被插件折磨的很痛苦，现在可以亲自实践一下试试效果啊。&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/jenkins-in-actions/03-jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E4%B8%8E%E7%AE%A1%E7%90%86/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/jenkins-in-actions/03-jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E4%B8%8E%E7%AE%A1%E7%90%86/</guid>
        <description>用户权限与管理 解决不同的职能部门的人使用通一个Jenkins实例的时候权限分配的问题，实现通过集中认证服务器OpenLDAP进行人员认证，通过权限匹配实现只能访</description>
        <content:encoded>&lt;h1 id=&#34;用户权限与管理&#34;&gt;用户权限与管理&lt;/h1&gt;
&lt;p&gt;解决不同的职能部门的人使用通一个Jenkins实例的时候权限分配的问题，实现通过集中认证服务器OpenLDAP进行人员认证，通过权限匹配实现只能访问那些项目或者执行哪些任务。关于OpenLDAP的搭建请参考&lt;a href=&#34;https://mp.weixin.qq.com/s/Qs4xYKKihdwmxPPRgjzqYg&#34;&gt;《轻目录访问协议的开源实现LDAP2.4》&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;用户管理&#34;&gt;用户管理&lt;/h1&gt;
&lt;p&gt;Jenkins用户管理使用较为普遍的为两种:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jenkins内置的专有用户数据库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LDAP&lt;/code&gt;服务认证&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通常使用内置的用户数据库需要我们手动的添加用户，在&lt;code&gt;系统管理&lt;/code&gt;-&amp;gt;&lt;code&gt;管理用户&lt;/code&gt;-&amp;gt;&lt;code&gt;新建用户&lt;/code&gt;处添加&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200627190445667.png&#34; alt=&#34;image-20200627190445667&#34; /&gt;&lt;/p&gt;
&lt;p&gt;另外一种则是通过连接远程的LDAP服务器做集中认证，在&lt;code&gt;系统管理&lt;/code&gt;-&amp;gt;&lt;code&gt;全局安全配置&lt;/code&gt;-&amp;gt;&lt;code&gt;安全域&lt;/code&gt;处选择&lt;code&gt;LDAP&lt;/code&gt;,然后点击高级配置相关信息，以下作为参考:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200627190720451.png&#34; alt=&#34;image-20200627190720451&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后通过&lt;code&gt;TEST LDAP SETTING&lt;/code&gt;检查是否正常&lt;/p&gt;
&lt;h1 id=&#34;用户权限管理&#34;&gt;用户权限管理&lt;/h1&gt;
&lt;p&gt;用户的权限管理可以基于两种方式，一个是&lt;code&gt;用户的角色&lt;/code&gt;，一个是基于&lt;code&gt;文件夹&lt;/code&gt;进行权限划分，对应的插件分别是下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200627191154961.png&#34; alt=&#34;image-20200627191154961&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在安装完成之后，打开&lt;code&gt;系统管理&lt;/code&gt;-&amp;gt; &lt;code&gt;全局安全配置&lt;/code&gt;会发现授权策略多了两种，分别为:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200627191313539.png&#34; alt=&#34;image-20200627191313539&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们选择基于角色的策略的时候，会发现在&lt;code&gt;系统管理&lt;/code&gt;里面多出一个&lt;code&gt;manage and assign roles&lt;/code&gt;的未分类的功能模块，在里面可以完成基本的权限分配&lt;/p&gt;
&lt;h1 id=&#34;实现权限分配&#34;&gt;实现权限分配&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;将我们的项目复制成如下用于测试：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717163816270-1461158964.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;新建 3 个测试用户：test / develop / product&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打开：系统管理 &amp;ndash;&amp;gt; 管理用户&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717163948522-1496396729.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最终用户格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717164206877-1619957075.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;配置权限：&lt;/p&gt;
&lt;p&gt;打开：系统管理 &amp;ndash;&amp;gt; Manage and Assign Roles&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717164443734-181250621.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们主要使用上面两种。一个用户想要进行操作必须要有两种角色，一种是全局，一种是 Project：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717164802656-1818762044.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建角色：&lt;strong&gt;Manage Roles&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717170418791-1722365533.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;分配角色：&lt;strong&gt;Assign Roles&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717170618081-1587501143.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;说明：我们这三个用户其实代表着三个不同的属性，为了区分我给他定义了三种不同角色。这样以后就可以给每个角色授权不一样的权限。&lt;/p&gt;
&lt;p&gt;当然，我们这里就给了一个全部的只读权限，用户可以登录，并且修改自己的东西。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;创建项目角色：&lt;strong&gt;Manage Roles&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717172125257-228954407.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;给用户分配项目权限：&lt;strong&gt;Assign Roles&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717172425588-647393974.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;说明：我们给用户分配不同的项目和权限，便于测试对比。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;查看权限效果：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;test&lt;/strong&gt; 用户登录后项目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717172544004-1673654626.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test&lt;/strong&gt; 用户项目权限：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717172653395-1812912245.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;test&lt;/strong&gt; 用户权限说明：test 用户登录后能看到 TEST 开头的项目，包括文件夹，但是对于项目，test 用户都只具有执行权限，而没有修改和配置的权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;develop&lt;/strong&gt; 用户登录后项目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717172901263-1599364319.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;develop&lt;/strong&gt; 用户项目权限：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717173025406-1967074174.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;develop&lt;/strong&gt; 用户权限说明：可以看到，因为我们多配置了 Config 权限的原因，develop 相比于 test 用户对于分配给自己权限的项目多了修改配置权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;product&lt;/strong&gt; 用户登录后项目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717173308454-386569323.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;product&lt;/strong&gt; 用户对于 &lt;strong&gt;TEST&lt;/strong&gt; 项目权限：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717173449316-1094677629.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;product&lt;/strong&gt; 用户对于 &lt;strong&gt;PRODUCT&lt;/strong&gt; 项目权限：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717173538492-304695474.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;product&lt;/strong&gt; 用户授权说明：我们可以看到，PROCUDT 项目由于授权了 config 权限，所以用户能够修改，TEST 项目没用 config 权限，虽然同样是授权给了 product 用户，但是也是只有执行权限而已。&lt;/p&gt;
&lt;p&gt;至此，基本的权限管理大致完成！&lt;/p&gt;
&lt;p&gt;特别注意&lt;/p&gt;
&lt;p&gt;在我们设置用户权限的时候，默认已经包含了管理员角色：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717175713057-2114309232.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果我们一不小心把这个勾去掉了，然后就炸了！&lt;/p&gt;
&lt;p&gt;最终的解决办法是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;停止 Jenkins。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;备份 /data/jenkins/jenkins-data/config.xml 配置文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改配置：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;useSecurity&amp;gt;&lt;/span&gt;true&lt;span class=&#34;nt&#34;&gt;&amp;lt;/useSecurity&amp;gt;&lt;/span&gt;

# 改为
&lt;span class=&#34;nt&#34;&gt;&amp;lt;useSecurity&amp;gt;&lt;/span&gt;false&lt;span class=&#34;nt&#34;&gt;&amp;lt;/useSecurity&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;删除权限配置：&lt;strong&gt;建议文件拿来了使用 nodepad++ 类似的工具修改&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;删除：&lt;authorizationStrategy&gt; 标签及其内部内容。&lt;/p&gt;
&lt;p&gt;删除：&lt;securityRealm&gt; 标签及其内部内容。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;启动 jenkins，此时不需要用户名密码，查看设置：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/979767-20190717180704428-1175144121.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;默认没有启动安全，我们需要重新配置我们之前的东西！&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/jenkins-in-actions/jenkins%E6%98%BE%E7%A4%BA%E6%9E%84%E5%BB%BA%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/jenkins-in-actions/jenkins%E6%98%BE%E7%A4%BA%E6%9E%84%E5%BB%BA%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</guid>
        <description>在jenkins的构建状态栏中显示构建的相关信息</description>
        <content:encoded>&lt;p&gt;在jenkins的构建状态栏中显示构建的相关信息&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/kubernetes-in-actions/kubernetes-roadmaps/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/kubernetes-in-actions/kubernetes-roadmaps/</guid>
        <description>kubernetes核心组件 etcd kube</description>
        <content:encoded>&lt;p&gt;kubernetes核心组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34; /&gt; etcd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34; /&gt; kube&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34; /&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/kubernetes-in-actions/untitled/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/kubernetes-in-actions/untitled/</guid>
        <description></description>
        <content:encoded></content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/kubernetes%E4%B8%93%E8%BE%91-01kubernetes%E6%98%AF%E4%BB%80%E4%B9%88/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/kubernetes%E4%B8%93%E8%BE%91-01kubernetes%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
        <description>kubernetes背景 Kubernetes，又称为 k8s（首字母为 k、首字母与尾字母之间有 8 个字符、尾字母为 s，所以简称 k8s）或者简称为 &amp;ldquo;kube&amp;rdquo; ，是一种可自动实施</description>
        <content:encoded>&lt;p&gt;&lt;img src=&#34;images.assets/image-20200611223718493.png&#34; alt=&#34;image-20200611223718493&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;kubernetes背景&#34;&gt;kubernetes背景&lt;/h4&gt;
&lt;p&gt;Kubernetes，又称为 k8s（首字母为 k、首字母与尾字母之间有 8 个字符、尾字母为 s，所以简称 k8s）或者简称为 &amp;ldquo;kube&amp;rdquo; ，是一种可自动实施 &lt;a href=&#34;https://www.redhat.com/zh/topics/containers/whats-a-linux-container&#34; title=&#34;Linux容器&#34;&gt;Linux 容器&lt;/a&gt;操作的开源平台。它可以帮助用户省去应用容器化过程的许多手动部署和扩展操作。也就是说，您可以将运行 Linux 容器的多组主机聚集在一起，由 Kubernetes 帮助您轻松高效地管理这些集群。而且，这些集群可跨&lt;a href=&#34;https://www.redhat.com/zh/topics/cloud-computing/what-is-public-cloud&#34; title=&#34;公共云&#34;&gt;公共云&lt;/a&gt;、&lt;a href=&#34;https://www.redhat.com/zh/topics/cloud-computing/what-is-private-cloud&#34; title=&#34;私有云&#34;&gt;私有云&lt;/a&gt;或&lt;a href=&#34;https://www.redhat.com/zh/topics/cloud-computing/what-is-hybrid-cloud&#34; title=&#34;私有云&#34;&gt;混合云&lt;/a&gt;部署主机。Kubernetes 是理想的托管平台。&lt;/p&gt;
&lt;p&gt;Kubernetes 最初由 Google 的工程师开发和设计。Google 是最早研发 Linux 容器技术的企业之一&lt;a href=&#34;https://zh.wikipedia.org/wiki/Cgroups&#34; title=&#34;cgroup&#34;&gt;（组建了cgroups）&lt;/a&gt;，曾公开分享介绍&lt;a href=&#34;https://speakerdeck.com/jbeda/containers-at-scale&#34; title=&#34;all in container&#34;&gt; Google 如何将一切都运行于容器之中&lt;/a&gt;（这是 Google 云服务背后的技术）。Google 每周会启用超过 20 亿个容器——全都由内部平台 &lt;a href=&#34;http://blog.kubernetes.io/2015/04/borg-predecessor-to-kubernetes.html&#34; title=&#34;Borg&#34;&gt;Borg&lt;/a&gt; 支撑。Borg 是 Kubernetes 的前身，多年来开发 Borg 的经验教训成了影响 Kubernetes 中许多技术的主要因素。&lt;/p&gt;
&lt;p&gt;红帽是第一批与 Google 合作研发 Kubernetes 的公司之一，作为 Kubernetes 上游项目的&lt;a href=&#34;https://www.stackalytics.com/cncf?module=kubernetes&#34;&gt;第二大贡献者&lt;/a&gt;，我们甚至在这个项目启动之前就已参与其中。2015 年，Google 将 Kubernetes 项目&lt;a href=&#34;https://techcrunch.com/2015/07/21/as-kubernetes-hits-1-0-google-donates-technology-to-newly-formed-cloud-native-computing-foundation-with-ibm-intel-twitter-and-others/&#34;&gt;捐赠&lt;/a&gt;给新成立的&lt;a href=&#34;https://www.cncf.io/&#34; title=&#34;CNCF&#34;&gt;云原生计算基金会&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kuberneters(k8s)&lt;/code&gt;是谷歌使用了将近20年的一个云产品，是&lt;code&gt;Borg&lt;/code&gt;的一个开源版本。Borg是谷歌的一个久负盛名的内部使用的大规模集群管理系统，它基于容器技术，目的是实现资源管理的自动化，以及跨多个数中心的资源利用率的最大化。十几年来，谷歌一直通过 Borg 系统管理着数量庞大的应用程序集群。由于谷歌员工都签署了保密协议，即便离职也不能泄露&lt;code&gt;Borg&lt;/code&gt;的内部设计，所以外界一直无法了解关于它的更多信息。直到&lt;code&gt;2015年4月&lt;/code&gt;，传闻许久的 Borg 论文伴随 Kuberneters 的高调宣传被谷歌首次公开，大家才得以了解它的更多内幕。正是由于站在 Borg 这个前辈的肩膀上，吸取了 Borg 过去十年间的经验与教训，所以 Kubernetes 一经开源就一鸣惊人，并迅速称霸了容器技术领域。&lt;/p&gt;
&lt;p&gt;Kubernetes 拥有一个庞大且快速增长的生态系统。因为它是一个可移植的、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。Kubernetes 的服务、支持和工具广泛可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt; 源于希腊语，意为 &amp;ldquo;舵手&amp;rdquo; 或 &amp;ldquo;飞行员&amp;rdquo;。Google 在 2014 年开源了 Kubernetes 项目。Kubernetes 建立在 &lt;a href=&#34;https://ai.google/research/pubs/pub43438&#34;&gt;Google 在大规模运行生产工作负载方面拥有十几年的经验&lt;/a&gt;的基础上，结合了社区中最好的想法和实践。&lt;/p&gt;
&lt;h4 id=&#34;kubernetes时代&#34;&gt;kubernetes时代&lt;/h4&gt;
&lt;p&gt;通过对比来看一下为什么我们需要kubernetes，为什么新时代需要kubernetes：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200611224439559.png&#34; alt=&#34;image-20200611224439559&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;传统部署时代：&lt;/strong&gt; 早期，将单一的应用服务运行在物理服务器上，无法给服务器的应用程序进行资源的限制，导致物理服务器之间的资源负载使用不均衡，就导致了服务器上的应用程序的性能下降，物理服务器的维护成本变得很高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟化部署时代：&lt;/strong&gt; 作为解决方案，引入了虚拟化功能，它允许您在单个物理服务器的 CPU 上运行多个虚拟机&lt;code&gt;VM&lt;/code&gt;。虚拟化功能允许应用程序在 VM 之间隔离，并提供安全级别，因为一个应用程序的信息不能被另一应用程序自由地访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器部署时代：&lt;/strong&gt; &lt;code&gt;容器&lt;/code&gt;类似于 VM，但是它们具有轻量级的隔离属性，可以在应用程序之间共享操作系统&lt;code&gt;OS&lt;/code&gt;。因此，容器被认为是目前最轻量级的。容器与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等。由于它们与基础架构分离，因此可以跨云和 OS 分发进行移植。而在容器时代，&lt;code&gt;Docker&lt;/code&gt;容器引擎是最流行的一个。&lt;/p&gt;
&lt;p&gt;容器因具有许多优势而变得流行起来。下面列出了容器的一些好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序的构建和部署：与传统部署时代对比，容器镜像创建显得更简便性、效率更高。&lt;/li&gt;
&lt;li&gt;持续开发、集成和部署：通过快速简单的回滚(由于镜像不可变性)，提供可靠且频繁的容器镜像构建和部署。&lt;/li&gt;
&lt;li&gt;开发与运维分离：在&lt;code&gt;build&lt;/code&gt;/&lt;code&gt;deploy&lt;/code&gt;而不是在&lt;code&gt;deploy&lt;/code&gt;时创建应用程序容器，从而将应用程序与基础架构分离。&lt;/li&gt;
&lt;li&gt;可观察性不仅可以显示操作系统级别的信息和指标，还可以显示应用程序容器的&lt;code&gt;运行状况&lt;/code&gt;和&lt;code&gt;其他指标&lt;/code&gt;信息。&lt;/li&gt;
&lt;li&gt;能保证开发、测试和生产的环境一致性：即使在便携式的计算机上也能与云上保持相同地运行。&lt;/li&gt;
&lt;li&gt;应用服务可以运行在任何支持容器引擎的平台上。&lt;/li&gt;
&lt;li&gt;松散耦合、分布式、弹性、解放的微服务：应用程序被分解成较小的独立部分，并且可以动态部署和管理 - 而不是在一台大型单机上整体运行。&lt;/li&gt;
&lt;li&gt;资源隔离：可预测的应用程序性能。&lt;/li&gt;
&lt;li&gt;资源利用：高效率和高密度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;为什么需要-kubernetes它能做什么&#34;&gt;为什么需要 Kubernetes，它能做什么?&lt;/h4&gt;
&lt;p&gt;容器是打包和运行应用程序的最好的一种方式。在生产环境中，您需要管理运行应用程序的容器，并确保不会停机。例如，如果一个容器发生故障，则需要启动另一个容器。如果系统能够自动的处理这种行为，你觉得会不会是更方便。&lt;/p&gt;
&lt;p&gt;这就是 Kubernetes 的救援方法！Kubernetes 为您提供了一个可弹性运行分布式系统的框架。Kubernetes 会满足您的扩展要求、故障转移、部署模式等。例如，Kubernetes 可以轻松地实现金丝雀&lt;code&gt;canary&lt;/code&gt;发布。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于容器的应用部署、维护、滚动升级: &lt;code&gt;不断的将服务运行为按照用户定义服务运行的期望状态&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;service&lt;/code&gt;资源对象自实现负载均衡和服务发现: &lt;code&gt;当出现流量负载的时候，service会将流量按照一定的均衡算法调度到对应的资源组&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实现跨机器和跨地域的集群调度: &lt;code&gt;可以按照用户定义的资源调度方式进行自动化的资源调度&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;根据资源负载情况实现服务自动伸缩: &lt;code&gt;获取服务运行负载指标，通过HPA实现服务的自动扩容与伸缩&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实现多种类型服务负载，比如有状态和无状态类型服务: &lt;code&gt;支持例如nginx、filebeat等这种无状态以及MYSQL,Mongodb,Elasticsearch等有状态的集群服务&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;支持多种类型的存储插件，比如&lt;code&gt;s3&lt;/code&gt;,&lt;code&gt;ceph&lt;/code&gt;,&lt;code&gt;nfs&lt;/code&gt;,&lt;code&gt;glusterfs&lt;/code&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;插件机制保证扩展性：&lt;code&gt;通过在不修改源代码的情况下增加类似如CNI、CRI、CSI、Device Plugin、CRD等扩展来解决越来越多的个性化需求&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自身有安全防护和资源的准入机制：&lt;code&gt;k8s的一套安全策略，通过用户或组与k8s上一些资源角色绑定从而实现在单一范围内有权限执行动作&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实现多租户应用的支撑力:&lt;code&gt;k8s本身具有多层资源隔离的条件例如集群本身、命令空间、节点、pod与容器&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;透明的服务注册和服务发现机制: &lt;code&gt;通过k8s的service资源对象与label资源对象实现基本的服务注册与发现&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;轻松实现服务版本迭代和金丝雀发布：&lt;code&gt;因为k8s本身的特性，实现canary显得非常简单&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实现服务在线扩容能力: &lt;code&gt;k8s通过自身的resize功能结合一些存储卷实现不丢失原来数据的情况下进行在线扩容&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多粒度细粒度的实现配额管理能力&lt;/li&gt;
&lt;li&gt;支持自定义扩展（核心+外围扩展）API&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;kubernetes-不是什么&#34;&gt;Kubernetes 不是什么&lt;/h4&gt;
&lt;p&gt;Kubernetes 不是传统的、包罗万象的 PaaS（平台即服务）系统。由于 Kubernetes 在容器级别而不是在硬件级别运行，因此它提供了 PaaS 产品共有的一些普遍适用的功能，例如部署、扩展、负载均衡、日志记录和监视。但是，Kubernetes 不是单一的，默认解决方案是可选和可插拔的。Kubernetes 提供了构建开发人员平台的基础，但是在重要的地方保留了用户的选择和灵活性。&lt;/p&gt;
&lt;p&gt;Kubernetes：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes 不限制支持的应用程序类型。Kubernetes 旨在支持极其多种多样的工作负载，包括无状态、有状态和数据处理工作负载。如果应用程序可以在容器中运行，那么它应该可以在 Kubernetes 上很好地运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes 不部署源代码，也不构建您的应用程序。持续集成(CI)、交付和部署（CI/CD）工作流取决于组织的文化和偏好以及技术要求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes 不提供应用程序级别的服务作为内置服务，例如中间件&lt;code&gt;消息中间件&lt;/code&gt;、数据处理框架&lt;code&gt;Spark&lt;/code&gt;、数据库&lt;code&gt;mysql&lt;/code&gt;、缓存、集群存储系统&lt;code&gt;Ceph&lt;/code&gt;。这样的组件可以在 Kubernetes 上运行，并且/或者可以由运行在 Kubernetes 上的应用程序通过可移植机制&lt;a href=&#34;https://openservicebrokerapi.org/&#34;&gt;开放服务代理&lt;/a&gt;来访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes 不提供日志记录、监控或警报解决方案。它提供了一些集成作为概念证明，并提供了收集和导出指标的机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes 不提供或不要求配置语言/系统（例如 jsonnet），它提供了声明性 API，该声明性 API 可以由任意形式的声明性规范所构成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes 不提供也不采用任何全面的机器配置、维护、管理或自我修复系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此外，Kubernetes 不仅仅是一个编排系统，实际上它消除了编排的需要。编排的技术定义是执行已定义的工作流程：首先执行 A，然后执行 B，再执行 C。相比之下，Kubernetes 包含一组独立的、可组合的控制过程，这些过程连续地将当前状态驱动到所提供的所需状态。从 A 到 C 的方式无关紧要，也不需要集中控制，这使得系统更易于使用且功能更强大、健壮、弹性和可扩展性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;支持的云厂商&#34;&gt;支持的云厂商&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;华为云CCE&lt;/li&gt;
&lt;li&gt;阿里云ACK&lt;/li&gt;
&lt;li&gt;腾讯云TKE&lt;/li&gt;
&lt;li&gt;谷歌云GCE&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/kubernetes%E4%B8%93%E8%BE%91-02kubernetes%E7%82%BC%E6%B0%94%E6%9C%9F%E4%B9%8B%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/kubernetes%E4%B8%93%E8%BE%91-02kubernetes%E7%82%BC%E6%B0%94%E6%9C%9F%E4%B9%8B%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</guid>
        <description>kubernetes专辑-02kubernetes炼气期之平台搭建 环境说明 功能名称 IP 配置 k8s-master 192.168.10.231 4c8g k8s-node1 192.168.10.232 8c16g K8s-node2 192.168.10.233 8c16g k8s-node3 192.168.10.234 8c16g k8s-node4 192.168.10.235 8c16g 环境初始化 更新环境 1 2 yum update -y yum install -y wget vim net-tools epel-release</description>
        <content:encoded>&lt;h1 id=&#34;kubernetes专辑-02kubernetes炼气期之平台搭建&#34;&gt;kubernetes专辑-02kubernetes炼气期之平台搭建&lt;/h1&gt;
&lt;h2 id=&#34;环境说明&#34;&gt;环境说明&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能名称&lt;/th&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;k8s-master&lt;/td&gt;
&lt;td&gt;192.168.10.231&lt;/td&gt;
&lt;td&gt;4c8g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8s-node1&lt;/td&gt;
&lt;td&gt;192.168.10.232&lt;/td&gt;
&lt;td&gt;8c16g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;K8s-node2&lt;/td&gt;
&lt;td&gt;192.168.10.233&lt;/td&gt;
&lt;td&gt;8c16g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8s-node3&lt;/td&gt;
&lt;td&gt;192.168.10.234&lt;/td&gt;
&lt;td&gt;8c16g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8s-node4&lt;/td&gt;
&lt;td&gt;192.168.10.235&lt;/td&gt;
&lt;td&gt;8c16g&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;环境初始化&#34;&gt;环境初始化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;更新环境&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum update -y
yum install -y wget vim net-tools epel-release
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;关闭filewalld&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl disable firewalld
systemctl stop firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;关闭selinux&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sed -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/SELINUX=enforcing/SELINUX=disabled/g&amp;#34;&lt;/span&gt; /etc/selinux/config
sed -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/SELINUX=enforcing/SELINUX=disabled/g&amp;#34;&lt;/span&gt; /etc/sysconfig/selinux
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;getenforce&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Enforcing&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    setenforce &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;current selinux status...&amp;#34;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;getenforce&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;关闭swap&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;swapoff -a
sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/.*swap.*/#&amp;amp;/&amp;#39;&lt;/span&gt; /etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;增加主机名解析&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF  /etc/host
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;192.168.10.231  dev-k8s-01.example.com
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;192.168.10.232  dev-k8s-02.example.com
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;192.168.10.233  dev-k8s-03.example.com
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;192.168.10.234  dev-k8s-04.example.com
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;192.168.10.235  dev-k8s-05.example.com
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
6. 优化内核参数
​&lt;span class=&#34;sb&#34;&gt;```&lt;/span&gt;bash
cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF  &amp;gt;&amp;gt; /etc/sysctl.d/k8s.conf
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;net.bridge.bridge-nf-call-ip6tables = 1
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;net.bridge.bridge-nf-call-iptables = 1
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;

sysctl --system
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;更新Yum源配置&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;date +%F&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;.backup
wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
yum makecache fast
cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF  /etc/yum.repos.d/kubernetes.repo
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[kubernetes]
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;name=Kubernetes
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;enabled=1
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;gpgcheck=0
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
yum clean all
yum makecache fast
yum -y update
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;安装docker&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum -y install yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
yum install -y docker-ce-18.09.9-3.el7
mkdir  /etc/docker -pv
cat &amp;gt; /etc/docker/daemon.json &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;{
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://********.mirror.aliyuncs.com&amp;#34;],
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;exec-opts&amp;#34;: [&amp;#34;native.cgroupdriver=systemd&amp;#34;],
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log-opts&amp;#34;: {
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;max-size&amp;#34;: &amp;#34;100m&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;},
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;storage-driver&amp;#34;: &amp;#34;overlay2&amp;#34;,
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;storage-opts&amp;#34;: [
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;overlay2.override_kernel_check=true&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;]
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
systemctl &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; --now docker.service
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;安装初始化工具&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install -y kubeadm kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;获取基础镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;KUBE_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v1.16.0
&lt;span class=&#34;nv&#34;&gt;KUBE_PAUSE_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.1
&lt;span class=&#34;nv&#34;&gt;ETCD_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.3.15-0
&lt;span class=&#34;nv&#34;&gt;CORE_DNS_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.6.2
&lt;span class=&#34;nv&#34;&gt;GCR_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;k8s.gcr.io
&lt;span class=&#34;nv&#34;&gt;ALIYUN_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;registry.cn-hangzhou.aliyuncs.com/google_containers
&lt;span class=&#34;nv&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt;kube-proxy:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KUBE_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
kube-scheduler:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KUBE_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
kube-controller-manager:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KUBE_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
kube-apiserver:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KUBE_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
pause:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KUBE_PAUSE_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
etcd:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ETCD_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
coredns:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CORE_DNS_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; imageName in &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[@]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
    docker pull &lt;span class=&#34;nv&#34;&gt;$ALIYUN_URL&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$imageName&lt;/span&gt;
    docker tag  &lt;span class=&#34;nv&#34;&gt;$ALIYUN_URL&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$imageName&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$GCR_URL&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$imageName&lt;/span&gt;
    docker rmi &lt;span class=&#34;nv&#34;&gt;$ALIYUN_URL&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$imageName&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以上10部建议在所有的节点上安装,在node节点上可以不用安装kubeadm&lt;/p&gt;
&lt;h2 id=&#34;部署集群&#34;&gt;部署集群&lt;/h2&gt;
&lt;h3 id=&#34;kubeadm初始化集群&#34;&gt;kubeadm初始化集群&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-01 ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# sudo kubeadm init \&lt;/span&gt;
&amp;gt;   --apiserver-advertise-address 192.168.10.231 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&amp;gt;   --kubernetes-version&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v1.16.0 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&amp;gt;   --pod-network-cidr&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.0.0/16
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;init&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Using Kubernetes version: v1.16.0
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;preflight&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Running pre-flight checks
        &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;WARNING Service-Kubelet&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: kubelet service is not enabled, please run &lt;span class=&#34;s1&#34;&gt;&amp;#39;systemctl enable kubelet.service&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;preflight&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Pulling images required &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; setting up a Kubernetes cluster
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;preflight&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; This might take a minute or two, depending on the speed of your internet connection
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;preflight&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; You can also perform this action in beforehand using &lt;span class=&#34;s1&#34;&gt;&amp;#39;kubeadm config images pull&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing kubelet environment file with flags to file &lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/lib/kubelet/kubeadm-flags.env&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing kubelet configuration to file &lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/lib/kubelet/config.yaml&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Activating the kubelet service
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Using certificateDir folder &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/kubernetes/pki&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;ca&amp;#34;&lt;/span&gt; certificate and key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;apiserver&amp;#34;&lt;/span&gt; certificate and key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; apiserver serving cert is signed &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; DNS names &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dev-k8s-01.example.com kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; and IPs &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;10.96.0.1 192.168.10.231&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;apiserver-kubelet-client&amp;#34;&lt;/span&gt; certificate and key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;front-proxy-ca&amp;#34;&lt;/span&gt; certificate and key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;front-proxy-client&amp;#34;&lt;/span&gt; certificate and key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;etcd/ca&amp;#34;&lt;/span&gt; certificate and key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;etcd/server&amp;#34;&lt;/span&gt; certificate and key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; etcd/server serving cert is signed &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; DNS names &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dev-k8s-01.example.com localhost&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; and IPs &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;192.168.10.231 127.0.0.1 ::1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;etcd/peer&amp;#34;&lt;/span&gt; certificate and key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; etcd/peer serving cert is signed &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; DNS names &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;dev-k8s-01.example.com localhost&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; and IPs &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;192.168.10.231 127.0.0.1 ::1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;etcd/healthcheck-client&amp;#34;&lt;/span&gt; certificate and key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;apiserver-etcd-client&amp;#34;&lt;/span&gt; certificate and key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Generating &lt;span class=&#34;s2&#34;&gt;&amp;#34;sa&amp;#34;&lt;/span&gt; key and public key
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubeconfig&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Using kubeconfig folder &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/kubernetes&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubeconfig&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing &lt;span class=&#34;s2&#34;&gt;&amp;#34;admin.conf&amp;#34;&lt;/span&gt; kubeconfig file
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubeconfig&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubelet.conf&amp;#34;&lt;/span&gt; kubeconfig file
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubeconfig&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing &lt;span class=&#34;s2&#34;&gt;&amp;#34;controller-manager.conf&amp;#34;&lt;/span&gt; kubeconfig file
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubeconfig&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing &lt;span class=&#34;s2&#34;&gt;&amp;#34;scheduler.conf&amp;#34;&lt;/span&gt; kubeconfig file
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;control-plane&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Using manifest folder &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;control-plane&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Creating static Pod manifest &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-apiserver&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;control-plane&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Creating static Pod manifest &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-controller-manager&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;control-plane&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Creating static Pod manifest &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-scheduler&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;etcd&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Creating static Pod manifest &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; etcd in &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;wait-control-plane&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the kubelet to boot up the control plane as static Pods from directory &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/kubernetes/manifests&amp;#34;&lt;/span&gt;. This can take up to 4m0s
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;apiclient&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; All control plane components are healthy after 39.003840 seconds
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;upload-config&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Storing the configuration used in ConfigMap &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubeadm-config&amp;#34;&lt;/span&gt; in the &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system&amp;#34;&lt;/span&gt; Namespace
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubelet&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Creating a ConfigMap &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubelet-config-1.16&amp;#34;&lt;/span&gt; in namespace kube-system with the configuration &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the kubelets in the cluster
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;upload-certs&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Skipping phase. Please see --upload-certs
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mark-control-plane&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Marking the node dev-k8s-01.example.com as control-plane by adding the label &lt;span class=&#34;s2&#34;&gt;&amp;#34;node-role.kubernetes.io/master=&amp;#39;&amp;#39;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;mark-control-plane&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Marking the node dev-k8s-01.example.com as control-plane by adding the taints &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;node-role.kubernetes.io/master:NoSchedule&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubelet-check&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Initial timeout of 40s passed.
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;bootstrap-token&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Using token: 9nwjok.ykyphybsveka8gev
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;bootstrap-token&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;bootstrap-token&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; nodes to get long term certificate credentials
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;bootstrap-token&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;bootstrap-token&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; configured RBAC rules to allow certificate rotation &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; all node client certificates in the cluster
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;bootstrap-token&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Creating the &lt;span class=&#34;s2&#34;&gt;&amp;#34;cluster-info&amp;#34;&lt;/span&gt; ConfigMap in the &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-public&amp;#34;&lt;/span&gt; namespace
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;addons&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Applied essential addon: CoreDNS
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;addons&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p &lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/.kube
  sudo cp -i /etc/kubernetes/admin.conf &lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/.kube/config
  sudo chown &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;id -u&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;:&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;id -g&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/.kube/config

You should now deploy a pod network to the cluster.
Run &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubectl apply -f [podnetwork].yaml&amp;#34;&lt;/span&gt; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.10.231:6443 --token 9nwjok.ykyphybsveka8gev &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --discovery-token-ca-cert-hash sha256:b92d7553a1da683a315ad2f4f5fcc855e2d630da0c7553467cdf2db3bd25a3ff
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;初始化kubectl配置文件&#34;&gt;初始化kubectl配置文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-01 ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# mkdir -p $HOME/.kube&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-01 ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-01 ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# sudo chown $(id -u):$(id -g) $HOME/.kube/config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;添加节点&#34;&gt;添加节点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;添加192.168.10.232&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-05 ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubeadm join 192.168.10.231:6443 --token 9pr3rj.0u8m510fai0op75h \&lt;/span&gt;
   --discovery-token-ca-cert-hash sha256:b86bdaaa0bed56e846adb0abc625cf29902dec9e3130d0ff7dae42ffb2e13349
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;preflight&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Running pre-flight checks
        &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;WARNING Service-Kubelet&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: kubelet service is not enabled, please run &lt;span class=&#34;s1&#34;&gt;&amp;#39;systemctl enable kubelet.service&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;preflight&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Reading configuration from the cluster...
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;preflight&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; FYI: You can look at this config file with &lt;span class=&#34;s1&#34;&gt;&amp;#39;kubectl -n kube-system get cm kubeadm-config -oyaml&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Downloading configuration &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the kubelet from the &lt;span class=&#34;s2&#34;&gt;&amp;#34;kubelet-config-1.16&amp;#34;&lt;/span&gt; ConfigMap in the kube-system namespace
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing kubelet configuration to file &lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/lib/kubelet/config.yaml&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Writing kubelet environment file with flags to file &lt;span class=&#34;s2&#34;&gt;&amp;#34;/var/lib/kubelet/kubeadm-flags.env&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Activating the kubelet service
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kubelet-start&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Waiting &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the kubelet to perform the TLS Bootstrap...

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run &lt;span class=&#34;s1&#34;&gt;&amp;#39;kubectl get nodes&amp;#39;&lt;/span&gt; on the control-plane to see this node join the cluster.

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-05 ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# systemctl enable kubelet.service&lt;/span&gt;
Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-05 ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;# 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如上所示依旧添加192.168.10.233节点&lt;/p&gt;
&lt;h3 id=&#34;验证集群状态&#34;&gt;验证集群状态&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-01 ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl cluster-info&lt;/span&gt;
Kubernetes master is running at https://192.168.10.231:6443
KubeDNS is running at https://192.168.10.231:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use &lt;span class=&#34;s1&#34;&gt;&amp;#39;kubectl cluster-info dump&amp;#39;&lt;/span&gt;.
➜  ~ &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;☸ kubernetes-admin@kubernetes:default&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; kubectl get nodes -o wide
NAME                  STATUS   ROLES    AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION               CONTAINER-RUNTIME
dev-k8s-01.example.com   Ready    master   14h   v1.16.3   192.168.10.231   &amp;lt;none&amp;gt;        CentOS Linux &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Core&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;   3.10.0-957.21.3.el7.x86_64   docker://18.9.9
dev-k8s-02.example.com   Ready    &amp;lt;none&amp;gt;   14h   v1.16.3   192.168.10.232   &amp;lt;none&amp;gt;        CentOS Linux &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Core&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;   3.10.0-957.21.3.el7.x86_64   docker://18.9.9
dev-k8s-03.example.com   Ready    &amp;lt;none&amp;gt;   14h   v1.16.3   192.168.10.233   &amp;lt;none&amp;gt;        CentOS Linux &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Core&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;   3.10.0-957.21.3.el7.x86_64   docker://18.9.9
dev-k8s-04.example.com   Ready    &amp;lt;none&amp;gt;   14h   v1.16.3   192.168.10.234   &amp;lt;none&amp;gt;        CentOS Linux &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Core&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;   3.10.0-1062.4.1.el7.x86_64   docker://18.9.9
dev-k8s-05.example.com   Ready    &amp;lt;none&amp;gt;   13h   v1.16.3   192.168.10.235   &amp;lt;none&amp;gt;        CentOS Linux &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Core&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;   3.10.0-957.el7.x86_64        docker://18.9.9

➜  ~ &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;☸ kubernetes-admin@kubernetes:default&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                          READY   STATUS    RESTARTS   AGE   IP               NODE                  NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-96xm6                      1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   10.244.3.2       dev-k8s-04.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   coredns-5644d7b6d9-nkb9f                      1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   10.244.1.2       dev-k8s-02.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   etcd-dev-k8s-01.example.com                      1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.231   dev-k8s-01.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-apiserver-dev-k8s-01.example.com            1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.231   dev-k8s-01.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-controller-manager-dev-k8s-01.example.com   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.231   dev-k8s-01.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-proxy-bhtjc                              1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.232   dev-k8s-02.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-proxy-h2ltx                              1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.231   dev-k8s-01.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-proxy-kh9k9                              1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.234   dev-k8s-04.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-proxy-lfh46                              1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.233   dev-k8s-03.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-proxy-pcm5d                              1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13h   192.168.10.235   dev-k8s-05.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-scheduler-dev-k8s-01.example.com            1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.231   dev-k8s-01.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;安装插件&#34;&gt;安装插件&lt;/h2&gt;
&lt;h3 id=&#34;安装flannel网络插件&#34;&gt;安装flannel网络插件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget -O /opt/k8sworkspces/kube-flannel.yml https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;span class=&#34;nv&#34;&gt;FLANNEL_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v0.11.0
&lt;span class=&#34;nv&#34;&gt;QUAY_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;quay.io/coreos
&lt;span class=&#34;nv&#34;&gt;QINIU_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;quay-mirror.qiniu.com/coreos
&lt;span class=&#34;nv&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=(&lt;/span&gt;flannel:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FLANNEL_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-amd64
flannel:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FLANNEL_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-arm64
flannel:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FLANNEL_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-arm
flannel:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FLANNEL_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-ppc64le
flannel:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;FLANNEL_VERSION&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-s390x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; imageName in &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[@]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
    docker pull &lt;span class=&#34;nv&#34;&gt;$QINIU_URL&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$imageName&lt;/span&gt;
    docker tag  &lt;span class=&#34;nv&#34;&gt;$QINIU_URL&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$imageName&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$QUAY_URL&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$imageName&lt;/span&gt;
    docker rmi &lt;span class=&#34;nv&#34;&gt;$QINIU_URL&lt;/span&gt;/&lt;span class=&#34;nv&#34;&gt;$imageName&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 也可以只拉去你机器适配的架构版本`rpm -q centos-release`&lt;/span&gt;
kubectl apply -f /opt/k8sworkspces/kube-flannel.yml &lt;span class=&#34;c1&#34;&gt;#安装flannel&lt;/span&gt;

➜  ~ &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;☸ kubernetes-admin@kubernetes:default&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; kubectl get pods --all-namespaces -o wide &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep flannel
kube-system   kube-flannel-ds-amd64-9tnc7                   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.234   dev-k8s-04.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-flannel-ds-amd64-cjh4s                   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.231   dev-k8s-01.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-flannel-ds-amd64-fhlk4                   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          13h   192.168.10.235   dev-k8s-05.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-flannel-ds-amd64-fnfpj                   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.233   dev-k8s-03.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-system   kube-flannel-ds-amd64-v5qtj                   1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          14h   192.168.10.232   dev-k8s-02.example.com   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;krew&#34;&gt;krew&lt;/h3&gt;
&lt;p&gt;krew 能够很方便的管理kubectl的插件包,包括安装卸载，查询升级&lt;/p&gt;
&lt;h4 id=&#34;安装&#34;&gt;安装&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -x&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /opt/k8sworkspces/krew &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  curl -fsSLO  &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://github.com/kubernetes-sigs/krew/releases/download/v0.3.2/krew.{tar.gz,yaml}&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  tar zxvf krew.tar.gz &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  ./krew-&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;uname &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tr &lt;span class=&#34;s1&#34;&gt;&amp;#39;[:upper:]&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;[:lower:]&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;_amd64&amp;#34;&lt;/span&gt; install &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --manifest&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;krew.yaml --archive&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;krew.tar.gz
&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;KREW_ROOT&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;:-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/.krew&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-01 krew&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl krew install ca-cert # 安装一个ca-caert的插件&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-01 krew&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl ca-cert&lt;/span&gt;
-----BEGIN CERTIFICATE-----
MIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl
cm5ldGVzMB4XDTE5MTExNTA0MjEzOVoXDTI5MTExMjA0MjEzOVowFTETMBEGA1UE
AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANEi
tPdWINQZfZqM4c/uaOzsBBByn0CLLLmMdiKF4Gpk9proDoR9eOMhQiiVLZ4tFFsb
POTwq+MvHe4kEsunl/hBwNbXvGfbvnr+vX9ZsDfU5FT5O55Zryq5jgANDKFChKx9
R91QsbCeQKIWlc9AFdot8ig9LhYTfHJRfMeUBYl5Xzoof8YRMsJ0jOKLWca+oCfd
doLKda9VpahU2AEmEFHuD6ctwBGFObadSktoOvr0Gfzo4cXRkjGXp4G1U8O1LLsU
HiypNN4m7Romy4tIjPAxDAoDDyjA8OrbPlvJt8Oo0CHcAxFZDJCsKAG1s0nS7PJj
vR2ULtIrHAm5QZa8BmMCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB
/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAKAi1Fg/2MlFxPbq9yaNkBhAV2ou
/VbbuEJF1c92Tk24cuJV3vuYoTmWIGp1LYTLTW/xcfwFoanLRPBlBONoJRzXLIZD
/mmuYMrTaKMwbCz2t4awqQyDb8A3RcgTrSfCWMs0uyvjPVgiJDfMlg0WDJ4kPb3Y
SQv7UaaNa57gkEHB1PJy10n1E3gAcb6NVxvly7cHVaJlenZY6mkT40K8zVOXuM/G
ausCNXEfEUXED2C8Ippj/sr1TgRlD8Gfi+Xp7XzHTeu5A+ac4YPmnoW8jurzo5z5
Q5TDBFRaOTyRgUxYt+PKv01S9tTiHgkxHoBzPQF7Z2TuRNKXoVQeXiUzW/s&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
-----END CERTIFICATE-----

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@dev-k8s-01 krew&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl krew --help #查看krew的支持选项&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/kubernetes%E4%B8%93%E8%BE%91-03kubernetes%E5%AE%9A%E4%B9%89%E6%B8%85%E5%8D%95yaml%E6%96%87%E4%BB%B6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/kubernetes%E4%B8%93%E8%BE%91-03kubernetes%E5%AE%9A%E4%B9%89%E6%B8%85%E5%8D%95yaml%E6%96%87%E4%BB%B6/</guid>
        <description>k8s所有的配置文件以及资源的定义配置文件都是基于YAML格式的 YAML的设计目标 使用 YAML 文件的优点： YAML 文件可读性较高，易于实现和使用。 可在现有的所有编程语言之间</description>
        <content:encoded>&lt;p&gt;&lt;code&gt;k8s&lt;/code&gt;所有的配置文件以及资源的定义配置文件都是基于&lt;code&gt;YAML&lt;/code&gt;格式的&lt;/p&gt;
&lt;h4 id=&#34;yaml的设计目标&#34;&gt;YAML的设计目标&lt;/h4&gt;
&lt;p&gt;使用 YAML 文件的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;YAML 文件可读性较高，易于实现和使用。&lt;/li&gt;
&lt;li&gt;可在现有的所有编程语言之间轻松移植。&lt;/li&gt;
&lt;li&gt;与敏捷语言的原生数据结构相匹配。&lt;/li&gt;
&lt;li&gt;YAML 文件具有一致模型，支持通用工具。&lt;/li&gt;
&lt;li&gt;YAML 文件支持 One-pass 处理。&lt;/li&gt;
&lt;li&gt;使用方便，因此您无需再将所有的参数添加到命令行中。&lt;/li&gt;
&lt;li&gt;易于维护 – 可以将 YAML 文件添加到源控件中以跟踪更改。&lt;/li&gt;
&lt;li&gt;灵活便捷 – 可以使用 YAML 创建更加复杂的结构（相对于使用命令行可以创建的结构）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;yaml可以用来做什么&#34;&gt;YAML可以用来做什么&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;当数据能够容易的被读懂的时候，任何事情都会变得简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;配置文件&lt;code&gt;configuration files&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;日志文件&lt;code&gt;log files&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进程间消息传递&lt;code&gt;interprocess messaging&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;跨语言数据共享&lt;code&gt;cross-language data sharing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对象持久性&lt;code&gt;object persistence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;复杂数据结构&lt;code&gt;debugging of complex data structures&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;与-json-和-xml-的关系&#34;&gt;与 JSON 和 XML 的关系&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;XML&lt;/code&gt; 是许多领域的优先采用格式。XML 最初设计为与标准通用标记语言 (SGML) 向后兼容，后者旨在支持结构化文档。因此，XML 存在许多设计上的约束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JSON&lt;/code&gt; 的设计理念是简单性和通用性，并且易于生成和解析。JSON 格式的可读性低，但是这种格式的数据每一种现代编程环境都可以轻松处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;YAML&lt;/code&gt; 的设计目标是提升可读性，提供更加完善的信息模型。YAML 的生成和解析更加复杂，因此可以将其视为 JSON 的自然超集。每个 JSON 文件都是一个有效的 YAML 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在需要额外功能的情况下，可以轻松地从 JSON 迁移到 YAML。YAML 是从 XML 衍生而来。&lt;/p&gt;
&lt;h4 id=&#34;yaml工具&#34;&gt;yaml工具&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.yamllint.com/&#34; title=&#34;在线校验格式&#34;&gt;在线yaml格式校验&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令行校验&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python -c &lt;span class=&#34;s1&#34;&gt;&amp;#39;import yaml, sys; yaml.safe_load(sys.stdin)&amp;#39;&lt;/span&gt; &amp;lt; cfg.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/andreazorzetto/yh&#34; title=&#34;YH高亮显示YAML&#34;&gt;Yaml高亮显示&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在线获取yaml的值: &lt;code&gt;shyaml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/links/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/links/</guid>
        <description></description>
        <content:encoded></content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/nginx%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E4%B8%93%E8%BE%91/01-nginx%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9C%BA%E6%99%AF%E4%BB%A5%E5%8F%8A%E4%BC%98%E7%82%B9/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/nginx%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E4%B8%93%E8%BE%91/01-nginx%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9C%BA%E6%99%AF%E4%BB%A5%E5%8F%8A%E4%BC%98%E7%82%B9/</guid>
        <description></description>
        <content:encoded></content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/%E4%BB%8E%E8%8B%A6%E9%80%BC%E5%88%B0%E7%89%9B%E9%80%BC%E8%AF%A6%E8%A7%A3devops%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%89%93%E6%80%AA%E5%8D%87%E7%BA%A7%E4%B9%8B%E8%B7%AF/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/%E4%BB%8E%E8%8B%A6%E9%80%BC%E5%88%B0%E7%89%9B%E9%80%BC%E8%AF%A6%E8%A7%A3devops%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%89%93%E6%80%AA%E5%8D%87%E7%BA%A7%E4%B9%8B%E8%B7%AF/</guid>
        <description>从苦逼到牛逼，详解DevOps工程师的打怪升级之路 从进入职场做运维到写点代码，慢慢的快四年了，就像玩消消乐一样，一关又一关的走了过来(你猜猜我的消消乐多少关了？</description>
        <content:encoded>&lt;h3 id=&#34;从苦逼到牛逼详解devops工程师的打怪升级之路&#34;&gt;从苦逼到牛逼，详解DevOps工程师的打怪升级之路&lt;/h3&gt;
&lt;p&gt;从进入职场做运维到写点代码，慢慢的快四年了，就像玩消消乐一样，一关又一关的走了过来(你猜猜我的消消乐多少关了？哈哈)，在过五关斩六将(&lt;code&gt;不断的背锅救火&lt;/code&gt;)之后，感觉自己的知识体系和运维体系变化的挺大的，学到了很多的新知识今天和大家分享分享。&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%B9%BF%E5%91%8A%E5%8D%95/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%B9%BF%E5%91%8A%E5%8D%95/</guid>
        <description></description>
        <content:encoded></content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E9%93%BE%E6%8E%A5/</guid>
        <description>微信公众号文章链接 运维架构专辑 2020-06-20 OpenVPN高级进阶: 5个使用场景和问题集 2020-06-20 OpenVPN最难忘的一次”灾后重建“ Prometheus监控系列-部署篇 Pyth</description>
        <content:encoded>&lt;h1 id=&#34;微信公众号文章链接&#34;&gt;微信公众号文章链接&lt;/h1&gt;
&lt;h2 id=&#34;运维架构专辑&#34;&gt;运维架构专辑&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ZJbN1DYzMjy2h1Bqm8gGZw&#34;&gt;2020-06-20 OpenVPN高级进阶: 5个使用场景和问题集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/1B5k4iNGPU3EEHGuQmVMyQ&#34;&gt;2020-06-20 OpenVPN最难忘的一次”灾后重建“&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/TZzsHM1YbUHot6BGRqSzlg&#34;&gt;Prometheus监控系列-部署篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;python专辑&#34;&gt;Python专辑&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/YeQrcvP1fwN3hTOIYhRUZw&#34;&gt;2020-02-25 当运维遇上了&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484309&amp;amp;idx=1&amp;amp;sn=369d71f91a3f5e720bab103fc5f8f7f2&amp;amp;chksm=ea5b26aadd2cafbc4b8959096ffd9479ce93a8a76370f9e160198cb93b92ee3e74c7aff0c6f7&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2002-03-22 写给孩子看的Kubernetes动画指南 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484246&amp;amp;idx=1&amp;amp;sn=c2ca224c62f686c48209618f2f298652&amp;amp;chksm=ea5b2669dd2caf7f03c92c29c53a1d71d57f60e7c78596f15b43b4adc56da1087d00ece2df4d&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-07 kubernetes的ingress控制器比较(traefik2.0.5安装指南)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484220&amp;amp;idx=1&amp;amp;sn=034a8294af50b5083ecb447527907992&amp;amp;chksm=ea5b2603dd2caf15df22e8b79564c07f1ce21a721d0e74b2e021a0e29572cca15fe5cfde70a0&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-04 kubernetes深度探究Node和Pod的亲和性和反亲和性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Dcd5ixpvbbnQ_qNCfsHFAg&#34;&gt;2020-02-26 kubernetes安装方案大全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484082&amp;amp;idx=1&amp;amp;sn=b1c0f0b94bc955998f820775d2008567&amp;amp;chksm=ea5b278ddd2cae9bcd0de904cba86c2f9cae138129f2c08c69724a99f344858237ca9ad415bf&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2019-12-18 kubernetes最常用的资源对象Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/lK4KXjXykK5Bf0oqIEHmHg&#34;&gt;2020-06-12 kubernetes炼气期之掌握kuebernetes背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/k2BoZxlpPMMWMQFUEi6nPQ&#34;&gt;2020-06-12 kubernetes炼气期之k8s平台快速搭建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;devops技术栈&#34;&gt;DevOps技术栈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484232&amp;amp;idx=1&amp;amp;sn=3fe5b858cf4da28c911e50d4fd437c59&amp;amp;chksm=ea5b2677dd2caf61c47a33be64c3c2bcfac39f49242cdd175f2ae8d839f2a7196d5ffd485ca5&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-05 DevOps全开源端到端部署流水线视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;travis&#34;&gt;Travis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/9Bq__j04tZYJaOrD88zZUQ&#34;&gt;2020-06-05 GitHub+Travis+Mkdocs自动化构建文档库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484305&amp;amp;idx=1&amp;amp;sn=34a71a0efb9f5caeaee8d32137c23807&amp;amp;chksm=ea5b26aedd2cafb87a54009c8474c52d81caabeaa3ed554758d2586c69dbb4807930157f3c76&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-21 Jenkins流水线动画&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/fzzAtp2_fQGhVRU3Mo6lwA&#34;&gt;2020-06-08 自定义Build History中显示构建信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/r7CnMAIVJ_gMLL8WppWZbw&#34;&gt;2020-03-01 自定义构建Jenkins镜像实战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/k2BoZxlpPMMWMQFUEi6nPQ&#34;&gt;2020-06-08 Jenkins在kubernetes上的初体验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/-p4nPpVtdUNMixiSwlc43Q&#34;&gt;2020-06-08 Jenkins动态Slave在k8s上的实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ansible&#34;&gt;Ansible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484289&amp;amp;idx=1&amp;amp;sn=92a7ed81cabf68015f1257253601ab37&amp;amp;chksm=ea5b26bedd2cafa8fe90bc9075c977f50dc976d864920e11592c108418e9beedda3292fa7a4c&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-02-16 Ansible书籍分享(ansible for devops/ansible for kubernetes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gitlab&#34;&gt;GitLab&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484130&amp;amp;idx=1&amp;amp;sn=9d27d5f65d9e892a32f515e1da5cb52f&amp;amp;chksm=ea5b27dddd2caecb349c43d1d959578d00dc532ce4c4ae0c48b9f2b97f9d7230db3c6cf4804e&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-02-16 Gitlab Runner系列-环境部署篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484130&amp;amp;idx=2&amp;amp;sn=4cc63db67650f356ad83f49adb892953&amp;amp;chksm=ea5b27dddd2caecb18a04e132d4079ef8fd0dce15eb48c75db9854a4e0a53db6dc17c3a23b61&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-02-16 Gitlab Runner系列-持续集成篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484130&amp;amp;idx=3&amp;amp;sn=c3d7c45ebc8d824e6b69bc08ab5f4b86&amp;amp;chksm=ea5b27dddd2caecb75177dd6e5951d4fc6a1791584d18f13b5cc17ac51a06530669e00431bd2&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-02-16 Gitlab Runner系列-持续部署篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/1czEgEQoEWHmsYTiyrgGwg&#34;&gt;2020-06-06 用GitLAB CICD pipeline template持续集成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484302&amp;amp;idx=1&amp;amp;sn=924409fd610edbe44c90dafccc986b5d&amp;amp;chksm=ea5b26b1dd2cafa760fb442468d3c9983222feb9e69a5d2cf645f2c0822b376cc6534bed62dc&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-20 Prometheus监控系列-部署篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484302&amp;amp;idx=2&amp;amp;sn=d70dac0ce91d7411c20436f8c8fff0c7&amp;amp;chksm=ea5b26b1dd2cafa71f688bf5e9fb80d34c517c9bc90c497782e616d06055dcef4f18a3f6acd1&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-20 Prometheus监控系列-监控篇(consul)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484302&amp;amp;idx=3&amp;amp;sn=c9fbd5276645eac6185042c875e8ca39&amp;amp;chksm=ea5b26b1dd2cafa739d6a22dc542739890aee15064ab702cc718f8a5b4b9c3e1deff4a0e74c9&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-20 Awesome Alertmanager Rule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;develop&#34;&gt;Develop&lt;/h3&gt;
&lt;h4 id=&#34;go&#34;&gt;Go&lt;/h4&gt;
&lt;h4 id=&#34;python&#34;&gt;Python&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/_KPqbXfZsL1zgYNChwQ88A&#34;&gt;2020-02-21 Python原来如此美丽之Requeat &amp;amp; Parsel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linux&#34;&gt;linux&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/sNXCsFkVn9krCndm3yD6-A&#34;&gt;2020-02-28 企业级规范部署中央认证软件Openldap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/-K8ONKnT2lrXtJK7BKZI0Q&#34;&gt;2020-02-24 域名有效期监控&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484273&amp;amp;idx=1&amp;amp;sn=37e9e40ba03d7b7b8c6542657f66889e&amp;amp;chksm=ea5b264edd2caf58d23bddb1d32cda1dda7c1321a4ff001fc0dd979ce289c3cd2efb55a941ea&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-14 Awk权威指南之终结篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484258&amp;amp;idx=1&amp;amp;sn=01ea6b2f6ae4971dd5a2c0060bb1ca43&amp;amp;chksm=ea5b265ddd2caf4bfbf5696301bf3750b9557db65abe7d650961ab558b82a9d45780d379dc5b&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-11 Awk权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/2kx627fD_srXISiuZchNEw&#34;&gt;2020-06-13 打造Mac下高颜值好用的终端环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nosql&#34;&gt;NoSQL&lt;/h3&gt;
&lt;h4 id=&#34;mongodb&#34;&gt;Mongodb&lt;/h4&gt;
&lt;h4 id=&#34;elasticsearch&#34;&gt;Elasticsearch&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;2020-03-28 Elasticsearch-5.2.2集群升级&lt;/a&gt; ==待准备==&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;middleware&#34;&gt;middleware&lt;/h3&gt;
&lt;h4 id=&#34;message-queue&#34;&gt;Message Queue&lt;/h4&gt;
&lt;h5 id=&#34;rabbitmq&#34;&gt;RabbitMQ&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;2020-04-10 RabbitMQ-3.6.6集群升级&lt;/a&gt; ==待准备==&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;kafka&#34;&gt;Kafka&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;2020-04-20 Kafka-2.11-0.10.1.1集群升级&lt;/a&gt; ==待准备==&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;redis&#34;&gt;Redis&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;2020-03-30 Redis-3.2.8集群升级&lt;/a&gt; ==待准备==&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;service-discovery&#34;&gt;Service Discovery&lt;/h4&gt;
&lt;h5 id=&#34;consul&#34;&gt;Consul&lt;/h5&gt;
&lt;h5 id=&#34;zookeeper&#34;&gt;Zookeeper&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;2020-04-30 zookeeper-3.4.10集群升级&lt;/a&gt; ==待准备==&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;etcd&#34;&gt;Etcd&lt;/h5&gt;
&lt;h3 id=&#34;database&#34;&gt;Database&lt;/h3&gt;
&lt;h4 id=&#34;mysql&#34;&gt;MySQL&lt;/h4&gt;
&lt;h3 id=&#34;container-runtime&#34;&gt;Container Runtime&lt;/h3&gt;
&lt;h4 id=&#34;docker&#34;&gt;Docker&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484277&amp;amp;idx=1&amp;amp;sn=e859c54bde9c35256808c38bcc1e2447&amp;amp;chksm=ea5b264add2caf5c880cc492abb50c3533944b03ee4e75e1454707ba2f779112662722c16abd&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-15 Docker镜像分析工具之Dive介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484277&amp;amp;idx=2&amp;amp;sn=94b132b6f8097dbfc575cc46ee64f6ba&amp;amp;chksm=ea5b264add2caf5cbe99dbd4c707b6f1efce2357551abd890d2c3831e967ba27ad03635dddf4&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-15 Docker镜像分析工具之Dive视频指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/iNh6CFtwY2ALrUws-3ghiA&#34;&gt;2020-06-15 Lazydocker:专为&amp;quot;懒人&amp;quot;设计命令行可视化工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tools&#34;&gt;tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI2MTQzNjQ5Ng==&amp;amp;mid=2247484273&amp;amp;idx=1&amp;amp;sn=37e9e40ba03d7b7b8c6542657f66889e&amp;amp;chksm=ea5b264edd2caf58d23bddb1d32cda1dda7c1321a4ff001fc0dd979ce289c3cd2efb55a941ea&amp;amp;token=1078332751&amp;amp;lang=zh_CN#rd&#34;&gt;2020-03-13 IDE你要的永远激活在这里&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://linuxermaster.github.io/en/posts/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>marionxue@qq.com (Marionxue)</author>
        
        <guid>https://linuxermaster.github.io/en/posts/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB/</guid>
        <description>2020-07-06 YP小站 杨鹏 今天给小伙伴们推荐我朋友的公众号【云原生生态圈】专注于DevOps、Docker、Kubernetes、Service Mesh和Cloud Nati</description>
        <content:encoded>&lt;h4 id=&#34;2020-07-06-yp小站-杨鹏&#34;&gt;2020-07-06 YP小站 杨鹏&lt;/h4&gt;
&lt;p&gt;今天给小伙伴们推荐我朋友的公众号【云原生生态圈】专注于DevOps、Docker、Kubernetes、Service Mesh和Cloud Native等技术的实践与分享。欢迎您关注，和他一起学习和分享互联网最流行的技术。公众号后台回复【加群】可以加入DevOps&amp;amp;CloudNative技术交流群。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images.assets/image-20200705205731796.png&#34; alt=&#34;image-20200705205731796&#34; /&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>Marionxue</dc:creator>
        
        
        
        
        
        
      </item>
      

    
  </channel>
</rss>